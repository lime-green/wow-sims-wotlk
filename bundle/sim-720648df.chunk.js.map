{"version":3,"file":"sim-720648df.chunk.js","sources":["../../../ui/elemental_shaman/inputs.ts","../../../ui/elemental_shaman/presets.ts","../../../ui/elemental_shaman/sim.ts"],"sourcesContent":["import { IconPickerConfig } from '../core/components/icon_picker.js';\nimport { ElementalShaman_Options_ThunderstormRange, ElementalShaman_Rotation_BloodlustUse, ElementalShaman_Rotation_RotationType as RotationType, ShamanShield, ShamanTotems } from '../core/proto/shaman.js';\nimport { ElementalShaman_Options as ShamanOptions } from '../core/proto/shaman.js';\nimport { AirTotem } from '../core/proto/shaman.js';\nimport { Spec } from '../core/proto/common.js';\nimport { ActionId } from '../core/proto_utils/action_id.js';\nimport { Player } from '../core/player.js';\n\nimport * as InputHelpers from '../core/components/input_helpers.js';\nimport { EventID, TypedEvent } from 'ui/core/typed_event.js';\n\n// Configuration for spec-specific UI elements on the settings tab.\n// These don't need to be in a separate file but it keeps things cleaner.\n\nexport const InThunderstormRange = InputHelpers.makeSpecOptionsBooleanInput<Spec.SpecElementalShaman>({\n\tfieldName: 'thunderstormRange',\n\t// id: ActionId.fromSpellId(59159),\n\tlabel: \"Thunderstorm In Range\",\n\tlabelTooltip: \"When set to true, thunderstorm casts will cause damage.\",\n\tgetValue: (player: Player<Spec.SpecElementalShaman>) => player.getSpecOptions().thunderstormRange == ElementalShaman_Options_ThunderstormRange.TSInRange,\n\tsetValue: (eventID: EventID, player: Player<Spec.SpecElementalShaman>, newValue: boolean) => {\n\t\tconst newOptions = player.getSpecOptions();\n\t\tif (newValue) {\n\t\t\tnewOptions.thunderstormRange = ElementalShaman_Options_ThunderstormRange.TSInRange;\n\t\t} else {\n\t\t\tnewOptions.thunderstormRange = ElementalShaman_Options_ThunderstormRange.TSOutofRange;\n\t\t}\n\t\tplayer.setSpecOptions(eventID, newOptions);\n\t},\n});\n\nexport const ShamanShieldInput = InputHelpers.makeSpecOptionsEnumIconInput<Spec.SpecElementalShaman, ShamanShield>({\n\tfieldName: 'shield',\n\tvalues: [\n\t\t{ value: ShamanShield.NoShield, tooltip: 'No Shield' },\n\t\t{ actionId: ActionId.fromSpellId(57960), value: ShamanShield.WaterShield },\n\t\t{ actionId: ActionId.fromSpellId(49281), value: ShamanShield.LightningShield },\n\t],\n});\n\nexport const ElementalShamanRotationConfig = {\n\tinputs: [\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecElementalShaman, RotationType>({\n\t\t\tfieldName: 'type',\n\t\t\tlabel: 'Type',\n\t\t\tvalues: [\n\t\t\t\t{\n\t\t\t\t\tname: 'Adaptive', value: RotationType.Adaptive,\n\t\t\t\t\ttooltip: 'Dynamically adapts based on available mana to maximize CL casts without going OOM.',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Manual', value: RotationType.Manual,\n\t\t\t\t\ttooltip: 'Allows custom selection of which spells to use and to modify cast conditions.',\n\t\t\t\t},\n\t\t\t],\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecElementalShaman>({\n\t\t\tfieldName: 'bloodlust',\n\t\t\tlabel: 'Use Bloodlust',\n\t\t\tlabelTooltip: 'Player will cast bloodlust',\n\t\t\tgetValue: (player: Player<Spec.SpecElementalShaman>) => player.getRotation().bloodlust == ElementalShaman_Rotation_BloodlustUse.UseBloodlust,\n\t\t\tsetValue: (eventID: EventID, player: Player<Spec.SpecElementalShaman>, newValue: boolean) => {\n\t\t\t\tconst newRotation = player.getRotation();\n\t\t\t\tif (newValue) {\n\t\t\t\t\tnewRotation.bloodlust = ElementalShaman_Rotation_BloodlustUse.UseBloodlust;\n\t\t\t\t} else {\n\t\t\t\t\tnewRotation.bloodlust = ElementalShaman_Rotation_BloodlustUse.NoBloodlust;\n\t\t\t\t}\n\t\t\t\tplayer.setRotation(eventID, newRotation);\n\t\t\t},\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecElementalShaman>({\n\t\t\tfieldName: 'lvbFsWaitMs',\n\t\t\tlabel: 'Max wait for LvB/FS (ms)',\n\t\t\tlabelTooltip: 'Amount of time the sim will wait if FS is about to fall off or LvB CD is about to come up. Setting to 0 will default to 175ms',\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecElementalShaman>({\n\t\t\tfieldName: 'useChainLightning',\n\t\t\tlabel: 'Use Chain Lightning in Rotation',\n\t\t\tlabelTooltip: 'Use Chain Lightning in rotation',\n\t\t\tenableWhen: (player: Player<Spec.SpecElementalShaman>) => player.getRotation().type == RotationType.Manual,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecElementalShaman>({\n\t\t\tfieldName: 'useClOnlyGap',\n\t\t\tlabel: 'Use CL only as gap filler',\n\t\t\tlabelTooltip: 'Use CL to fill short gaps in LvB CD instead of on CD.',\n\t\t\tenableWhen: (player: Player<Spec.SpecElementalShaman>) => player.getRotation().type == RotationType.Manual && player.getRotation().useChainLightning,\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecElementalShaman>({\n\t\t\tfieldName: 'clMinManaPer',\n\t\t\tlabel: 'Min mana percent to use Chain Lightning',\n\t\t\tlabelTooltip: 'Customize minimum mana level to cast Chain Lightning. 0 will spam until OOM.',\n\t\t\tenableWhen: (player: Player<Spec.SpecElementalShaman>) => player.getRotation().type == RotationType.Manual && player.getRotation().useChainLightning,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecElementalShaman>({\n\t\t\tfieldName: 'useFireNova',\n\t\t\tlabel: 'Use Fire Nova in Rotation',\n\t\t\tlabelTooltip: 'Fire Nova will hit all targets when cast.',\n\t\t\tenableWhen: (player: Player<Spec.SpecElementalShaman>) => player.getRotation().type == RotationType.Manual,\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecElementalShaman>({\n\t\t\tfieldName: 'fnMinManaPer',\n\t\t\tlabel: 'Min mana percent to use FireNova',\n\t\t\tlabelTooltip: 'Customize minimum mana level to cast Fire Nova. 0 will spam until OOM.',\n\t\t\tenableWhen: (player: Player<Spec.SpecElementalShaman>) => player.getRotation().type == RotationType.Manual && player.getRotation().useFireNova,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecElementalShaman>({\n\t\t\tfieldName: 'overwriteFlameshock',\n\t\t\tlabel: 'Allow Flameshock to be overwritten',\n\t\t\tlabelTooltip: 'Will use flameshock at the end of the duration even if its still ticking if there isn\\'t enough time to cast lavaburst before expiring.',\n\t\t\tenableWhen: (player: Player<Spec.SpecElementalShaman>) => player.getRotation().type == RotationType.Manual,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecElementalShaman>({\n\t\t\tfieldName: 'alwaysCritLvb',\n\t\t\tlabel: 'Only cast Lavaburst with FS',\n\t\t\tlabelTooltip: 'Will only cast Lavaburst if Flameshock will be active when the cast finishes.',\n\t\t\tenableWhen: (player: Player<Spec.SpecElementalShaman>) => player.getRotation().type == RotationType.Manual,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecElementalShaman>({\n\t\t\tfieldName: 'useThunderstorm',\n\t\t\tlabel: 'Allow Thunderstorm to be cast.',\n\t\t\tlabelTooltip: 'Disabling this will stop thunderstorm from being cast entirely.',\n\t\t\tenableWhen: (player: Player<Spec.SpecElementalShaman>) => player.getRotation().type == RotationType.Manual,\n\t\t\tshowWhen: (player: Player<Spec.SpecElementalShaman>) => player.getTalents().thunderstorm,\n\t\t}),\n\t],\n};\n","import {\n\tConsumes,\n\tFaction,\n\tFlask,\n\tFood,\n\tGlyphs,\n\tPotions,\n  Profession,\n\tSpec,\n} from '../core/proto/common.js';\nimport { SavedTalents } from '../core/proto/ui.js';\n\nimport {\n  ElementalShaman_Rotation_RotationType as RotationType,\n  ElementalShaman_Rotation as ElementalShamanRotation,\n  ElementalShaman_Options as ElementalShamanOptions,\n  ShamanShield,\n  ShamanMajorGlyph,\n  ShamanMinorGlyph,\n  AirTotem,\n  EarthTotem,\n  FireTotem,\n  WaterTotem,\n  ShamanTotems,\n} from '../core/proto/shaman.js';\n\nimport * as PresetUtils from '../core/preset_utils.js';\n\nimport PreraidGear from './gear_sets/preraid.gear.json';\nimport P1Gear from './gear_sets/p1.gear.json';\nimport P2Gear from './gear_sets/p2.gear.json';\nimport P3AllianceGear from './gear_sets/p3_alliance.gear.json';\nimport P3HordeGear from './gear_sets/p3_horde.gear.json';\nimport P4Gear from './gear_sets/p4.gear.json';\n\nimport DefaultApl from './apls/default.apl.json';\nimport AdvancedApl from './apls/advanced.apl.json';\n\n// Preset options for this spec.\n// Eventually we will import these values for the raid sim too, so its good to\n// keep them in a separate file.\n\nexport const PRERAID_PRESET = PresetUtils.makePresetGear('Pre-raid Preset', PreraidGear);\nexport const P1_PRESET = PresetUtils.makePresetGear('P1 Preset', P1Gear);\nexport const P2_PRESET = PresetUtils.makePresetGear('P2 Preset', P2Gear);\nexport const P3_PRESET_ALLI = PresetUtils.makePresetGear('P3 Preset [A]', P3AllianceGear, { faction: Faction.Alliance });\nexport const P3_PRESET_HORDE = PresetUtils.makePresetGear('P3 Preset [H]', P3HordeGear, { faction: Faction.Horde });\nexport const P4_PRESET = PresetUtils.makePresetGear('P4 Preset', P4Gear);\n\nexport const DefaultRotation = ElementalShamanRotation.create({\n  totems: ShamanTotems.create({\n    earth: EarthTotem.StrengthOfEarthTotem,\n    air: AirTotem.WrathOfAirTotem,\n    fire: FireTotem.TotemOfWrath,\n    water: WaterTotem.ManaSpringTotem,\n    useFireElemental: true,\n  }),\n  type: RotationType.Adaptive,\n  fnMinManaPer: 66,\n  clMinManaPer: 33,\n  useChainLightning: false,\n  useFireNova: false,\n  useThunderstorm: true,\n});\n\nexport const ROTATION_PRESET_LEGACY = PresetUtils.makePresetLegacyRotation('Legacy', Spec.SpecElementalShaman, DefaultRotation);\nexport const ROTATION_PRESET_DEFAULT = PresetUtils.makePresetAPLRotation('Default', DefaultApl);\nexport const ROTATION_PRESET_ADVANCED = PresetUtils.makePresetAPLRotation('Advanced', AdvancedApl);\n\n// Default talents. Uses the wowhead calculator format, make the talents on\n// https://wowhead.com/wotlk/talent-calc and copy the numbers in the url.\nexport const StandardTalents = {\n  name: 'Standard',\n  data: SavedTalents.create({\n    talentsString: '0532001523212351322301351-005052031',\n    glyphs: Glyphs.create({\n      major1: ShamanMajorGlyph.GlyphOfLava,\n      major2: ShamanMajorGlyph.GlyphOfTotemOfWrath,\n      major3: ShamanMajorGlyph.GlyphOfLightningBolt,\n      minor1: ShamanMinorGlyph.GlyphOfThunderstorm,\n      minor2: ShamanMinorGlyph.GlyphOfWaterShield,\n      minor3: ShamanMinorGlyph.GlyphOfGhostWolf,\n    }),\n  }),\n};\n\nexport const Phase4Talents = {\n  name: 'Phase 4',\n  data: SavedTalents.create({\n    talentsString: '0533001523213351322301351-005050031',\n    glyphs: Glyphs.create({\n      major1: ShamanMajorGlyph.GlyphOfFlameShock,\n      major2: ShamanMajorGlyph.GlyphOfTotemOfWrath,\n      major3: ShamanMajorGlyph.GlyphOfLightningBolt,\n      minor1: ShamanMinorGlyph.GlyphOfThunderstorm,\n      minor2: ShamanMinorGlyph.GlyphOfWaterShield,\n      minor3: ShamanMinorGlyph.GlyphOfGhostWolf,\n    }),\n  }),\n};\n\nexport const DefaultOptions = ElementalShamanOptions.create({\n  shield: ShamanShield.WaterShield,\n  bloodlust: true,\n  totems: ShamanTotems.create({\n    earth: EarthTotem.StrengthOfEarthTotem,\n    air: AirTotem.WrathOfAirTotem,\n    fire: FireTotem.TotemOfWrath,\n    water: WaterTotem.ManaSpringTotem,\n    useFireElemental: true,\n  }),\n});\n\nexport const OtherDefaults = {\n    distanceFromTarget: 20,\n    profession1: Profession.Engineering,\n    profession2: Profession.Tailoring,\n    nibelungAverageCasts: 11,\n}\n\nexport const DefaultConsumes = Consumes.create({\n  defaultPotion: Potions.PotionOfWildMagic,\n  flask: Flask.FlaskOfTheFrostWyrm,\n  food: Food.FoodFishFeast,\n});","import { RaidBuffs } from '../core/proto/common.js';\nimport { PartyBuffs } from '../core/proto/common.js';\nimport { IndividualBuffs } from '../core/proto/common.js';\nimport { Debuffs } from '../core/proto/common.js';\nimport { Spec } from '../core/proto/common.js';\nimport { Stat } from '../core/proto/common.js';\nimport { TristateEffect } from '../core/proto/common.js'\nimport {\n\tAPLAction,\n\tAPLListItem,\n\tAPLRotation,\n} from '../core/proto/apl.js';\nimport { Player } from '../core/player.js';\nimport { Stats } from '../core/proto_utils/stats.js';\nimport { IndividualSimUI } from '../core/individual_sim_ui.js';\nimport { EventID, TypedEvent } from '../core/typed_event.js';\nimport { TotemsSection } from '../core/components/totem_inputs.js';\nimport * as OtherInputs from '../core/components/other_inputs.js';\nimport * as Mechanics from '../core/constants/mechanics.js';\nimport * as ShamanInputs from './inputs.js';\nimport * as Presets from './presets.js';\nimport { ElementalShaman_Options_ThunderstormRange, ElementalShaman_Rotation_BloodlustUse} from '../core/proto/shaman.js';\n\nexport class ElementalShamanSimUI extends IndividualSimUI<Spec.SpecElementalShaman> {\n\tconstructor(parentElem: HTMLElement, player: Player<Spec.SpecElementalShaman>) {\n\t\tsuper(parentElem, player, {\n\t\t\tcssClass: 'elemental-shaman-sim-ui',\n\t\t\tcssScheme: 'shaman',\n\t\t\t// List any known bugs / issues here and they'll be shown on the site.\n\t\t\tknownIssues: [\n\t\t\t],\n\t\t\twarnings: [\n\t\t\t\t// Warning to use all 4 totems if T6 2pc bonus is active.\n\t\t\t\t(simUI: IndividualSimUI<Spec.SpecElementalShaman>) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tupdateOn: TypedEvent.onAny([simUI.player.rotationChangeEmitter, simUI.player.currentStatsEmitter]),\n\t\t\t\t\t\tgetContent: () => {\n\t\t\t\t\t\t\tconst hasT62P = simUI.player.getCurrentStats().sets.includes('Skyshatter Regalia (2pc)');\n\t\t\t\t\t\t\tconst totems = simUI.player.getRotation().totems!;\n\t\t\t\t\t\t\tconst hasAll4Totems = totems && totems.earth && totems.air && totems.fire && totems.water;\n\t\t\t\t\t\t\tif (hasT62P && !hasAll4Totems) {\n\t\t\t\t\t\t\t\treturn 'T6 2pc bonus is equipped, but inactive because not all 4 totem types are being used.';\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn '';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t],\n\n\t\t\t// All stats for which EP should be calculated.\n\t\t\tepStats: [\n\t\t\t\tStat.StatIntellect,\n\t\t\t\tStat.StatSpellPower,\n\t\t\t\tStat.StatSpellHit,\n\t\t\t\tStat.StatSpellCrit,\n\t\t\t\tStat.StatSpellHaste,\n\t\t\t\tStat.StatMP5,\n\t\t\t],\n\t\t\t// Reference stat against which to calculate EP. I think all classes use either spell power or attack power.\n\t\t\tepReferenceStat: Stat.StatSpellPower,\n\t\t\t// Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\n\t\t\tdisplayStats: [\n\t\t\t\tStat.StatHealth,\n\t\t\t\tStat.StatMana,\n\t\t\t\tStat.StatStamina,\n\t\t\t\tStat.StatIntellect,\n\t\t\t\tStat.StatSpellPower,\n\t\t\t\tStat.StatSpellHit,\n\t\t\t\tStat.StatSpellCrit,\n\t\t\t\tStat.StatSpellHaste,\n\t\t\t\tStat.StatMP5,\n\t\t\t],\n\t\t\tmodifyDisplayStats: (player: Player<Spec.SpecElementalShaman>) => {\n\t\t\t\tlet stats = new Stats();\n\t\t\t\tstats = stats.addStat(Stat.StatSpellHit, player.getTalents().elementalPrecision * Mechanics.SPELL_HIT_RATING_PER_HIT_CHANCE);\n\t\t\t\tstats = stats.addStat(Stat.StatSpellCrit,\n\t\t\t\t\tplayer.getTalents().tidalMastery * 1 * Mechanics.SPELL_CRIT_RATING_PER_CRIT_CHANCE);\n\t\t\t\treturn {\n\t\t\t\t\ttalents: stats,\n\t\t\t\t};\n\t\t\t},\n\n\t\t\tdefaults: {\n\t\t\t\t// Default equipped gear.\n\t\t\t\tgear: Presets.P3_PRESET_HORDE.gear,\n\t\t\t\t// Default EP weights for sorting gear in the gear picker.\n\t\t\t\tepWeights: Stats.fromMap({\n\t\t\t\t\t[Stat.StatIntellect]: 0.22,\n\t\t\t\t\t[Stat.StatSpellPower]: 1,\n\t\t\t\t\t[Stat.StatSpellCrit]: 0.67,\n\t\t\t\t\t[Stat.StatSpellHaste]: 1.29,\n\t\t\t\t\t[Stat.StatMP5]: 0.08,\n\t\t\t\t}),\n\t\t\t\t// Default consumes settings.\n\t\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\t\t// Default rotation settings.\n\t\t\t\trotation: Presets.DefaultRotation,\n\t\t\t\t// Default talents.\n\t\t\t\ttalents: Presets.StandardTalents.data,\n\t\t\t\t// Default spec-specific settings.\n\t\t\t\tspecOptions: Presets.DefaultOptions,\n\t\t\t\tother: Presets.OtherDefaults,\n\t\t\t\t// Default raid/party buffs settings.\n\t\t\t\traidBuffs: RaidBuffs.create({\n\t\t\t\t\tarcaneBrilliance: true,\n\t\t\t\t\tdivineSpirit: true,\n\t\t\t\t\tgiftOfTheWild: TristateEffect.TristateEffectImproved,\n\t\t\t\t\tmoonkinAura: TristateEffect.TristateEffectImproved,\n\t\t\t\t\tsanctifiedRetribution: true,\n\t\t\t\t\tdemonicPact: 500,\n\t\t\t\t\twrathOfAirTotem: true,\n\t\t\t\t}),\n\t\t\t\tpartyBuffs: PartyBuffs.create({\n\t\t\t\t}),\n\t\t\t\tindividualBuffs: IndividualBuffs.create({\n\t\t\t\t\tblessingOfKings: true,\n\t\t\t\t\tblessingOfWisdom: 2,\n\t\t\t\t\tvampiricTouch: true,\n\t\t\t\t}),\n\t\t\t\tdebuffs: Debuffs.create({\n\t\t\t\t\tfaerieFire: TristateEffect.TristateEffectImproved,\n\t\t\t\t\tjudgementOfWisdom: true,\n\t\t\t\t\tmisery: true,\n\t\t\t\t\tcurseOfElements: true,\n\t\t\t\t\tshadowMastery: true,\n\t\t\t\t\theartOfTheCrusader: true,\n\t\t\t\t}),\n\t\t\t},\n\t\t\t// IconInputs to include in the 'Player' section on the settings tab.\n\t\t\tplayerIconInputs: [\n\t\t\t\tShamanInputs.ShamanShieldInput,\n\t\t\t],\n\t\t\t// Inputs to include in the 'Rotation' section on the settings tab.\n\t\t\trotationInputs: ShamanInputs.ElementalShamanRotationConfig,\n\t\t\t// Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\n\t\t\tincludeBuffDebuffInputs: [\n\t\t\t],\n\t\t\texcludeBuffDebuffInputs: [\n\t\t\t],\n\t\t\t// Inputs to include in the 'Other' section on the settings tab.\n\t\t\totherInputs: {\n\t\t\t\tinputs: [\n\t\t\t\t\tShamanInputs.InThunderstormRange,\n\t\t\t\t\tOtherInputs.TankAssignment,\n\t\t\t\t\tOtherInputs.nibelungAverageCasts,\n\t\t\t\t],\n\t\t\t},\n\t\t\tcustomSections: [\n\t\t\t\tTotemsSection,\n\t\t\t],\n\t\t\tencounterPicker: {\n\t\t\t\t// Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\n\t\t\t\tshowExecuteProportion: false,\n\t\t\t},\n\n\t\t\tpresets: {\n\t\t\t\t// Preset talents that the user can quickly select.\n\t\t\t\ttalents: [\n\t\t\t\t\tPresets.StandardTalents,\n\t\t\t\t\tPresets.Phase4Talents,\n\t\t\t\t],\n\t\t\t\t// Preset rotations that the user can quickly select.\n\t\t\t\trotations: [\n\t\t\t\t\tPresets.ROTATION_PRESET_LEGACY,\n\t\t\t\t\tPresets.ROTATION_PRESET_DEFAULT,\n\t\t\t\t\tPresets.ROTATION_PRESET_ADVANCED,\n\t\t\t\t],\n\t\t\t\t// Preset gear configurations that the user can quickly select.\n\t\t\t\tgear: [\n\t\t\t\t\tPresets.PRERAID_PRESET,\n\t\t\t\t\tPresets.P1_PRESET,\n\t\t\t\t\tPresets.P2_PRESET,\n\t\t\t\t\tPresets.P3_PRESET_ALLI,\n\t\t\t\t\tPresets.P3_PRESET_HORDE,\n\t\t\t\t\tPresets.P4_PRESET,\n\t\t\t\t],\n\t\t\t},\n\n\t\t\tautoRotation: (player: Player<Spec.SpecElementalShaman>): APLRotation => {\n\t\t\t\treturn Presets.ROTATION_PRESET_DEFAULT.rotation.rotation!;\n\t\t\t},\n\t\t});\n\t}\n}\n"],"names":["InThunderstormRange","InputHelpers.makeSpecOptionsBooleanInput","fieldName","label","labelTooltip","getValue","player","getSpecOptions","thunderstormRange","ElementalShaman_Options_ThunderstormRange","TSInRange","setValue","eventID","newValue","newOptions","TSOutofRange","setSpecOptions","ShamanShieldInput","InputHelpers.makeSpecOptionsEnumIconInput","values","value","ShamanShield","NoShield","tooltip","actionId","ActionId","fromSpellId","WaterShield","LightningShield","ElementalShamanRotationConfig","inputs","InputHelpers.makeRotationEnumInput","name","RotationType","Adaptive","Manual","InputHelpers.makeRotationBooleanInput","getRotation","bloodlust","ElementalShaman_Rotation_BloodlustUse","UseBloodlust","newRotation","NoBloodlust","setRotation","InputHelpers.makeRotationNumberInput","enableWhen","type","useChainLightning","useFireNova","showWhen","getTalents","thunderstorm","PRERAID_PRESET","PresetUtils.makePresetGear","P1_PRESET","P1Gear","P2_PRESET","P2Gear","P3_PRESET_ALLI","P3AllianceGear","faction","Faction","Alliance","P3_PRESET_HORDE","P3HordeGear","Horde","P4_PRESET","P4Gear","DefaultRotation","ElementalShamanRotation","create","totems","ShamanTotems","earth","EarthTotem","StrengthOfEarthTotem","air","AirTotem","WrathOfAirTotem","fire","FireTotem","TotemOfWrath","water","WaterTotem","ManaSpringTotem","useFireElemental","fnMinManaPer","clMinManaPer","useThunderstorm","ROTATION_PRESET_LEGACY","PresetUtils.makePresetLegacyRotation","Spec","SpecElementalShaman","ROTATION_PRESET_DEFAULT","PresetUtils.makePresetAPLRotation","DefaultApl","ROTATION_PRESET_ADVANCED","AdvancedApl","StandardTalents","data","SavedTalents","talentsString","glyphs","Glyphs","major1","ShamanMajorGlyph","GlyphOfLava","major2","GlyphOfTotemOfWrath","major3","GlyphOfLightningBolt","minor1","ShamanMinorGlyph","GlyphOfThunderstorm","minor2","GlyphOfWaterShield","minor3","GlyphOfGhostWolf","Phase4Talents","GlyphOfFlameShock","DefaultOptions","ElementalShamanOptions","shield","OtherDefaults","distanceFromTarget","profession1","Profession","Engineering","profession2","Tailoring","nibelungAverageCasts","DefaultConsumes","Consumes","defaultPotion","Potions","PotionOfWildMagic","flask","Flask","FlaskOfTheFrostWyrm","food","Food","FoodFishFeast","ElementalShamanSimUI","IndividualSimUI","constructor","parentElem","super","cssClass","cssScheme","knownIssues","warnings","simUI","updateOn","TypedEvent","onAny","rotationChangeEmitter","currentStatsEmitter","getContent","hasT62P","getCurrentStats","sets","includes","hasAll4Totems","epStats","Stat","StatIntellect","StatSpellPower","StatSpellHit","StatSpellCrit","StatSpellHaste","StatMP5","epReferenceStat","displayStats","StatHealth","StatMana","StatStamina","modifyDisplayStats","stats","Stats","addStat","elementalPrecision","Mechanics.SPELL_HIT_RATING_PER_HIT_CHANCE","tidalMastery","Mechanics.SPELL_CRIT_RATING_PER_CRIT_CHANCE","talents","defaults","gear","Presets.P3_PRESET_HORDE","epWeights","fromMap","consumes","Presets.DefaultConsumes","rotation","Presets.DefaultRotation","Presets.StandardTalents","specOptions","Presets.DefaultOptions","other","Presets.OtherDefaults","raidBuffs","RaidBuffs","arcaneBrilliance","divineSpirit","giftOfTheWild","TristateEffect","TristateEffectImproved","moonkinAura","sanctifiedRetribution","demonicPact","wrathOfAirTotem","partyBuffs","PartyBuffs","individualBuffs","IndividualBuffs","blessingOfKings","blessingOfWisdom","vampiricTouch","debuffs","Debuffs","faerieFire","judgementOfWisdom","misery","curseOfElements","shadowMastery","heartOfTheCrusader","playerIconInputs","ShamanInputs.ShamanShieldInput","rotationInputs","ShamanInputs.ElementalShamanRotationConfig","includeBuffDebuffInputs","excludeBuffDebuffInputs","otherInputs","ShamanInputs.InThunderstormRange","OtherInputs.TankAssignment","OtherInputs.nibelungAverageCasts","customSections","TotemsSection","encounterPicker","showExecuteProportion","presets","Presets.Phase4Talents","rotations","Presets.ROTATION_PRESET_LEGACY","Presets.ROTATION_PRESET_DEFAULT","Presets.ROTATION_PRESET_ADVANCED","Presets.PRERAID_PRESET","Presets.P1_PRESET","Presets.P2_PRESET","Presets.P3_PRESET_ALLI","Presets.P4_PRESET","autoRotation"],"mappings":"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"}