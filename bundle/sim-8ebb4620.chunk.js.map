{"version":3,"file":"sim-8ebb4620.chunk.js","sources":["../../../ui/retribution_paladin/presets.ts","../../../ui/retribution_paladin/inputs.ts","../../../ui/retribution_paladin/sim.ts"],"sourcesContent":["import {\n\tConjured,\n\tConsumes,\n\tCustomRotation,\n\tCustomSpell,\n\tFlask,\n\tFood,\n\tGlyphs,\n\tPotions,\n\tSpec,\n} from '../core/proto/common.js';\nimport { SavedTalents } from '../core/proto/ui.js';\n\nimport {\n\tPaladinAura as PaladinAura,\n\tPaladinJudgement as PaladinJudgement,\n\tRetributionPaladin_Rotation as RetributionPaladinRotation,\n\tRetributionPaladin_Options as RetributionPaladinOptions,\n\tRetributionPaladin_Rotation_RotationType as RotationType,\n\tRetributionPaladin_Rotation_SpellOption as SpellOption,\n\tPaladinMajorGlyph,\n\tPaladinMinorGlyph,\n} from '../core/proto/paladin.js';\n\nimport * as PresetUtils from '../core/preset_utils.js';\n\nimport PreraidGear from './gear_sets/preraid.gear.json';\nimport P1Gear from './gear_sets/p1.gear.json';\nimport P2Gear from './gear_sets/p2.gear.json';\nimport P3MaceGear from './gear_sets/p3_mace.gear.json';\nimport P4Gear from './gear_sets/p4.gear.json';\nimport P5Gear from './gear_sets/p5.gear.json';\n\nimport DefaultApl from './apls/default.apl.json';\n\n// Preset options for this spec.\n// Eventually we will import these values for the raid sim too, so its good to\n// keep them in a separate file.\n\nexport const PRERAID_PRESET = PresetUtils.makePresetGear('PreRaid', PreraidGear);\nexport const P1_PRESET = PresetUtils.makePresetGear('P1 Preset', P1Gear);\nexport const P2_PRESET = PresetUtils.makePresetGear('P2 Preset', P2Gear);\nexport const P3_PRESET = PresetUtils.makePresetGear('P3 Mace Preset', P3MaceGear);\nexport const P4_PRESET = PresetUtils.makePresetGear('P4 Preset', P4Gear);\nexport const P5_PRESET = PresetUtils.makePresetGear('P5 Preset', P5Gear);\n\nexport const DefaultRotation = RetributionPaladinRotation.create({\n\ttype: RotationType.Standard,\n\texoSlack: 500,\n\tconsSlack: 500,\n\tuseDivinePlea: true,\n\tavoidClippingConsecration: true,\n\tholdLastAvengingWrathUntilExecution: false,\n\tcancelChaosBane: false,\n\tdivinePleaPercentage: 0.75,\n\tholyWrathThreshold: 4,\n\tsovTargets: 1,\n\tcustomRotation: CustomRotation.create({\n\t\tspells: [\n\t\t\tCustomSpell.create({ spell: SpellOption.HammerOfWrath }),\n\t\t\tCustomSpell.create({ spell: SpellOption.JudgementOfWisdom }),\n\t\t\tCustomSpell.create({ spell: SpellOption.CrusaderStrike }),\n\t\t\tCustomSpell.create({ spell: SpellOption.DivineStorm }),\n\t\t\tCustomSpell.create({ spell: SpellOption.Consecration }),\n\t\t\tCustomSpell.create({ spell: SpellOption.Exorcism }),\n\t\t\tCustomSpell.create({ spell: SpellOption.HolyWrath }),\n\t\t],\n\t}),\n\tcustomCastSequence: CustomRotation.create({\n\t\tspells: [\n\t\t\tCustomSpell.create({ spell: SpellOption.JudgementOfWisdom }),\n\t\t\tCustomSpell.create({ spell: SpellOption.CrusaderStrike }),\n\t\t\tCustomSpell.create({ spell: SpellOption.DivineStorm }),\n\t\t\tCustomSpell.create({ spell: SpellOption.Consecration }),\n\t\t\tCustomSpell.create({ spell: SpellOption.CrusaderStrike }),\n\t\t\tCustomSpell.create({ spell: SpellOption.Exorcism }),\n\t\t\tCustomSpell.create({ spell: SpellOption.JudgementOfWisdom }),\n\t\t\tCustomSpell.create({ spell: SpellOption.CrusaderStrike }),\n\t\t\tCustomSpell.create({ spell: SpellOption.DivineStorm }),\n\t\t\tCustomSpell.create({ spell: SpellOption.Consecration }),\n\t\t\tCustomSpell.create({ spell: SpellOption.CrusaderStrike }),\n\t\t],\n\t}),\n});\n\nexport const ROTATION_PRESET_LEGACY_DEFAULT = PresetUtils.makePresetLegacyRotation('Legacy Default', Spec.SpecRetributionPaladin, DefaultRotation);\nexport const ROTATION_PRESET_DEFAULT = PresetUtils.makePresetAPLRotation('Default', DefaultApl);\n\n// Default talents. Uses the wowhead calculator format, make the talents on\n// https://wowhead.com/wotlk/talent-calc and copy the numbers in the url.\nexport const AuraMasteryTalents = {\n\tname: 'Aura Mastery',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '050501-05-05232051203331302133231331',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: PaladinMajorGlyph.GlyphOfSealOfVengeance,\n\t\t\tmajor2: PaladinMajorGlyph.GlyphOfJudgement,\n\t\t\tmajor3: PaladinMajorGlyph.GlyphOfReckoning,\n\t\t\tminor1: PaladinMinorGlyph.GlyphOfSenseUndead,\n\t\t\tminor2: PaladinMinorGlyph.GlyphOfLayOnHands,\n\t\t\tminor3: PaladinMinorGlyph.GlyphOfBlessingOfKings\n\t\t})\n\t}),\n};\n\n\nexport const DivineSacTalents = {\n\tname: 'Divine Sacrifice & Guardian',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '03-453201002-05222051203331302133201331',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: PaladinMajorGlyph.GlyphOfSealOfVengeance,\n\t\t\tmajor2: PaladinMajorGlyph.GlyphOfJudgement,\n\t\t\tmajor3: PaladinMajorGlyph.GlyphOfReckoning,\n\t\t\tminor1: PaladinMinorGlyph.GlyphOfSenseUndead,\n\t\t\tminor2: PaladinMinorGlyph.GlyphOfLayOnHands,\n\t\t\tminor3: PaladinMinorGlyph.GlyphOfBlessingOfKings\n\t\t})\n\t}),\n};\n\nexport const DefaultOptions = RetributionPaladinOptions.create({\n\taura: PaladinAura.RetributionAura,\n\tjudgement: PaladinJudgement.JudgementOfWisdom,\n});\n\nexport const DefaultConsumes = Consumes.create({\n\tdefaultPotion: Potions.PotionOfSpeed,\n\tdefaultConjured: Conjured.ConjuredDarkRune,\n\tflask: Flask.FlaskOfEndlessRage,\n\tfood: Food.FoodDragonfinFilet,\n});","import { Spec, ItemSlot } from '../core/proto/common.js';\nimport { Player } from '../core/player.js';\nimport { EventID } from '../core/typed_event.js';\nimport { IndividualSimUI } from '../core/individual_sim_ui.js';\nimport { ActionId } from '../core/proto_utils/action_id.js';\nimport { CustomRotation } from '../core/proto/common.js';\n\nimport {\n\tPaladinAura as PaladinAura,\n\tRetributionPaladin_Rotation as RetributionPaladinRotation,\n\tRetributionPaladin_Options as RetributionPaladinOptions,\n\tRetributionPaladin_Rotation_SpellOption as SpellOption,\n\tRetributionPaladin_Rotation_RotationType as RotationType,\n\tPaladinJudgement as PaladinJudgement,\n\tPaladinSeal,\n} from '../core/proto/paladin.js';\n\nimport * as InputHelpers from '../core/components/input_helpers.js';\n\nexport const AuraSelection = InputHelpers.makeSpecOptionsEnumIconInput<Spec.SpecRetributionPaladin, PaladinAura>({\n\tfieldName: 'aura',\n\tvalues: [\n\t\t{ value: PaladinAura.NoPaladinAura, tooltip: 'No Aura' },\n\t\t{ actionId: ActionId.fromSpellId(54043), value: PaladinAura.RetributionAura },\n\t],\n});\n\nexport const StartingSealSelection = InputHelpers.makeSpecOptionsEnumIconInput<Spec.SpecRetributionPaladin, PaladinSeal>({\n\tfieldName: 'seal',\n\tvalues: [\n\t\t{ actionId: ActionId.fromSpellId(42463), value: PaladinSeal.Vengeance },\n\t\t{ actionId: ActionId.fromSpellId(20154), value: PaladinSeal.Righteousness },\n\t\t{\n\t\t\tactionId: ActionId.fromSpellId(20424), value: PaladinSeal.Command,\n\t\t\tshowWhen: (player: Player<Spec.SpecRetributionPaladin>) => player.getTalents().sealOfCommand,\n\t\t},\n\t],\n\tchangeEmitter: (player: Player<Spec.SpecRetributionPaladin>) => player.changeEmitter,\n});\n\nexport const JudgementSelection = InputHelpers.makeSpecOptionsEnumIconInput<Spec.SpecRetributionPaladin, PaladinJudgement>({\n\tfieldName: 'judgement',\n\tvalues: [\n\t\t{ actionId: ActionId.fromSpellId(53408), value: PaladinJudgement.JudgementOfWisdom },\n\t\t{ actionId: ActionId.fromSpellId(20271), value: PaladinJudgement.JudgementOfLight },\n\t],\n});\n\n// Configuration for spec-specific UI elements on the settings tab.\n// These don't need to be in a separate file but it keeps things cleaner.\nexport const RetributionPaladinRotationExoSlackConfig = InputHelpers.makeRotationNumberInput<Spec.SpecRetributionPaladin>({\n\tfieldName: \"exoSlack\",\n\tlabel: \"Exo Slack (MS)\",\n\tlabelTooltip: \"Amount of extra time in MS to give main abilities to come off cooldown before using Exorcism on single target\",\n\tpositive: true,\n\tshowWhen: (player: Player<Spec.SpecRetributionPaladin>) => player.getRotation().type == RotationType.Standard,\n})\n\nexport const RetributionPaladinRotationConsSlackConfig = InputHelpers.makeRotationNumberInput<Spec.SpecRetributionPaladin>({\n\tfieldName: \"consSlack\",\n\tlabel: \"Cons Slack (MS)\",\n\tlabelTooltip: \"Amount of extra time in MS to give main abilities to come off cooldown before using Consecration on single target\",\n\tpositive: true,\n\tshowWhen: (player: Player<Spec.SpecRetributionPaladin>) => player.getRotation().type == RotationType.Standard,\n})\n\n\nexport const RetributionPaladinRotationDivinePleaSelection = InputHelpers.makeRotationBooleanInput<Spec.SpecRetributionPaladin>({\n\tfieldName: 'useDivinePlea',\n\tlabel: 'Use Divine Plea',\n\tlabelTooltip: 'Whether or not to maintain Divine Plea',\n\tshowWhen: (player: Player<Spec.SpecRetributionPaladin>) => player.getRotation().type == RotationType.Standard,\n});\n\n// Reuse field name, but different tooltip.\nexport const RetributionPaladinRotationDivinePleaSelectionAlternate = InputHelpers.makeRotationBooleanInput<Spec.SpecRetributionPaladin>({\n\tfieldName: 'useDivinePlea',\n\tlabel: 'Use Divine Plea - Out of Sequence',\n\tlabelTooltip: 'Whether or not to maintain Divine Plea, this happens OUTSIDE of the cast sequence',\n\tshowWhen: (player: Player<Spec.SpecRetributionPaladin>) => player.getRotation().type == RotationType.CastSequence\n});\n\nexport const RetributionPaladinRotationDivinePleaPercentageConfig = InputHelpers.makeRotationNumberInput<Spec.SpecRetributionPaladin>({\n\tfieldName: \"divinePleaPercentage\",\n\tlabel: \"Divine Plea Mana Threshold %\",\n\tlabelTooltip: \"% of max mana left before beginning to use Divine Plea\",\n\tpercent: true,\n\tpositive: true,\n})\n\nexport const RetributionPaladinRotationHolyWrathConfig = InputHelpers.makeRotationNumberInput<Spec.SpecRetributionPaladin>({\n\tfieldName: \"holyWrathThreshold\",\n\tlabel: \"Holy Wrath Threshold\",\n\tlabelTooltip: \"Minimum number of Demon and Undead units before Holy Wrath is considered viable to add to an AOE rotation.\",\n\tpositive: true,\n\tshowWhen: (player: Player<Spec.SpecRetributionPaladin>) => player.getRotation().type == RotationType.Standard,\n})\n\nexport const RetributionPaladinSoVTargets = InputHelpers.makeRotationNumberInput<Spec.SpecRetributionPaladin>({\n\tfieldName: \"sovTargets\",\n\tlabel: \"Max SoV Targets\",\n\tlabelTooltip: \"The maximum number of targets to keep the SoV debuff on.\",\n\tpositive: true,\n\tshowWhen: (player: Player<Spec.SpecRetributionPaladin>) => player.getSpecOptions().seal == PaladinSeal.Vengeance,\n\tchangeEmitter: (player: Player<Spec.SpecRetributionPaladin>) => player.changeEmitter,\n})\n\nexport const RetributionPaladinRotationAvoidClippingConsecration = InputHelpers.makeRotationBooleanInput<Spec.SpecRetributionPaladin>({\n\tfieldName: 'avoidClippingConsecration',\n\tlabel: 'Avoid Clipping Consecration',\n\tlabelTooltip: 'Avoid clipping consecration at the end of a fight.',\n\tshowWhen: (player: Player<Spec.SpecRetributionPaladin>) => (player.getRotation().type == RotationType.Standard) || (player.getRotation().type == RotationType.Custom),\n});\n\nexport const RetributionPaladinRotationHoldLastAvengingWrathUntilExecution = InputHelpers.makeRotationBooleanInput<Spec.SpecRetributionPaladin>({\n\tfieldName: 'holdLastAvengingWrathUntilExecution',\n\tlabel: 'Hold Avenging Wrath Until Execution',\n\tlabelTooltip: 'Hold last Avenging Wrath usage until the execution phase. This currently does not work if specific Avenging Wrath CD usage times are specified.',\n\tshowWhen: (player: Player<Spec.SpecRetributionPaladin>) => (player.getRotation().type == RotationType.Standard) || (player.getRotation().type == RotationType.Custom),\n});\n\nexport const RetributionPaladinRotationCancelChaosBane = InputHelpers.makeRotationBooleanInput<Spec.SpecRetributionPaladin>({\n\tfieldName: 'cancelChaosBane',\n\tlabel: 'Cancel Chaos Bane Buff From Shadowmourne',\n\tlabelTooltip: 'Cancels the buff provided when Shadowmourne soul shard buff reaches 10 stacks.',\n\tshowWhen: (player: Player<Spec.SpecRetributionPaladin>) => player.getEquippedItem(ItemSlot.ItemSlotMainHand)?.item.name == \"Shadowmourne\",\n});\n\nexport const RetributionPaladinRotationPriorityConfig = InputHelpers.makeCustomRotationInput<Spec.SpecRetributionPaladin, SpellOption>({\n\tfieldName: 'customRotation',\n\tnumColumns: 2,\n\tvalues: [\n\t\t{ actionId: ActionId.fromSpellId(53408), value: SpellOption.JudgementOfWisdom },\n\t\t{ actionId: ActionId.fromSpellId(53385), value: SpellOption.DivineStorm },\n\t\t{ actionId: ActionId.fromSpellId(48806), value: SpellOption.HammerOfWrath },\n\t\t{ actionId: ActionId.fromSpellId(48819), value: SpellOption.Consecration },\n\t\t{ actionId: ActionId.fromSpellId(48817), value: SpellOption.HolyWrath },\n\t\t{ actionId: ActionId.fromSpellId(35395), value: SpellOption.CrusaderStrike },\n\t\t{ actionId: ActionId.fromSpellId(48801), value: SpellOption.Exorcism },\n\t\t{ actionId: ActionId.fromSpellId(54428), value: SpellOption.DivinePlea }\n\t],\n\tshowWhen: (player: Player<Spec.SpecRetributionPaladin>) => player.getRotation().type == RotationType.Custom,\n});\n\nexport const RetributionPaladinCastSequenceConfig = InputHelpers.makeCustomRotationInput<Spec.SpecRetributionPaladin, SpellOption>({\n\tfieldName: 'customCastSequence',\n\tnumColumns: 2,\n\tvalues: [\n\t\t{ actionId: ActionId.fromSpellId(53408), value: SpellOption.JudgementOfWisdom },\n\t\t{ actionId: ActionId.fromSpellId(53385), value: SpellOption.DivineStorm },\n\t\t{ actionId: ActionId.fromSpellId(48806), value: SpellOption.HammerOfWrath },\n\t\t{ actionId: ActionId.fromSpellId(48819), value: SpellOption.Consecration },\n\t\t{ actionId: ActionId.fromSpellId(48817), value: SpellOption.HolyWrath },\n\t\t{ actionId: ActionId.fromSpellId(35395), value: SpellOption.CrusaderStrike },\n\t\t{ actionId: ActionId.fromSpellId(48801), value: SpellOption.Exorcism },\n\t\t{ actionId: ActionId.fromSpellId(54428), value: SpellOption.DivinePlea }\n\t],\n\tshowWhen: (player: Player<Spec.SpecRetributionPaladin>) => player.getRotation().type == RotationType.CastSequence,\n});\n\nexport const RotationSelector = InputHelpers.makeRotationEnumInput<Spec.SpecRetributionPaladin, RotationType>({\n\tfieldName: 'type',\n\tlabel: 'Type',\n\tlabelTooltip:\n\t\t`<ul>\n\t\t<li>\n\t\t\t<div>Standard: All-in-one rotation for single target and aoe.</div>\n\t\t</li>\n\t\t<li>\n\t\t\t<div>Custom: Highest spell that is ready will be cast.</div>\n\t\t</li>\n\t\t<li>\n\t\t\t<div>Cast Sequence: Spells will be cast in the order of the list. (Like 1-button-macro)</div>\n\t\t</li>\n\t</ul>`,\n\tvalues: [\n\t\t{ name: 'Standard', value: RotationType.Standard },\n\t\t{ name: 'Custom', value: RotationType.Custom },\n\t\t{ name: 'Cast Sequence', value: RotationType.CastSequence },\n\t],\n});","import { RaidBuffs } from '../core/proto/common.js';\nimport { PartyBuffs } from '../core/proto/common.js';\nimport { IndividualBuffs } from '../core/proto/common.js';\nimport { Debuffs } from '../core/proto/common.js';\nimport { Spec } from '../core/proto/common.js';\nimport { Stat, PseudoStat } from '../core/proto/common.js';\nimport { TristateEffect } from '../core/proto/common.js'\nimport {\n\tAPLAction,\n\tAPLListItem,\n\tAPLRotation,\n} from '../core/proto/apl.js';\nimport { Stats } from '../core/proto_utils/stats.js';\nimport { Player } from '../core/player.js';\nimport { IndividualSimUI } from '../core/individual_sim_ui.js';\nimport { EventID, TypedEvent } from '../core/typed_event.js';\n\nimport * as IconInputs from '../core/components/icon_inputs.js';\nimport * as OtherInputs from '../core/components/other_inputs.js';\nimport * as Mechanics from '../core/constants/mechanics.js';\n\nimport { PaladinMajorGlyph, PaladinSeal } from '../core/proto/paladin.js';\n\nimport * as RetributionPaladinInputs from './inputs.js';\nimport * as Presets from './presets.js';\n\nexport class RetributionPaladinSimUI extends IndividualSimUI<Spec.SpecRetributionPaladin> {\n\tconstructor(parentElem: HTMLElement, player: Player<Spec.SpecRetributionPaladin>) {\n\t\tsuper(parentElem, player, {\n\t\t\tcssClass: 'retribution-paladin-sim-ui',\n\t\t\tcssScheme: 'paladin',\n\t\t\t// List any known bugs / issues here and they'll be shown on the site.\n\t\t\tknownIssues: [\n\t\t\t],\n\n\t\t\t// All stats for which EP should be calculated.\n\t\t\tepStats: [\n\t\t\t\tStat.StatStrength,\n\t\t\t\tStat.StatAgility,\n\t\t\t\tStat.StatIntellect,\n\t\t\t\tStat.StatMP5,\n\t\t\t\tStat.StatAttackPower,\n\t\t\t\tStat.StatMeleeHit,\n\t\t\t\tStat.StatMeleeCrit,\n\t\t\t\tStat.StatMeleeHaste,\n\t\t\t\tStat.StatExpertise,\n\t\t\t\tStat.StatArmorPenetration,\n\t\t\t\tStat.StatSpellPower,\n\t\t\t\tStat.StatSpellCrit,\n\t\t\t\tStat.StatSpellHit,\n\t\t\t\tStat.StatSpellHaste,\n\t\t\t],\n\t\t\tepPseudoStats: [\n\t\t\t\tPseudoStat.PseudoStatMainHandDps,\n\t\t\t],\n\t\t\t// Reference stat against which to calculate EP. I think all classes use either spell power or attack power.\n\t\t\tepReferenceStat: Stat.StatAttackPower,\n\t\t\t// Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\n\t\t\tdisplayStats: [\n\t\t\t\tStat.StatStrength,\n\t\t\t\tStat.StatAgility,\n\t\t\t\tStat.StatIntellect,\n\t\t\t\tStat.StatMP5,\n\t\t\t\tStat.StatAttackPower,\n\t\t\t\tStat.StatMeleeHit,\n\t\t\t\tStat.StatMeleeCrit,\n\t\t\t\tStat.StatMeleeHaste,\n\t\t\t\tStat.StatExpertise,\n\t\t\t\tStat.StatArmorPenetration,\n\t\t\t\tStat.StatSpellHaste,\n\t\t\t\tStat.StatSpellPower,\n\t\t\t\tStat.StatSpellCrit,\n\t\t\t\tStat.StatSpellHit,\n\t\t\t\tStat.StatMana,\n\t\t\t\tStat.StatHealth,\n\t\t\t],\n\t\t\tmodifyDisplayStats: (player: Player<Spec.SpecRetributionPaladin>) => {\n\t\t\t\tlet stats = new Stats();\n\n\t\t\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\t\t\tif (player.getMajorGlyphs().includes(PaladinMajorGlyph.GlyphOfSealOfVengeance) && (player.getSpecOptions().seal == PaladinSeal.Vengeance)) {\n\t\t\t\t\t\tstats = stats.addStat(Stat.StatExpertise, 10 * Mechanics.EXPERTISE_PER_QUARTER_PERCENT_REDUCTION);\n\t\t\t\t\t}\n\t\t\t\t})\n\n\t\t\t\treturn {\n\t\t\t\t\ttalents: stats,\n\t\t\t\t};\n\t\t\t},\n\n\t\t\tdefaults: {\n\t\t\t\t// Default equipped gear.\n\t\t\t\tgear: Presets.P1_PRESET.gear,\n\t\t\t\t// Default EP weights for sorting gear in the gear picker.\n\t\t\t\tepWeights: Stats.fromMap({\n\t\t\t\t\t[Stat.StatStrength]: 2.53,\n\t\t\t\t\t[Stat.StatAgility]: 1.13,\n\t\t\t\t\t[Stat.StatIntellect]: 0.15,\n\t\t\t\t\t[Stat.StatSpellPower]: 0.32,\n\t\t\t\t\t[Stat.StatSpellHit]: 0.41,\n\t\t\t\t\t[Stat.StatSpellCrit]: 0.01,\n\t\t\t\t\t[Stat.StatSpellHaste]: 0.12,\n\t\t\t\t\t[Stat.StatMP5]: 0.05,\n\t\t\t\t\t[Stat.StatAttackPower]: 1,\n\t\t\t\t\t[Stat.StatMeleeHit]: 1.96,\n\t\t\t\t\t[Stat.StatMeleeCrit]: 1.16,\n\t\t\t\t\t[Stat.StatMeleeHaste]: 1.44,\n\t\t\t\t\t[Stat.StatArmorPenetration]: 0.76,\n\t\t\t\t\t[Stat.StatExpertise]: 1.80,\n\t\t\t\t}, {\n\t\t\t\t\t[PseudoStat.PseudoStatMainHandDps]: 7.33,\n\t\t\t\t}),\n\t\t\t\t// Default consumes settings.\n\t\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\t\t// Default rotation settings.\n\t\t\t\trotation: Presets.DefaultRotation,\n\t\t\t\t// Default talents.\n\t\t\t\ttalents: Presets.AuraMasteryTalents.data,\n\t\t\t\t// Default spec-specific settings.\n\t\t\t\tspecOptions: Presets.DefaultOptions,\n\t\t\t\t// Default raid/party buffs settings.\n\t\t\t\traidBuffs: RaidBuffs.create({\n\t\t\t\t\tarcaneBrilliance: true,\n\t\t\t\t\tdivineSpirit: true,\n\t\t\t\t\tgiftOfTheWild: TristateEffect.TristateEffectImproved,\n\t\t\t\t\tbloodlust: true,\n\t\t\t\t\tmanaSpringTotem: TristateEffect.TristateEffectRegular,\n\t\t\t\t\thornOfWinter: true,\n\t\t\t\t\tbattleShout: TristateEffect.TristateEffectImproved,\n\t\t\t\t\tsanctifiedRetribution: true,\n\t\t\t\t\tswiftRetribution: true,\n\t\t\t\t\telementalOath: true,\n\t\t\t\t\trampage: true,\n\t\t\t\t\ttrueshotAura: true,\n\t\t\t\t\ticyTalons: true,\n\t\t\t\t\ttotemOfWrath: true,\n\t\t\t\t\twrathOfAirTotem: true,\n\t\t\t\t\tdemonicPact: 500,\n\t\t\t\t}),\n\t\t\t\tpartyBuffs: PartyBuffs.create({\n\t\t\t\t}),\n\t\t\t\tindividualBuffs: IndividualBuffs.create({\n\t\t\t\t\tjudgementsOfTheWise: true,\n\t\t\t\t\tblessingOfKings: true,\n\t\t\t\t\tblessingOfMight: TristateEffect.TristateEffectImproved,\n\t\t\t\t}),\n\t\t\t\tdebuffs: Debuffs.create({\n\t\t\t\t\tshadowMastery: true,\n\t\t\t\t\ttotemOfWrath: true,\n\t\t\t\t\tjudgementOfWisdom: true,\n\t\t\t\t\tjudgementOfLight: true,\n\t\t\t\t\tmisery: true,\n\t\t\t\t\tcurseOfElements: true,\n\t\t\t\t\tbloodFrenzy: true,\n\t\t\t\t\texposeArmor: true,\n\t\t\t\t\tsunderArmor: true,\n\t\t\t\t\tfaerieFire: TristateEffect.TristateEffectImproved,\n\t\t\t\t\tcurseOfWeakness: TristateEffect.TristateEffectRegular,\n\t\t\t\t}),\n\t\t\t},\n\n\t\t\t// IconInputs to include in the 'Player' section on the settings tab.\n\t\t\tplayerIconInputs: [\n\t\t\t\tRetributionPaladinInputs.AuraSelection,\n\t\t\t\tRetributionPaladinInputs.JudgementSelection,\n\t\t\t\tRetributionPaladinInputs.StartingSealSelection,\n\t\t\t],\n\t\t\t// Inputs to include in the 'Rotation' section on the settings tab.\n\t\t\trotationInputs: {\n\t\t\t\tinputs: [\n\t\t\t\t\tRetributionPaladinInputs.RotationSelector,\n\t\t\t\t\tRetributionPaladinInputs.RetributionPaladinRotationDivinePleaSelection,\n\t\t\t\t\tRetributionPaladinInputs.RetributionPaladinRotationAvoidClippingConsecration,\n\t\t\t\t\tRetributionPaladinInputs.RetributionPaladinRotationHoldLastAvengingWrathUntilExecution,\n\t\t\t\t\tRetributionPaladinInputs.RetributionPaladinRotationCancelChaosBane,\n\t\t\t\t\tRetributionPaladinInputs.RetributionPaladinRotationDivinePleaSelectionAlternate,\n\t\t\t\t\tRetributionPaladinInputs.RetributionPaladinRotationDivinePleaPercentageConfig,\n\t\t\t\t\tRetributionPaladinInputs.RetributionPaladinRotationConsSlackConfig,\n\t\t\t\t\tRetributionPaladinInputs.RetributionPaladinRotationExoSlackConfig,\n\t\t\t\t\tRetributionPaladinInputs.RetributionPaladinRotationHolyWrathConfig,\n\t\t\t\t\tRetributionPaladinInputs.RetributionPaladinSoVTargets,\n\t\t\t\t\tRetributionPaladinInputs.RetributionPaladinRotationPriorityConfig,\n\t\t\t\t\tRetributionPaladinInputs.RetributionPaladinCastSequenceConfig\n\t\t\t\t]\n\t\t\t},\n\t\t\t// Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\n\t\t\tincludeBuffDebuffInputs: [\n\t\t\t\tIconInputs.ReplenishmentBuff,\n\t\t\t],\n\t\t\texcludeBuffDebuffInputs: [\n\t\t\t],\n\t\t\t// Inputs to include in the 'Other' section on the settings tab.\n\t\t\totherInputs: {\n\t\t\t\tinputs: [\n\t\t\t\t\tOtherInputs.TankAssignment,\n\t\t\t\t\tOtherInputs.InFrontOfTarget,\n\t\t\t\t],\n\t\t\t},\n\t\t\tencounterPicker: {\n\t\t\t\t// Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\n\t\t\t\tshowExecuteProportion: false,\n\t\t\t},\n\n\t\t\tpresets: {\n\t\t\t\trotations: [\n\t\t\t\t\tPresets.ROTATION_PRESET_LEGACY_DEFAULT,\n\t\t\t\t\tPresets.ROTATION_PRESET_DEFAULT,\n\t\t\t\t],\n\t\t\t\t// Preset talents that the user can quickly select.\n\t\t\t\ttalents: [\n\t\t\t\t\tPresets.AuraMasteryTalents,\n\t\t\t\t\tPresets.DivineSacTalents,\n\t\t\t\t],\n\t\t\t\t// Preset gear configurations that the user can quickly select.\n\t\t\t\tgear: [\n\t\t\t\t\tPresets.PRERAID_PRESET,\n\t\t\t\t\tPresets.P1_PRESET,\n\t\t\t\t\tPresets.P2_PRESET,\n\t\t\t\t\tPresets.P3_PRESET,\n\t\t\t\t\tPresets.P4_PRESET,\n\t\t\t\t\tPresets.P5_PRESET,\n\t\t\t\t],\n\t\t\t},\n\n\t\t\tautoRotation: (player: Player<Spec.SpecRetributionPaladin>): APLRotation => {\n\t\t\t\treturn Presets.ROTATION_PRESET_DEFAULT.rotation.rotation!;\n\t\t\t},\n\t\t});\n\t}\n}\n"],"names":["PRERAID_PRESET","PresetUtils.makePresetGear","P1_PRESET","P1Gear","P2_PRESET","P2Gear","P3_PRESET","P3MaceGear","P4_PRESET","P4Gear","P5_PRESET","P5Gear","DefaultRotation","RetributionPaladinRotation","create","type","RotationType","Standard","exoSlack","consSlack","useDivinePlea","avoidClippingConsecration","holdLastAvengingWrathUntilExecution","cancelChaosBane","divinePleaPercentage","holyWrathThreshold","sovTargets","customRotation","CustomRotation","spells","CustomSpell","spell","SpellOption","HammerOfWrath","JudgementOfWisdom","CrusaderStrike","DivineStorm","Consecration","Exorcism","HolyWrath","customCastSequence","ROTATION_PRESET_LEGACY_DEFAULT","PresetUtils.makePresetLegacyRotation","Spec","SpecRetributionPaladin","ROTATION_PRESET_DEFAULT","PresetUtils.makePresetAPLRotation","DefaultApl","AuraMasteryTalents","name","data","SavedTalents","talentsString","glyphs","Glyphs","major1","PaladinMajorGlyph","GlyphOfSealOfVengeance","major2","GlyphOfJudgement","major3","GlyphOfReckoning","minor1","PaladinMinorGlyph","GlyphOfSenseUndead","minor2","GlyphOfLayOnHands","minor3","GlyphOfBlessingOfKings","DivineSacTalents","DefaultOptions","RetributionPaladinOptions","aura","PaladinAura","RetributionAura","judgement","PaladinJudgement","DefaultConsumes","Consumes","defaultPotion","Potions","PotionOfSpeed","defaultConjured","Conjured","ConjuredDarkRune","flask","Flask","FlaskOfEndlessRage","food","Food","FoodDragonfinFilet","AuraSelection","InputHelpers.makeSpecOptionsEnumIconInput","fieldName","values","value","NoPaladinAura","tooltip","actionId","ActionId","fromSpellId","StartingSealSelection","PaladinSeal","Vengeance","Righteousness","Command","showWhen","player","getTalents","sealOfCommand","changeEmitter","JudgementSelection","JudgementOfLight","RetributionPaladinRotationExoSlackConfig","InputHelpers.makeRotationNumberInput","label","labelTooltip","positive","getRotation","RetributionPaladinRotationConsSlackConfig","RetributionPaladinRotationDivinePleaSelection","InputHelpers.makeRotationBooleanInput","RetributionPaladinRotationDivinePleaSelectionAlternate","CastSequence","RetributionPaladinRotationDivinePleaPercentageConfig","percent","RetributionPaladinRotationHolyWrathConfig","RetributionPaladinSoVTargets","getSpecOptions","seal","RetributionPaladinRotationAvoidClippingConsecration","Custom","RetributionPaladinRotationHoldLastAvengingWrathUntilExecution","RetributionPaladinRotationCancelChaosBane","getEquippedItem","ItemSlot","ItemSlotMainHand","item","RetributionPaladinRotationPriorityConfig","InputHelpers.makeCustomRotationInput","numColumns","DivinePlea","RetributionPaladinCastSequenceConfig","RotationSelector","InputHelpers.makeRotationEnumInput","RetributionPaladinSimUI","IndividualSimUI","constructor","parentElem","super","cssClass","cssScheme","knownIssues","epStats","Stat","StatStrength","StatAgility","StatIntellect","StatMP5","StatAttackPower","StatMeleeHit","StatMeleeCrit","StatMeleeHaste","StatExpertise","StatArmorPenetration","StatSpellPower","StatSpellCrit","StatSpellHit","StatSpellHaste","epPseudoStats","PseudoStat","PseudoStatMainHandDps","epReferenceStat","displayStats","StatMana","StatHealth","modifyDisplayStats","stats","Stats","TypedEvent","freezeAllAndDo","getMajorGlyphs","includes","addStat","Mechanics.EXPERTISE_PER_QUARTER_PERCENT_REDUCTION","talents","defaults","gear","Presets.P1_PRESET","epWeights","fromMap","consumes","Presets.DefaultConsumes","rotation","Presets.DefaultRotation","Presets.AuraMasteryTalents","specOptions","Presets.DefaultOptions","raidBuffs","RaidBuffs","arcaneBrilliance","divineSpirit","giftOfTheWild","TristateEffect","TristateEffectImproved","bloodlust","manaSpringTotem","TristateEffectRegular","hornOfWinter","battleShout","sanctifiedRetribution","swiftRetribution","elementalOath","rampage","trueshotAura","icyTalons","totemOfWrath","wrathOfAirTotem","demonicPact","partyBuffs","PartyBuffs","individualBuffs","IndividualBuffs","judgementsOfTheWise","blessingOfKings","blessingOfMight","debuffs","Debuffs","shadowMastery","judgementOfWisdom","judgementOfLight","misery","curseOfElements","bloodFrenzy","exposeArmor","sunderArmor","faerieFire","curseOfWeakness","playerIconInputs","RetributionPaladinInputs.AuraSelection","RetributionPaladinInputs.JudgementSelection","RetributionPaladinInputs.StartingSealSelection","rotationInputs","inputs","RetributionPaladinInputs.RotationSelector","RetributionPaladinInputs.RetributionPaladinRotationDivinePleaSelection","RetributionPaladinInputs.RetributionPaladinRotationAvoidClippingConsecration","RetributionPaladinInputs.RetributionPaladinRotationHoldLastAvengingWrathUntilExecution","RetributionPaladinInputs.RetributionPaladinRotationCancelChaosBane","RetributionPaladinInputs.RetributionPaladinRotationDivinePleaSelectionAlternate","RetributionPaladinInputs.RetributionPaladinRotationDivinePleaPercentageConfig","RetributionPaladinInputs.RetributionPaladinRotationConsSlackConfig","RetributionPaladinInputs.RetributionPaladinRotationExoSlackConfig","RetributionPaladinInputs.RetributionPaladinRotationHolyWrathConfig","RetributionPaladinInputs.RetributionPaladinSoVTargets","RetributionPaladinInputs.RetributionPaladinRotationPriorityConfig","RetributionPaladinInputs.RetributionPaladinCastSequenceConfig","includeBuffDebuffInputs","IconInputs.ReplenishmentBuff","excludeBuffDebuffInputs","otherInputs","OtherInputs.TankAssignment","OtherInputs.InFrontOfTarget","encounterPicker","showExecuteProportion","presets","rotations","Presets.ROTATION_PRESET_LEGACY_DEFAULT","Presets.ROTATION_PRESET_DEFAULT","Presets.DivineSacTalents","Presets.PRERAID_PRESET","Presets.P2_PRESET","Presets.P3_PRESET","Presets.P4_PRESET","Presets.P5_PRESET","autoRotation"],"mappings":"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"}