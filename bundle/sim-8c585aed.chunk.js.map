{"version":3,"file":"sim-8c585aed.chunk.js","sources":["../../../ui/enhancement_shaman/inputs.ts","../../../ui/enhancement_shaman/presets.ts","../../../ui/core/components/fire_elemental_inputs.ts","../../../ui/enhancement_shaman/sim.ts"],"sourcesContent":["import { BooleanPicker } from '../core/components/boolean_picker.js';\nimport { EnumPicker } from '../core/components/enum_picker.js';\nimport { IconEnumPicker, IconEnumPickerConfig } from '../core/components/icon_enum_picker.js';\nimport { IconPickerConfig } from '../core/components/icon_picker.js';\nimport {\n\tAirTotem,\n\tEarthTotem,\n\tFireTotem,\n\tWaterTotem,\n\tEnhancementShaman_Options as ShamanOptions,\n\tShamanTotems,\n\tShamanShield,\n\tShamanImbue,\n\tShamanSyncType,\n\tEnhancementShaman_Rotation_PrimaryShock as PrimaryShock,\n\tEnhancementShaman_Rotation_RotationType as RotationType,\n\tEnhancementShaman_Rotation_CustomRotationSpell as CustomRotationSpell,\n\tEnhancementShaman_Rotation,\n\tEnhancementShaman_Rotation_BloodlustUse\n} from '../core/proto/shaman.js';\nimport { CustomSpell, Spec, ItemSwap, ItemSlot } from '../core/proto/common.js';\nimport { ActionId } from '../core/proto_utils/action_id.js';\nimport { Player } from '../core/player.js';\n\nimport * as InputHelpers from '../core/components/input_helpers.js';\nimport { EventID } from 'ui/core/typed_event.js';\n\n// Configuration for spec-specific UI elements on the settings tab.\n// These don't need to be in a separate file but it keeps things cleaner.\n\nexport const ShamanShieldInput = InputHelpers.makeSpecOptionsEnumIconInput<Spec.SpecEnhancementShaman, ShamanShield>({\n\tfieldName: 'shield',\n\tvalues: [\n\t\t{ value: ShamanShield.NoShield, tooltip: 'No Shield' },\n\t\t{ actionId: ActionId.fromSpellId(57960), value: ShamanShield.WaterShield },\n\t\t{ actionId: ActionId.fromSpellId(49281), value: ShamanShield.LightningShield },\n\t],\n});\n\nexport const ShamanImbueMH = InputHelpers.makeSpecOptionsEnumIconInput<Spec.SpecEnhancementShaman, ShamanImbue>({\n\tfieldName: 'imbueMh',\n\tvalues: [\n\t\t{ value: ShamanImbue.NoImbue, tooltip: 'No Main Hand Enchant' },\n\t\t{ actionId: ActionId.fromSpellId(58804), value: ShamanImbue.WindfuryWeapon },\n\t\t{ actionId: ActionId.fromSpellId(58790), value: ShamanImbue.FlametongueWeapon, text: 'R10' },\n\t\t{ actionId: ActionId.fromSpellId(58789), value: ShamanImbue.FlametongueWeaponDownrank, text: 'R9' },\n\t\t{ actionId: ActionId.fromSpellId(58796), value: ShamanImbue.FrostbrandWeapon },\n\t],\n});\n\nexport const ShamanImbueOH = InputHelpers.makeSpecOptionsEnumIconInput<Spec.SpecEnhancementShaman, ShamanImbue>({\n\tfieldName: 'imbueOh',\n\tvalues: [\n\t\t{ value: ShamanImbue.NoImbue, tooltip: 'No Off Hand Enchant' },\n\t\t{ actionId: ActionId.fromSpellId(58804), value: ShamanImbue.WindfuryWeapon },\n\t\t{ actionId: ActionId.fromSpellId(58790), value: ShamanImbue.FlametongueWeapon, text: 'R10' },\n\t\t{ actionId: ActionId.fromSpellId(58789), value: ShamanImbue.FlametongueWeaponDownrank, text: 'R9' },\n\t\t{ actionId: ActionId.fromSpellId(58796), value: ShamanImbue.FrostbrandWeapon },\n\t],\n});\n\nexport const SyncTypeInput = InputHelpers.makeSpecOptionsEnumInput<Spec.SpecEnhancementShaman, ShamanSyncType>({\n\tfieldName: 'syncType',\n\tlabel: 'Sync/Stagger Setting',\n\tlabelTooltip:\n\t\t`Choose your sync or stagger option Perfect\n\t\t<ul>\n\t\t\t<li><div>Auto: Will auto pick sync options based on your weapons attack speeds</div></li>\n\t\t\t<li><div>None: No Sync or Staggering, used for mismatched weapon speeds</div></li>\n\t\t\t<li><div>Perfect Sync: Makes your weapons always attack at the same time, for match weapon speeds</div></li>\n\t\t\t<li><div>Delayed Offhand: Adds a slight delay to the offhand attacks while staying within the 0.5s flurry ICD window</div></li>\n\t\t</ul>`,\n\tvalues: [\n\t\t{ name: \"Automatic\", value: ShamanSyncType.Auto },\n\t\t{ name: 'None', value: ShamanSyncType.NoSync },\n\t\t{ name: 'Perfect Sync', value: ShamanSyncType.SyncMainhandOffhandSwings },\n\t\t{ name: 'Delayed Offhand', value: ShamanSyncType.DelayOffhandSwings },\n\t],\n});\n\nexport const EnhancmentItemSwapInputs = InputHelpers.MakeItemSwapInput<Spec.SpecEnhancementShaman>({\n\tfieldName: 'itemSwap',\n\tvalues: [\n\t\tItemSlot.ItemSlotMainHand,\n\t\tItemSlot.ItemSlotOffHand,\n\t\t//ItemSlot.ItemSlotRanged, Not support yet\n\t],\n\tlabelTooltip: 'Start with the swapped items until Fire Elemntal has been summoned, swap back to normal gear set. Weapons come pre enchanted with FT9 and FT10. If a slot is empty it will not be used in the swap',\n\tshowWhen: (player: Player<Spec.SpecEnhancementShaman>) => (player.getSpecOptions().totems?.useFireElemental && player.getRotation().enableItemSwap) || false\n})\n\nexport const EnhancementShamanRotationConfig = {\n\tinputs:\n\t\t[\n\t\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecEnhancementShaman>({\n\t\t\t\tfieldName: 'enableItemSwap',\n\t\t\t\tlabel: 'Enable Item Swapping',\n\t\t\t\tlabelTooltip: 'Toggle on/off item swapping',\n\t\t\t\tshowWhen: (player: Player<Spec.SpecEnhancementShaman>) => player.getSpecOptions().totems?.useFireElemental || false\n\t\t\t}),\n\t\t\tEnhancmentItemSwapInputs,\n\t\t\tInputHelpers.makeRotationEnumInput<Spec.SpecEnhancementShaman, RotationType>({\n\t\t\t\tfieldName: 'rotationType',\n\t\t\t\tlabel: 'Type',\n\t\t\t\tlabelTooltip:\n\t\t\t\t\t`<ul>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<div>Standard: Priority Rotation</div>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<div>Custom: Highest spell that is ready will be cast.</div>\n\t\t\t\t\t</li>\n\t\t\t\t</ul>`,\n\t\t\t\tvalues: [\n\t\t\t\t\t{ name: 'Standard', value: RotationType.Priority },\n\t\t\t\t\t{ name: 'Custom', value: RotationType.Custom },\n\t\t\t\t],\n\t\t\t}),\n\t\t\tInputHelpers.makeCustomRotationInput<Spec.SpecEnhancementShaman, CustomRotationSpell>({\n\t\t\t\tfieldName: 'customRotation',\n\t\t\t\tnumColumns: 2,\n\t\t\t\tvalues: [\n\t\t\t\t\t{ actionId: ActionId.fromSpellId(49238), value: CustomRotationSpell.LightningBolt },\n\t\t\t\t\t{ actionId: ActionId.fromSpellId(49238), value: CustomRotationSpell.LightningBoltWeave, text: \"Weave\" },\n\t\t\t\t\t{ actionId: ActionId.fromSpellId(49238), value: CustomRotationSpell.LightningBoltDelayedWeave, text: \"Delay\" },\n\t\t\t\t\t{ actionId: ActionId.fromSpellId(49271), value: CustomRotationSpell.ChainLightning },\n\t\t\t\t\t{ actionId: ActionId.fromSpellId(17364), value: CustomRotationSpell.StormstrikeDebuffMissing, text: \"Debuff\" },\n\t\t\t\t\t{ actionId: ActionId.fromSpellId(17364), value: CustomRotationSpell.Stormstrike },\n\t\t\t\t\t{ actionId: ActionId.fromSpellId(49233), value: CustomRotationSpell.FlameShock },\n\t\t\t\t\t{ actionId: ActionId.fromSpellId(49231), value: CustomRotationSpell.EarthShock },\n\t\t\t\t\t{ actionId: ActionId.fromSpellId(58734), value: CustomRotationSpell.MagmaTotem },\n\t\t\t\t\t{ actionId: ActionId.fromSpellId(61657), value: CustomRotationSpell.FireNova },\n\t\t\t\t\t{ actionId: ActionId.fromSpellId(60103), value: CustomRotationSpell.LavaLash },\n\t\t\t\t\t{ actionId: ActionId.fromSpellId(49281), value: CustomRotationSpell.LightningShield },\n\t\t\t\t\t{ actionId: ActionId.fromSpellId(60043), value: CustomRotationSpell.LavaBurst, text: \"Weave\" },\n\t\t\t\t\t{ actionId: ActionId.fromSpellId(49236), value: CustomRotationSpell.FrostShock },\n\t\t\t\t],\n\t\t\t\tshowWhen: (player: Player<Spec.SpecEnhancementShaman>) => player.getRotation().rotationType == RotationType.Custom,\n\t\t\t}),\n\t\t\tInputHelpers.makeRotationEnumInput<Spec.SpecEnhancementShaman, PrimaryShock>({\n\t\t\t\tfieldName: 'primaryShock',\n\t\t\t\tlabel: 'Primary Shock',\n\t\t\t\tvalues: [\n\t\t\t\t\t{ name: 'None', value: PrimaryShock.None },\n\t\t\t\t\t{ name: 'Earth Shock', value: PrimaryShock.Earth },\n\t\t\t\t\t{ name: 'Frost Shock', value: PrimaryShock.Frost },\n\t\t\t\t],\n\t\t\t\tshowWhen: (player: Player<Spec.SpecEnhancementShaman>) => player.getRotation().rotationType != RotationType.Custom\n\t\t\t}),\n\t\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecEnhancementShaman>({\n\t\t\t\tfieldName: 'weaveFlameShock',\n\t\t\t\tlabel: 'Weave Flame Shock',\n\t\t\t\tlabelTooltip: 'Use Flame Shock whenever the target does not already have the DoT.',\n\t\t\t\tshowWhen: (player: Player<Spec.SpecEnhancementShaman>) => player.getRotation().rotationType != RotationType.Custom\n\t\t\t}),\n\t\t\tInputHelpers.makeRotationNumberInput<Spec.SpecEnhancementShaman>({\n\t\t\t\tfieldName: 'flameShockClipTicks',\n\t\t\t\tlabel: 'Refresh Flame Shock at ticks remaining',\n\t\t\t\tlabelTooltip: 'Set to 0 to require the debuff be missing. A tick is 3s, affected by spell haste',\n\t\t\t\tenableWhen: (player: Player<Spec.SpecEnhancementShaman>) => player.getRotation().weaveFlameShock,\n\t\t\t\tshowWhen: (player: Player<Spec.SpecEnhancementShaman>) => {\n\t\t\t\t\tif (player.getRotation().rotationType == RotationType.Custom) {\n\t\t\t\t\t\treturn player.getRotation().customRotation?.spells.find(customSpell => customSpell.spell == CustomRotationSpell.FlameShock) != undefined\n\t\t\t\t\t}\n\n\t\t\t\t\treturn player.getRotation().weaveFlameShock\n\t\t\t\t}\n\t\t\t}),\n\t\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecEnhancementShaman>({\n\t\t\t\tfieldName: 'lightningboltWeave',\n\t\t\t\tlabel: 'Enable Weaving Lightning Bolt',\n\t\t\t\tlabelTooltip: 'Will provide a DPS increase, but is harder to execute',\n\t\t\t\tenableWhen: (player: Player<Spec.SpecEnhancementShaman>) => player.getTalents().maelstromWeapon > 0,\n\t\t\t\tshowWhen: (player: Player<Spec.SpecEnhancementShaman>) => player.getRotation().rotationType != RotationType.Custom\n\t\t\t}),\n\t\t\tInputHelpers.makeRotationEnumInput<Spec.SpecEnhancementShaman, number>({\n\t\t\t\tfieldName: 'maelstromweaponMinStack',\n\t\t\t\tlabel: 'Minimum Maelstrom Stacks to Weave',\n\t\t\t\tlabelTooltip: '3 stacks is the most realistic, however there are cases where lower might be possible, just much harder to do in practice',\n\t\t\t\tvalues: [\n\t\t\t\t\t{ name: '1', value: 1 },\n\t\t\t\t\t{ name: '2', value: 2 },\n\t\t\t\t\t{ name: '3', value: 3 },\n\t\t\t\t\t{ name: '4', value: 4 },\n\t\t\t\t],\n\t\t\t\tenableWhen: (player: Player<Spec.SpecEnhancementShaman>) => {\n\t\t\t\t\tif (player.getRotation().rotationType == RotationType.Custom) {\n\t\t\t\t\t\treturn player.getRotation().customRotation?.spells.find(customSpell => customSpell.spell == CustomRotationSpell.LightningBoltWeave) != undefined\n\t\t\t\t\t}\n\n\t\t\t\t\treturn player.getRotation().lightningboltWeave\n\t\t\t\t},\n\t\t\t\tshowWhen: (player: Player<Spec.SpecEnhancementShaman>) => {\n\t\t\t\t\tif (player.getRotation().rotationType == RotationType.Custom) {\n\t\t\t\t\t\treturn player.getRotation().customRotation?.spells.find(customSpell => customSpell.spell == CustomRotationSpell.LightningBoltWeave) != undefined\n\t\t\t\t\t}\n\n\t\t\t\t\treturn true\n\t\t\t\t}\n\t\t\t}),\n\t\t\tInputHelpers.makeRotationNumberInput<Spec.SpecEnhancementShaman>({\n\t\t\t\tfieldName: 'autoWeaveDelay',\n\t\t\t\tlabel: 'Weaving Delay After Auto Attack',\n\t\t\t\tlabelTooltip: 'The amount of time to wait after an auto attack before weaveing, in milliseconds',\n\t\t\t\tenableWhen: (player: Player<Spec.SpecEnhancementShaman>) => {\n\t\t\t\t\tif (player.getRotation().rotationType == RotationType.Custom) {\n\t\t\t\t\t\treturn player.getRotation().customRotation?.spells.find(customSpell => customSpell.spell == CustomRotationSpell.LightningBoltWeave) != undefined\n\t\t\t\t\t}\n\n\t\t\t\t\treturn player.getRotation().lightningboltWeave\n\t\t\t\t},\n\t\t\t\tshowWhen: (player: Player<Spec.SpecEnhancementShaman>) => {\n\t\t\t\t\tif (player.getRotation().rotationType == RotationType.Custom) {\n\t\t\t\t\t\treturn player.getRotation().customRotation?.spells.find(customSpell => customSpell.spell == CustomRotationSpell.LightningBoltWeave) != undefined\n\t\t\t\t\t}\n\n\t\t\t\t\treturn true\n\t\t\t\t},\n\t\t\t}), InputHelpers.makeRotationNumberInput<Spec.SpecEnhancementShaman>({\n\t\t\t\tfieldName: 'delayGcdWeave',\n\t\t\t\tlabel: 'Delay LL to Weave',\n\t\t\t\tlabelTooltip: 'The amount of time to hold Lava Lash to weave in milliseconds. Setting to 0 will disable delaying',\n\t\t\t\tenableWhen: (player: Player<Spec.SpecEnhancementShaman>) => {\n\t\t\t\t\tif (player.getRotation().rotationType == RotationType.Custom) {\n\t\t\t\t\t\treturn false\n\t\t\t\t\t}\n\n\t\t\t\t\treturn player.getRotation().lightningboltWeave\n\t\t\t\t},\n\t\t\t\tshowWhen: (player: Player<Spec.SpecEnhancementShaman>) => {\n\t\t\t\t\tif (player.getRotation().rotationType == RotationType.Custom) {\n\t\t\t\t\t\treturn false\n\t\t\t\t\t}\n\n\t\t\t\t\treturn true\n\t\t\t\t},\n\t\t\t}),\n\t\t\tInputHelpers.makeRotationNumberInput<Spec.SpecEnhancementShaman>({\n\t\t\t\tfieldName: 'delayGcdWeave',\n\t\t\t\tlabel: 'Delay Weave Time',\n\t\t\t\tlabelTooltip: 'The amount of time to hold a GCD to weave in milliseconds. Setting to 0 will disable delaying',\n\t\t\t\tenableWhen: (player: Player<Spec.SpecEnhancementShaman>) => {\n\t\t\t\t\tif (player.getRotation().rotationType == RotationType.Custom) {\n\t\t\t\t\t\treturn player.getRotation().customRotation?.spells.find(customSpell => customSpell.spell == CustomRotationSpell.LightningBoltDelayedWeave) != undefined\n\t\t\t\t\t}\n\n\t\t\t\t\treturn false\n\t\t\t\t},\n\t\t\t\tshowWhen: (player: Player<Spec.SpecEnhancementShaman>) => {\n\t\t\t\t\tif (player.getRotation().rotationType == RotationType.Custom) {\n\t\t\t\t\t\treturn player.getRotation().customRotation?.spells.find(customSpell => customSpell.spell == CustomRotationSpell.LightningBoltDelayedWeave) != undefined\n\t\t\t\t\t}\n\n\t\t\t\t\treturn false\n\t\t\t\t},\n\t\t\t}),\n\t\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecEnhancementShaman>({\n\t\t\t\tfieldName: 'lavaburstWeave',\n\t\t\t\tlabel: 'Enable Weaving Lava Burst',\n\t\t\t\tlabelTooltip: 'Not particularily useful for dual wield, mostly a 2h option',\n\t\t\t\tenableWhen: (player: Player<Spec.SpecEnhancementShaman>) => player.getRotation().lightningboltWeave,\n\t\t\t\tshowWhen: (player: Player<Spec.SpecEnhancementShaman>) => player.getRotation().rotationType != RotationType.Custom\n\t\t\t}),\n\t\t\tInputHelpers.makeRotationNumberInput<Spec.SpecEnhancementShaman>({\n\t\t\t\tfieldName: 'firenovaManaThreshold',\n\t\t\t\tlabel: 'Minimum mana to cast Fire Nova',\n\t\t\t\tlabelTooltip: 'Fire Nova will not be cast when mana is below this value. Set this medium-low, it has a bad mana-to-damage ratio',\n\t\t\t\tshowWhen: (player: Player<Spec.SpecEnhancementShaman>) => {\n\t\t\t\t\tif (player.getRotation().rotationType == RotationType.Custom) {\n\t\t\t\t\t\treturn player.getRotation().customRotation?.spells.find(customSpell => customSpell.spell == CustomRotationSpell.FireNova) != undefined\n\t\t\t\t\t}\n\n\t\t\t\t\treturn true\n\t\t\t\t},\n\t\t\t}),\n\t\t\tInputHelpers.makeRotationNumberInput<Spec.SpecEnhancementShaman>({\n\t\t\t\tfieldName: 'shamanisticRageManaThreshold',\n\t\t\t\tlabel: 'Mana % to use Shamanistic Rage',\n\t\t\t\tenableWhen: (player: Player<Spec.SpecEnhancementShaman>) => player.getTalents().shamanisticRage,\n\t\t\t}),\n\t\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecEnhancementShaman>({\n\t\t\t\tfieldName: 'bloodlust',\n\t\t\t\tlabel: 'Use Bloodlust',\n\t\t\t\tlabelTooltip: 'Player will cast bloodlust',\n\t\t\t\tgetValue: (player: Player<Spec.SpecEnhancementShaman>) => player.getRotation().bloodlust == EnhancementShaman_Rotation_BloodlustUse.UseBloodlust,\n\t\t\t\tsetValue: (eventID: EventID, player: Player<Spec.SpecEnhancementShaman>, newValue: boolean) => {\n\t\t\t\t\tconst newRotation = player.getRotation();\n\t\t\t\t\tif (newValue) {\n\t\t\t\t\t\tnewRotation.bloodlust = EnhancementShaman_Rotation_BloodlustUse.UseBloodlust;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnewRotation.bloodlust = EnhancementShaman_Rotation_BloodlustUse.NoBloodlust;\n\t\t\t\t\t}\n\t\t\t\t\tplayer.setRotation(eventID, newRotation);\n\t\t\t\t},\n\t\t\t}),\n\t\t],\n};\n\n\n","import {\n\tConsumes,\n\tFlask,\n\tFood,\n\tGlyphs,\n\tPotions,\n\tRaidBuffs,\n\tTristateEffect,\n\tDebuffs,\n\tCustomRotation,\n\tCustomSpell,\n\tFaction,\n} from '../core/proto/common.js';\nimport { SavedTalents } from '../core/proto/ui.js';\n\nimport { EnhancementShaman_Rotation as EnhancementShamanRotation, EnhancementShaman_Options as EnhancementShamanOptions, ShamanShield } from '../core/proto/shaman.js';\nimport {\n\tAirTotem,\n\tEarthTotem,\n\tFireTotem,\n\tWaterTotem,\n\tShamanTotems,\n\tShamanImbue,\n\tShamanSyncType,\n\tShamanMajorGlyph,\n\tEnhancementShaman_Rotation_PrimaryShock as PrimaryShock,\n\tEnhancementShaman_Rotation_RotationType as RotationType,\n\tEnhancementShaman_Rotation_CustomRotationSpell as CustomRotationSpell\n} from '../core/proto/shaman.js';\n\nimport * as PresetUtils from '../core/preset_utils.js';\n\nimport PreraidGear from './gear_sets/preraid.gear.json';\nimport P1Gear from './gear_sets/p1.gear.json';\nimport P2FtGear from './gear_sets/p2_ft.gear.json';\nimport P2WfGear from './gear_sets/p2_wf.gear.json';\nimport P3AllianceGear from './gear_sets/p3_alliance.gear.json';\nimport P3HordeGear from './gear_sets/p3_horde.gear.json';\n\nimport DefaultFt from './apls/default_ft.apl.json';\nimport DefaultWf from './apls/default_wf.apl.json';\nimport Phase3Apl from './apls/phase_3.apl.json';\n\n// Preset options for this spec.\n// Eventually we will import these values for the raid sim too, so its good to\n// keep them in a separate file.\n\nexport const PRERAID_PRESET = PresetUtils.makePresetGear('Preraid Preset', PreraidGear);\nexport const P1_PRESET = PresetUtils.makePresetGear('P1 Preset', P1Gear);\nexport const P2_PRESET_FT = PresetUtils.makePresetGear('P2 Preset FT', P2FtGear);\nexport const P2_PRESET_WF = PresetUtils.makePresetGear('P2 Preset WF', P2WfGear);\nexport const P3_PRESET_ALLIANCE = PresetUtils.makePresetGear('P3 Preset [A]', P3AllianceGear, { faction: Faction.Alliance });\nexport const P3_PRESET_HORDE = PresetUtils.makePresetGear('P3 Preset [H]', P3HordeGear, { faction: Faction.Horde });\n\nexport const DefaultRotation = EnhancementShamanRotation.create({\n\ttotems: ShamanTotems.create({\n\t\tearth: EarthTotem.StrengthOfEarthTotem,\n\t\tair: AirTotem.WindfuryTotem,\n\t\tfire: FireTotem.MagmaTotem,\n\t\twater: WaterTotem.ManaSpringTotem,\n\t\tuseFireElemental: true,\n\t}),\n\tmaelstromweaponMinStack: 3,\n\tlightningboltWeave: true,\n\tautoWeaveDelay: 500,\n\tdelayGcdWeave: 750,\n\tlavaburstWeave: false,\n\tfirenovaManaThreshold: 3000,\n\tshamanisticRageManaThreshold: 25,\n\tprimaryShock: PrimaryShock.Earth,\n\tweaveFlameShock: true,\n\trotationType: RotationType.Priority,\n\tcustomRotation: CustomRotation.create({\n\t\tspells: [\n\t\t\tCustomSpell.create({ spell: CustomRotationSpell.LightningBolt }),\n\t\t\tCustomSpell.create({ spell: CustomRotationSpell.StormstrikeDebuffMissing }),\n\t\t\tCustomSpell.create({ spell: CustomRotationSpell.LightningBoltWeave }),\n\t\t\tCustomSpell.create({ spell: CustomRotationSpell.Stormstrike }),\n\t\t\tCustomSpell.create({ spell: CustomRotationSpell.FlameShock }),\n\t\t\tCustomSpell.create({ spell: CustomRotationSpell.EarthShock }),\n\t\t\tCustomSpell.create({ spell: CustomRotationSpell.MagmaTotem }),\n\t\t\tCustomSpell.create({ spell: CustomRotationSpell.LightningShield }),\n\t\t\tCustomSpell.create({ spell: CustomRotationSpell.FireNova }),\n\t\t\tCustomSpell.create({ spell: CustomRotationSpell.LightningBoltDelayedWeave }),\n\t\t\tCustomSpell.create({ spell: CustomRotationSpell.LavaLash }),\n\t\t],\n\t}),\n});\n\nexport const ROTATION_FT_DEFAULT = PresetUtils.makePresetAPLRotation('Default FT', DefaultFt);\nexport const ROTATION_WF_DEFAULT = PresetUtils.makePresetAPLRotation('Default WF', DefaultWf);\nexport const ROTATION_PHASE_3 = PresetUtils.makePresetAPLRotation('Phase 3', Phase3Apl);\n\n// Default talents. Uses the wowhead calculator format, make the talents on\n// https://wowhead.com/wotlk/talent-calc and copy the numbers in the url.\nexport const StandardTalents = {\n\tname: 'Standard',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '053030152-30405003105021333031131031051',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: ShamanMajorGlyph.GlyphOfFireNova,\n\t\t\tmajor2: ShamanMajorGlyph.GlyphOfFlametongueWeapon,\n\t\t\tmajor3: ShamanMajorGlyph.GlyphOfFeralSpirit,\n\t\t\t//minor glyphs dont affect damage done, all convenience/QoL\n\t\t})\n\t}),\n};\n\nexport const Phase3Talents = {\n\tname: 'Phase 3',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '053030152-30505003105001333031131131051',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: ShamanMajorGlyph.GlyphOfFireNova,\n\t\t\tmajor2: ShamanMajorGlyph.GlyphOfFlametongueWeapon,\n\t\t\tmajor3: ShamanMajorGlyph.GlyphOfFeralSpirit,\n\t\t\t//minor glyphs dont affect damage done, all convenience/QoL\n\t\t})\n\t}),\n};\n\nexport const DefaultOptions = EnhancementShamanOptions.create({\n\tshield: ShamanShield.LightningShield,\n\tbloodlust: true,\n\timbueMh: ShamanImbue.WindfuryWeapon,\n\timbueOh: ShamanImbue.FlametongueWeapon,\n\tsyncType: ShamanSyncType.Auto,\n});\n\nexport const DefaultConsumes = Consumes.create({\n\tdefaultPotion: Potions.PotionOfSpeed,\n\tflask: Flask.FlaskOfEndlessRage,\n\tfood: Food.FoodFishFeast,\n});\n\nexport const DefaultRaidBuffs = RaidBuffs.create({\n\tgiftOfTheWild: TristateEffect.TristateEffectImproved,\n\tarcaneBrilliance: true,\n\tleaderOfThePack: TristateEffect.TristateEffectImproved,\n\ttotemOfWrath: true,\n\twrathOfAirTotem: true,\n\tmoonkinAura: TristateEffect.TristateEffectImproved,\n\tsanctifiedRetribution: true,\n\tdivineSpirit: true,\n\tbattleShout: TristateEffect.TristateEffectImproved,\n\tdemonicPact: 500,\n});\n\nexport const DefaultDebuffs = Debuffs.create({\n\tbloodFrenzy: true,\n\tsunderArmor: true,\n\tcurseOfWeakness: TristateEffect.TristateEffectRegular,\n\tcurseOfElements: true,\n\tfaerieFire: TristateEffect.TristateEffectImproved,\n\tjudgementOfWisdom: true,\n\tmisery: true,\n\ttotemOfWrath: true,\n\tshadowMastery: true,\n});\n","import { IndividualSimUI } from \"../individual_sim_ui\";\nimport { Player } from \"../player\";\nimport { ShamanTotems } from \"../proto/shaman\";\nimport { ShamanSpecs } from \"../proto_utils/utils\";\nimport { EventID } from \"../typed_event\";\nimport { ContentBlock } from \"./content_block\";\nimport { IconPicker } from \"./icon_picker\";\nimport * as InputHelpers from '../components/input_helpers.js';\nimport { ActionId } from '../proto_utils/action_id.js';\nimport { Input } from \"./input\";\nimport { NumberPicker } from \"./number_picker\";\nimport { BooleanPicker } from \"./boolean_picker\";\n\nexport function FireElementalSection(parentElem: HTMLElement, simUI: IndividualSimUI<ShamanSpecs>): ContentBlock {\n\tlet contentBlock = new ContentBlock(parentElem, 'fire-elemental-settings', {\n\t\theader: { title: 'Fire Elemental' }\n\t});\n\n\tlet fireElementalIconContainer = Input.newGroupContainer();\n\tfireElementalIconContainer.classList.add('fire-elemental-icon-container');\n\n\tcontentBlock.bodyElement.appendChild(fireElementalIconContainer);\n\n\tconst fireElementalBooleanIconInput = InputHelpers.makeBooleanIconInput<ShamanSpecs, ShamanTotems, Player<ShamanSpecs>>({\n\t\tgetModObject: (player: Player<ShamanSpecs>) => player,\n\t\tgetValue: (player: Player<ShamanSpecs>) => player.getSpecOptions().totems || ShamanTotems.create(),\n\t\tsetValue: (eventID: EventID, player: Player<ShamanSpecs>, newVal: ShamanTotems) => {\n\t\t\tconst newOptions = player.getSpecOptions();\n\t\t\tnewOptions.totems = newVal;\n\t\t\tplayer.setSpecOptions(eventID, newOptions);\n\n\t\t\t// Hacky fix ItemSwapping is in the Rotation proto, this will let the Rotation know to update showWhen\n\t\t\t// TODO move the ItemSwap enabled to a spec option and have the ItemSwap proto be apart of player.\n\t\t\tplayer.rotationChangeEmitter.emit(eventID)\n\t\t},\n\t\tchangeEmitter: (player: Player<ShamanSpecs>) => player.specOptionsChangeEmitter,\n\t}, ActionId.fromSpellId(2894), \"useFireElemental\");\n\n\tnew IconPicker(fireElementalIconContainer, simUI.player, fireElementalBooleanIconInput);\n\n\tnew NumberPicker(contentBlock.bodyElement, simUI.player, {\n\t\tpositive: true,\n\t\tlabel: \"Bonus spell power\",\n\t\tlabelTooltip: \"Bonus spell power to snapshot Fire Elemental with. Will prioritize dropping Fire Elemental if greater then 0\",\n\t\tinline: true,\n\t\tgetValue: (player: Player<ShamanSpecs>) => player.getSpecOptions().totems?.bonusSpellpower || 0,\n\t\tsetValue: (eventID: EventID, player: Player<ShamanSpecs>, newVal: number) => {\n\t\t\tconst newOptions = player.getSpecOptions();\n\n\t\t\tif (newOptions.totems) {\n\t\t\t\tnewOptions.totems.bonusSpellpower = newVal\n\t\t\t}\n\n\t\t\tplayer.setSpecOptions(eventID, newOptions);\n\t\t},\n\t\tchangedEvent: (player: Player<ShamanSpecs>) => player.specOptionsChangeEmitter,\n\t})\n\n\tnew BooleanPicker(contentBlock.bodyElement, simUI.player, {\n\t\tlabel: \"Use Tier 10 (4pc)\",\n\t\tlabelTooltip: \"Will use Tier 10 (4pc) to snapshot Fire Elemental.\",\n\t\tinline: true,\n\t\tgetValue: (player: Player<ShamanSpecs>) => player.getSpecOptions().totems?.enhTierTenBonus || false,\n\t\tsetValue: (eventID: EventID, player: Player<ShamanSpecs>, newVal: boolean) => {\n\t\t\tconst newOptions = player.getSpecOptions();\n\n\t\t\tif (newOptions.totems) {\n\t\t\t\tnewOptions.totems.enhTierTenBonus = newVal\n\t\t\t}\n\n\t\t\tplayer.setSpecOptions(eventID, newOptions);\n\t\t},\n\t\tchangedEvent: (player: Player<ShamanSpecs>) => player.currentStatsEmitter,\n\t\tshowWhen: (player: Player<ShamanSpecs>) => {\n\t\t\tconst hasBonus = player.getCurrentStats().sets.includes('Frost Witch\\'s Battlegear (4pc)');\n\t\t\treturn hasBonus\n\t\t}\n\t})\n\n\n\treturn contentBlock;\n}","import { PartyBuffs } from '../core/proto/common.js';\nimport { IndividualBuffs } from '../core/proto/common.js';\nimport { Spec } from '../core/proto/common.js';\nimport { Stat, PseudoStat } from '../core/proto/common.js';\nimport { TristateEffect } from '../core/proto/common.js'\nimport {\n\tAPLAction,\n\tAPLListItem,\n\tAPLRotation,\n} from '../core/proto/apl.js';\nimport { ShamanImbue } from '../core/proto/shaman.js';\nimport { Player } from '../core/player.js';\nimport { Stats } from '../core/proto_utils/stats.js';\nimport { IndividualSimUI } from '../core/individual_sim_ui.js';\nimport { TotemsSection } from '../core/components/totem_inputs.js';\nimport * as IconInputs from '../core/components/icon_inputs.js';\nimport * as OtherInputs from '../core/components/other_inputs.js';\n\nimport * as ShamanInputs from './inputs.js';\nimport * as Presets from './presets.js';\nimport { FireElementalSection } from '../core/components/fire_elemental_inputs.js';\n\nexport class EnhancementShamanSimUI extends IndividualSimUI<Spec.SpecEnhancementShaman> {\n\tconstructor(parentElem: HTMLElement, player: Player<Spec.SpecEnhancementShaman>) {\n\t\tsuper(parentElem, player, {\n\t\t\tcssClass: 'enhancement-shaman-sim-ui',\n\t\t\tcssScheme: 'shaman',\n\t\t\t// List any known bugs / issues here and they'll be shown on the site.\n\t\t\tknownIssues: [\n\t\t\t],\n\n\t\t\t// All stats for which EP should be calculated.\n\t\t\tepStats: [\n\t\t\t\tStat.StatIntellect,\n\t\t\t\tStat.StatAgility,\n\t\t\t\tStat.StatStrength,\n\t\t\t\tStat.StatAttackPower,\n\t\t\t\tStat.StatMeleeHit,\n\t\t\t\tStat.StatMeleeCrit,\n\t\t\t\tStat.StatMeleeHaste,\n\t\t\t\tStat.StatArmorPenetration,\n\t\t\t\tStat.StatExpertise,\n\t\t\t\tStat.StatSpellPower,\n\t\t\t\tStat.StatSpellCrit,\n\t\t\t\tStat.StatSpellHit,\n\t\t\t\tStat.StatSpellHaste,\n\t\t\t],\n\t\t\tepPseudoStats: [\n\t\t\t\tPseudoStat.PseudoStatMainHandDps,\n\t\t\t\tPseudoStat.PseudoStatOffHandDps,\n\t\t\t],\n\t\t\t// Reference stat against which to calculate EP. I think all classes use either spell power or attack power.\n\t\t\tepReferenceStat: Stat.StatAttackPower,\n\t\t\t// Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\n\t\t\tdisplayStats: [\n\t\t\t\tStat.StatHealth,\n\t\t\t\tStat.StatStamina,\n\t\t\t\tStat.StatStrength,\n\t\t\t\tStat.StatAgility,\n\t\t\t\tStat.StatIntellect,\n\t\t\t\tStat.StatAttackPower,\n\t\t\t\tStat.StatMeleeHit,\n\t\t\t\tStat.StatMeleeCrit,\n\t\t\t\tStat.StatMeleeHaste,\n\t\t\t\tStat.StatExpertise,\n\t\t\t\tStat.StatArmorPenetration,\n\t\t\t\tStat.StatSpellPower,\n\t\t\t\tStat.StatSpellHit,\n\t\t\t\tStat.StatSpellCrit,\n\t\t\t\tStat.StatSpellHaste,\n\t\t\t],\n\n\t\t\tdefaults: {\n\t\t\t\t// Default equipped gear.\n\t\t\t\tgear: Presets.P1_PRESET.gear,\n\t\t\t\t// Default EP weights for sorting gear in the gear picker.\n\t\t\t\tepWeights: Stats.fromMap({\n\t\t\t\t\t[Stat.StatIntellect]: 1.48,\n\t\t\t\t\t[Stat.StatAgility]: 1.59,\n\t\t\t\t\t[Stat.StatStrength]: 1.1,\n\t\t\t\t\t[Stat.StatSpellPower]: 1.13,\n\t\t\t\t\t[Stat.StatSpellHit]: 0, //default EP assumes cap\n\t\t\t\t\t[Stat.StatSpellCrit]: 0.91,\n\t\t\t\t\t[Stat.StatSpellHaste]: 0.37,\n\t\t\t\t\t[Stat.StatAttackPower]: 1.0,\n\t\t\t\t\t[Stat.StatMeleeHit]: 1.38,\n\t\t\t\t\t[Stat.StatMeleeCrit]: 0.81,\n\t\t\t\t\t[Stat.StatMeleeHaste]: 1.61, //haste is complicated\n\t\t\t\t\t[Stat.StatArmorPenetration]: 0.48,\n\t\t\t\t\t[Stat.StatExpertise]: 0, //default EP assumes cap\n\t\t\t\t}, {\n\t\t\t\t\t[PseudoStat.PseudoStatMainHandDps]: 5.21,\n\t\t\t\t\t[PseudoStat.PseudoStatOffHandDps]: 2.21,\n\t\t\t\t}),\n\t\t\t\t// Default consumes settings.\n\t\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\t\t// Default rotation settings.\n\t\t\t\trotation: Presets.DefaultRotation,\n\t\t\t\t// Default talents.\n\t\t\t\ttalents: Presets.StandardTalents.data,\n\t\t\t\t// Default spec-specific settings.\n\t\t\t\tspecOptions: Presets.DefaultOptions,\n\t\t\t\t// Default raid/party buffs settings.\n\t\t\t\traidBuffs: Presets.DefaultRaidBuffs,\n\t\t\t\tpartyBuffs: PartyBuffs.create({\n\t\t\t\t}),\n\t\t\t\tindividualBuffs: IndividualBuffs.create({\n\t\t\t\t\tblessingOfKings: true,\n\t\t\t\t\tblessingOfWisdom: TristateEffect.TristateEffectImproved,\n\t\t\t\t\tblessingOfMight: TristateEffect.TristateEffectImproved,\n\t\t\t\t\tjudgementsOfTheWise: true,\n\t\t\t\t}),\n\t\t\t\tdebuffs: Presets.DefaultDebuffs,\n\t\t\t},\n\n\t\t\t// IconInputs to include in the 'Player' section on the settings tab.\n\t\t\tplayerIconInputs: [\n\t\t\t\tShamanInputs.ShamanShieldInput,\n\t\t\t\tShamanInputs.ShamanImbueMH,\n\t\t\t\tShamanInputs.ShamanImbueOH,\n\t\t\t],\n\t\t\t// Inputs to include in the 'Rotation' section on the settings tab.\n\t\t\trotationInputs: ShamanInputs.EnhancementShamanRotationConfig,\n\t\t\t// Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\n\t\t\tincludeBuffDebuffInputs: [\n\t\t\t\tIconInputs.ReplenishmentBuff,\n\t\t\t\tIconInputs.MP5Buff,\n\t\t\t\tIconInputs.SpellHasteBuff,\n\t\t\t\tIconInputs.SpiritBuff,\n\t\t\t],\n\t\t\texcludeBuffDebuffInputs: [\n\t\t\t\tIconInputs.BleedDebuff,\n\t\t\t],\n\t\t\t// Inputs to include in the 'Other' section on the settings tab.\n\t\t\totherInputs: {\n\t\t\t\tinputs: [\n\t\t\t\t\tShamanInputs.SyncTypeInput,\n\t\t\t\t\tOtherInputs.TankAssignment,\n\t\t\t\t\tOtherInputs.InFrontOfTarget,\n\t\t\t\t],\n\t\t\t},\n\t\t\tcustomSections: [\n\t\t\t\tTotemsSection,\n\t\t\t\tFireElementalSection\n\t\t\t],\n\t\t\tencounterPicker: {\n\t\t\t\t// Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\n\t\t\t\tshowExecuteProportion: false,\n\t\t\t},\n\n\t\t\tpresets: {\n\t\t\t\t// Preset talents that the user can quickly select.\n\t\t\t\ttalents: [\n\t\t\t\t\tPresets.StandardTalents,\n\t\t\t\t\tPresets.Phase3Talents,\n\t\t\t\t],\n\t\t\t\t// Preset rotations that the user can quickly select.\n\t\t\t\trotations: [\n\t\t\t\t\tPresets.ROTATION_FT_DEFAULT,\n\t\t\t\t\tPresets.ROTATION_WF_DEFAULT,\n\t\t\t\t\tPresets.ROTATION_PHASE_3,\n\t\t\t\t],\n\t\t\t\t// Preset gear configurations that the user can quickly select.\n\t\t\t\tgear: [\n\t\t\t\t\tPresets.PRERAID_PRESET,\n\t\t\t\t\tPresets.P1_PRESET,\n\t\t\t\t\tPresets.P2_PRESET_FT,\n\t\t\t\t\tPresets.P2_PRESET_WF,\n\t\t\t\t\tPresets.P3_PRESET_ALLIANCE,\n\t\t\t\t\tPresets.P3_PRESET_HORDE,\n\t\t\t\t],\n\t\t\t},\n\n\t\t\tautoRotation: (player: Player<Spec.SpecEnhancementShaman>): APLRotation => {\n\t\t\t\tconst hasT94P = player.getCurrentStats().sets.includes('Triumphant Nobundo\\'s Battlegear (4pc)')\n\t\t\t\t\t|| player.getCurrentStats().sets.includes('Nobundo\\'s Battlegear (4pc)')\n\t\t\t\t\t|| player.getCurrentStats().sets.includes('Triumphant Thrall\\'s Battlegear (4pc)')\n\t\t\t\t\t|| player.getCurrentStats().sets.includes('Thrall\\'s Battlegear (4pc)');\n\t\t\t\tconst options = player.getSpecOptions();\n\n\t\t\t\tif (hasT94P) {\n\t\t\t\t\tconsole.log(\"has set\");\n\t\t\t\t\treturn Presets.ROTATION_PHASE_3.rotation.rotation!;\n\t\t\t\t} else if (options.imbueMh == ShamanImbue.FlametongueWeapon) {\n\t\t\t\t\treturn Presets.ROTATION_FT_DEFAULT.rotation.rotation!;\n\t\t\t\t} else {\n\t\t\t\t\treturn Presets.ROTATION_WF_DEFAULT.rotation.rotation!;\n\t\t\t\t}\n\t\t\t},\n\t\t});\n\t}\n}\n"],"names":["ShamanShieldInput","InputHelpers.makeSpecOptionsEnumIconInput","fieldName","values","value","ShamanShield","NoShield","tooltip","actionId","ActionId","fromSpellId","WaterShield","LightningShield","ShamanImbueMH","ShamanImbue","NoImbue","WindfuryWeapon","FlametongueWeapon","text","FlametongueWeaponDownrank","FrostbrandWeapon","ShamanImbueOH","SyncTypeInput","InputHelpers.makeSpecOptionsEnumInput","label","labelTooltip","name","ShamanSyncType","Auto","NoSync","SyncMainhandOffhandSwings","DelayOffhandSwings","EnhancmentItemSwapInputs","InputHelpers.MakeItemSwapInput","ItemSlot","ItemSlotMainHand","ItemSlotOffHand","showWhen","player","getSpecOptions","totems","useFireElemental","getRotation","enableItemSwap","EnhancementShamanRotationConfig","inputs","InputHelpers.makeRotationBooleanInput","InputHelpers.makeRotationEnumInput","RotationType","Priority","Custom","InputHelpers.makeCustomRotationInput","numColumns","CustomRotationSpell","LightningBolt","LightningBoltWeave","LightningBoltDelayedWeave","ChainLightning","StormstrikeDebuffMissing","Stormstrike","FlameShock","EarthShock","MagmaTotem","FireNova","LavaLash","LavaBurst","FrostShock","rotationType","PrimaryShock","None","Earth","Frost","InputHelpers.makeRotationNumberInput","enableWhen","weaveFlameShock","customRotation","spells","find","customSpell","spell","getTalents","maelstromWeapon","lightningboltWeave","shamanisticRage","getValue","bloodlust","EnhancementShaman_Rotation_BloodlustUse","UseBloodlust","setValue","eventID","newValue","newRotation","NoBloodlust","setRotation","PRERAID_PRESET","PresetUtils.makePresetGear","P1_PRESET","P1Gear","P2_PRESET_FT","P2FtGear","P2_PRESET_WF","P2WfGear","P3_PRESET_ALLIANCE","P3AllianceGear","faction","Faction","Alliance","P3_PRESET_HORDE","P3HordeGear","Horde","DefaultRotation","EnhancementShamanRotation","create","ShamanTotems","earth","EarthTotem","StrengthOfEarthTotem","air","AirTotem","WindfuryTotem","fire","FireTotem","water","WaterTotem","ManaSpringTotem","maelstromweaponMinStack","autoWeaveDelay","delayGcdWeave","lavaburstWeave","firenovaManaThreshold","shamanisticRageManaThreshold","primaryShock","CustomRotation","CustomSpell","ROTATION_FT_DEFAULT","PresetUtils.makePresetAPLRotation","DefaultFt","ROTATION_WF_DEFAULT","DefaultWf","ROTATION_PHASE_3","Phase3Apl","StandardTalents","data","SavedTalents","talentsString","glyphs","Glyphs","major1","ShamanMajorGlyph","GlyphOfFireNova","major2","GlyphOfFlametongueWeapon","major3","GlyphOfFeralSpirit","Phase3Talents","DefaultOptions","EnhancementShamanOptions","shield","imbueMh","imbueOh","syncType","DefaultConsumes","Consumes","defaultPotion","Potions","PotionOfSpeed","flask","Flask","FlaskOfEndlessRage","food","Food","FoodFishFeast","DefaultRaidBuffs","RaidBuffs","giftOfTheWild","TristateEffect","TristateEffectImproved","arcaneBrilliance","leaderOfThePack","totemOfWrath","wrathOfAirTotem","moonkinAura","sanctifiedRetribution","divineSpirit","battleShout","demonicPact","DefaultDebuffs","Debuffs","bloodFrenzy","sunderArmor","curseOfWeakness","TristateEffectRegular","curseOfElements","faerieFire","judgementOfWisdom","misery","shadowMastery","FireElementalSection","parentElem","simUI","contentBlock","ContentBlock","header","title","fireElementalIconContainer","Input","newGroupContainer","classList","add","bodyElement","appendChild","fireElementalBooleanIconInput","InputHelpers.makeBooleanIconInput","getModObject","newVal","newOptions","setSpecOptions","rotationChangeEmitter","emit","changeEmitter","specOptionsChangeEmitter","IconPicker","NumberPicker","positive","inline","bonusSpellpower","changedEvent","BooleanPicker","enhTierTenBonus","currentStatsEmitter","getCurrentStats","sets","includes","EnhancementShamanSimUI","IndividualSimUI","constructor","super","cssClass","cssScheme","knownIssues","epStats","Stat","StatIntellect","StatAgility","StatStrength","StatAttackPower","StatMeleeHit","StatMeleeCrit","StatMeleeHaste","StatArmorPenetration","StatExpertise","StatSpellPower","StatSpellCrit","StatSpellHit","StatSpellHaste","epPseudoStats","PseudoStat","PseudoStatMainHandDps","PseudoStatOffHandDps","epReferenceStat","displayStats","StatHealth","StatStamina","defaults","gear","Presets.P1_PRESET","epWeights","Stats","fromMap","consumes","Presets.DefaultConsumes","rotation","Presets.DefaultRotation","talents","Presets.StandardTalents","specOptions","Presets.DefaultOptions","raidBuffs","Presets.DefaultRaidBuffs","partyBuffs","PartyBuffs","individualBuffs","IndividualBuffs","blessingOfKings","blessingOfWisdom","blessingOfMight","judgementsOfTheWise","debuffs","Presets.DefaultDebuffs","playerIconInputs","ShamanInputs.ShamanShieldInput","ShamanInputs.ShamanImbueMH","ShamanInputs.ShamanImbueOH","rotationInputs","ShamanInputs.EnhancementShamanRotationConfig","includeBuffDebuffInputs","IconInputs.ReplenishmentBuff","IconInputs.MP5Buff","IconInputs.SpellHasteBuff","IconInputs.SpiritBuff","excludeBuffDebuffInputs","IconInputs.BleedDebuff","otherInputs","ShamanInputs.SyncTypeInput","OtherInputs.TankAssignment","OtherInputs.InFrontOfTarget","customSections","TotemsSection","encounterPicker","showExecuteProportion","presets","Presets.Phase3Talents","rotations","Presets.ROTATION_FT_DEFAULT","Presets.ROTATION_WF_DEFAULT","Presets.ROTATION_PHASE_3","Presets.PRERAID_PRESET","Presets.P2_PRESET_FT","Presets.P2_PRESET_WF","Presets.P3_PRESET_ALLIANCE","Presets.P3_PRESET_HORDE","autoRotation","hasT94P","options","console","log"],"mappings":"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"}