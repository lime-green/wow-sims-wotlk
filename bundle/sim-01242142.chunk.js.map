{"version":3,"file":"sim-01242142.chunk.js","sources":["../../../ui/warrior/presets.ts","../../../ui/warrior/inputs.ts","../../../ui/warrior/sim.ts"],"sourcesContent":["import {\n\tConsumes,\n\tFaction,\n\tFlask,\n\tFood,\n\tGlyphs,\n\tPotions,\n} from '../core/proto/common.js';\nimport { SavedTalents } from '../core/proto/ui.js';\n\nimport {\n\tWarriorShout,\n\tWarrior_Rotation as WarriorRotation,\n\tWarrior_Rotation_SunderArmor as SunderArmor,\n\tWarrior_Options as WarriorOptions,\n\tWarriorMajorGlyph,\n\tWarriorMinorGlyph,\n\tWarrior_Rotation_StanceOption as StanceOption,\n\tWarrior_Rotation_MainGcd as MainGcd,\n} from '../core/proto/warrior.js';\n\nimport * as PresetUtils from '../core/preset_utils.js';\n\nimport PreraidArmsGear from './gear_sets/preraid_arms.gear.json';\nimport P1ArmsGear from './gear_sets/p1_arms.gear.json';\nimport P2ArmsGear from './gear_sets/p2_arms.gear.json';\nimport P3Arms2pAllianceGear from './gear_sets/p3_arms_2p_alliance.gear.json';\nimport P3Arms4pAllianceGear from './gear_sets/p3_arms_4p_alliance.gear.json';\nimport P3Arms2pHordeGear from './gear_sets/p3_arms_2p_horde.gear.json';\nimport P3Arms4pHordeGear from './gear_sets/p3_arms_4p_horde.gear.json';\nimport PreraidFuryGear from './gear_sets/preraid_fury.gear.json';\nimport P1FuryGear from './gear_sets/p1_fury.gear.json';\nimport P2FuryGear from './gear_sets/p2_fury.gear.json';\nimport P3FuryAllianceGear from './gear_sets/p3_fury_alliance.gear.json';\nimport P3FuryHordeGear from './gear_sets/p3_fury_horde.gear.json';\n\nimport FuryApl from './apls/fury.apl.json';\nimport FurySunderApl from './apls/fury_sunder.apl.json';\nimport ArmsApl from './apls/arms.apl.json';\n\n// Preset options for this spec.\n// Eventually we will import these values for the raid sim too, so its good to\n// keep them in a separate file.\n\nexport const PRERAID_ARMS_PRESET = PresetUtils.makePresetGear('Preraid Arms', PreraidArmsGear, { talentTree: 0 });\nexport const P1_ARMS_PRESET = PresetUtils.makePresetGear('P1 Arms', P1ArmsGear, { talentTree: 0 });\nexport const P2_ARMS_PRESET = PresetUtils.makePresetGear('P2 Arms', P2ArmsGear, { talentTree: 0 });\nexport const P3_ARMS_2P_PRESET_ALLIANCE = PresetUtils.makePresetGear('P2 Arms 2p [A]', P3Arms2pAllianceGear, { talentTree: 0, faction: Faction.Alliance });\nexport const P3_ARMS_4P_PRESET_ALLIANCE = PresetUtils.makePresetGear('P2 Arms 4p [A]', P3Arms4pAllianceGear, { talentTree: 0, faction: Faction.Alliance });\nexport const P3_ARMS_2P_PRESET_HORDE = PresetUtils.makePresetGear('P2 Arms 2p [H]', P3Arms2pHordeGear, { talentTree: 0, faction: Faction.Horde });\nexport const P3_ARMS_4P_PRESET_HORDE = PresetUtils.makePresetGear('P2 Arms 4p [H]', P3Arms4pHordeGear, { talentTree: 0, faction: Faction.Horde });\nexport const PRERAID_FURY_PRESET = PresetUtils.makePresetGear('Preraid Fury', PreraidFuryGear, { talentTrees: [1,2] });\nexport const P1_FURY_PRESET = PresetUtils.makePresetGear('P1 Fury', P1FuryGear, { talentTrees: [1,2] });\nexport const P2_FURY_PRESET = PresetUtils.makePresetGear('P2 Fury', P2FuryGear, { talentTrees: [1,2] });\nexport const P3_FURY_PRESET_ALLIANCE = PresetUtils.makePresetGear('P3 Fury [A]', P3FuryAllianceGear, { talentTrees: [1,2], faction: Faction.Alliance });\nexport const P3_FURY_PRESET_HORDE = PresetUtils.makePresetGear('P3 Fury [H]', P3FuryHordeGear, { talentTrees: [1,2], faction: Faction.Horde });\n\nexport const DefaultRotation = WarriorRotation.create({\n\tuseRend: true,\n\tuseCleave: false,\n\tuseOverpower: false,\n\texecutePhaseOverpower: false,\n\n\tmainGcd: MainGcd.Bloodthirst,\n\n\tsunderArmor: SunderArmor.SunderArmorMaintain,\n\n\thsRageThreshold: 12,\n\trendHealthThresholdAbove: 20,\n\trendRageThresholdBelow: 100,\n\tslamRageThreshold: 25,\n\trendCdThreshold: 0,\n\tuseHsDuringExecute: true,\n\tuseBtDuringExecute: true,\n\tuseWwDuringExecute: true,\n\tuseSlamOverExecute: true,\n\tstanceOption: StanceOption.DefaultStance,\n});\n\nexport const ArmsRotation = WarriorRotation.create({\n\tuseRend: true,\n\tuseMs: true,\n\tuseCleave: false,\n\tsunderArmor: SunderArmor.SunderArmorMaintain,\n\tmsRageThreshold: 30,\n\tslamRageThreshold: 25,\n\thsRageThreshold: 50,\n\trendCdThreshold: 0,\n\trendHealthThresholdAbove: 100,\n\tuseHsDuringExecute: true,\n\tspamExecute: true,\n\tstanceOption: StanceOption.DefaultStance,\n});\n\nexport const ROTATION_FURY = PresetUtils.makePresetAPLRotation('Fury', FuryApl, { talentTree: 1 });\nexport const ROTATION_FURY_SUNDER = PresetUtils.makePresetAPLRotation('Fury + Sunder', FurySunderApl, { talentTree: 1 });\nexport const ROTATION_ARMS = PresetUtils.makePresetAPLRotation('Arms', ArmsApl, { talentTree: 0 });\n\n// Default talents. Uses the wowhead calculator format, make the talents on\n// https://wowhead.com/wotlk/talent-calc and copy the numbers in the url.\nexport const ArmsTalents = {\n\tname: 'Arms',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '3022032023335100102012213231251-305-2033',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: WarriorMajorGlyph.GlyphOfRending,\n\t\t\tmajor2: WarriorMajorGlyph.GlyphOfMortalStrike,\n\t\t\tmajor3: WarriorMajorGlyph.GlyphOfExecution,\n\t\t\tminor1: WarriorMinorGlyph.GlyphOfThunderClap,\n\t\t\tminor2: WarriorMinorGlyph.GlyphOfCommand,\n\t\t\tminor3: WarriorMinorGlyph.GlyphOfShatteringThrow,\n\t\t}),\n\t}),\n};\n\nexport const FuryTalents = {\n\tname: 'Fury',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '32002301233-305053000520310053120500351',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: WarriorMajorGlyph.GlyphOfWhirlwind,\n\t\t\tmajor2: WarriorMajorGlyph.GlyphOfHeroicStrike,\n\t\t\tmajor3: WarriorMajorGlyph.GlyphOfExecution,\n\t\t\tminor1: WarriorMinorGlyph.GlyphOfCommand,\n\t\t\tminor2: WarriorMinorGlyph.GlyphOfShatteringThrow,\n\t\t\tminor3: WarriorMinorGlyph.GlyphOfCharge,\n\t\t}),\n\t}),\n};\n\nexport const DefaultOptions = WarriorOptions.create({\n\tstartingRage: 0,\n\tuseRecklessness: true,\n\tuseShatteringThrow: true,\n\tdisableExpertiseGemming: false,\n\tshout: WarriorShout.WarriorShoutCommanding,\n});\n\nexport const DefaultConsumes = Consumes.create({\n\tflask: Flask.FlaskOfEndlessRage,\n\tfood: Food.FoodSpicedWormBurger,\n\tdefaultPotion: Potions.IndestructiblePotion,\n\tprepopPotion: Potions.PotionOfSpeed,\n});","import { Spec } from '../core/proto/common.js';\nimport { ActionId } from '../core/proto_utils/action_id.js';\nimport { Player } from '../core/player.js';\nimport { EventID, TypedEvent } from '../core/typed_event.js';\n\nimport {\n\tWarriorShout,\n\tWarriorTalents as WarriorTalents,\n\tWarrior,\n\tWarrior_Rotation as WarriorRotation,\n\tWarrior_Rotation_SunderArmor as SunderArmor,\n\tWarrior_Options as WarriorOptions,\n\tWarrior_Rotation_StanceOption as StanceOption,\n\tWarrior_Rotation_SpellOption as SpellOption,\n\tWarrior_Rotation_MainGcd as MainGcd,\n} from '../core/proto/warrior.js';\n\nimport * as InputHelpers from '../core/components/input_helpers.js';\n\n// Configuration for spec-specific UI elements on the settings tab.\n// These don't need to be in a separate file but it keeps things cleaner.\n\nexport const Recklessness = InputHelpers.makeSpecOptionsBooleanIconInput<Spec.SpecWarrior>({\n\tfieldName: 'useRecklessness',\n\tid: ActionId.fromSpellId(1719),\n});\n\nexport const ShatteringThrow = InputHelpers.makeSpecOptionsBooleanIconInput<Spec.SpecWarrior>({\n\tfieldName: 'useShatteringThrow',\n\tid: ActionId.fromSpellId(64382),\n});\n\nexport const StartingRage = InputHelpers.makeSpecOptionsNumberInput<Spec.SpecWarrior>({\n\tfieldName: 'startingRage',\n\tlabel: 'Starting Rage',\n\tlabelTooltip: 'Initial rage at the start of each iteration.',\n});\n\n\nexport const StanceSnapshot = InputHelpers.makeSpecOptionsBooleanInput<Spec.SpecWarrior>({\n\tfieldName: 'stanceSnapshot',\n\tlabel: 'Stance Snapshot',\n\tlabelTooltip: 'Ability that is cast at the same time as stance swap will benefit from the bonus of the stance before the swap.',\n});\n\n// Allows for auto gemming whilst ignoring expertise cap\n// (Useful for Arms)\nexport const DisableExpertiseGemming = InputHelpers.makeSpecOptionsBooleanInput<Spec.SpecWarrior>({\n\tfieldName: 'disableExpertiseGemming',\n\tlabel: 'Disable expertise gemming',\n\tlabelTooltip: 'Disables auto gemming for expertise',\n});\n\nexport const ShoutPicker = InputHelpers.makeSpecOptionsEnumIconInput<Spec.SpecWarrior, WarriorShout>({\n\tfieldName: 'shout',\n\tvalues: [\n\t\t{ color: 'c79c6e', value: WarriorShout.WarriorShoutNone },\n\t\t{ actionId: ActionId.fromSpellId(2048), value: WarriorShout.WarriorShoutBattle },\n\t\t{ actionId: ActionId.fromSpellId(469), value: WarriorShout.WarriorShoutCommanding },\n\t],\n});\n\nexport const WarriorRotationConfig = {\n\tinputs: [\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'useMs',\n\t\t\tlabel: 'Use Mortal Strike',\n\t\t\tlabelTooltip: 'Use Mortal Strike when rage threshold is met.',\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => player.getTalentTree() == 0 && !player.getRotation().customRotationOption,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'useCleave',\n\t\t\tlabel: 'Use Cleave',\n\t\t\tlabelTooltip: 'Use Cleave instead of Heroic Strike.',\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => !player.getRotation().customRotationOption,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'useRend',\n\t\t\tlabel: 'Use Rend',\n\t\t\tlabelTooltip: 'Use Rend when rage threshold is met and the debuff duration is less than refresh time.',\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => !player.getRotation().customRotationOption,\n\t\t}),\n\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'useOverpower',\n\t\t\tlabel: 'Use Overpower',\n\t\t\tlabelTooltip: 'Use Overpower whenever it is available on an open GCD.',\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => player.getTalentTree() == 1 && !player.getRotation().customRotationOption,\n\t\t}),\n\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecWarrior, MainGcd>({\n\t\t\tfieldName: 'mainGcd',\n\t\t\tlabel: 'Main GCD',\n\t\t\tlabelTooltip: 'Main GCD ability that will be prioritized above other abilities.',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Slam', value: MainGcd.Slam },\n\t\t\t\t{ name: 'Bloodthirst', value: MainGcd.Bloodthirst },\n\t\t\t\t{ name: 'Whirlwind', value: MainGcd.Whirlwind },\n\t\t\t],\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => player.getTalentTree() == 1 && !player.getRotation().customRotationOption,\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'msRageThreshold',\n\t\t\tlabel: 'Mortal Strike rage threshold',\n\t\t\tlabelTooltip: 'Mortal Strike when rage is above:',\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => (player.getRotation().useMs || player.getRotation().customRotationOption) && player.getTalentTree() == 0,\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'slamRageThreshold',\n\t\t\tlabel: 'Slam rage threshold',\n\t\t\tlabelTooltip: 'Slam when rage is above:',\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => (player.getRotation().useMs || player.getRotation().customRotationOption) && player.getTalentTree() == 0,\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'bloodsurgeDurationThreshold',\n\t\t\tlabel: 'Exp Slam: Bloodsurge duration threshold (s)',\n\t\t\tlabelTooltip: 'Cast Exp Slam when Bloodsurge duration is below (seconds):',\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => player.getRotation().customRotationOption && player.getTalentTree() == 1,\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'hsRageThreshold',\n\t\t\tlabel: 'HS rage threshold',\n\t\t\tlabelTooltip: 'Heroic Strike when rage is above:',\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'rendHealthThresholdAbove',\n\t\t\tlabel: 'Rend health threshold (%)',\n\t\t\tlabelTooltip: 'Rend will only be used when boss health is above this value in %.',\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => (player.getRotation().useRend == true || player.getRotation().customRotationOption),\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'rendRageThresholdBelow',\n\t\t\tlabel: 'Rend rage threshold below',\n\t\t\tlabelTooltip: 'Rend will only be used when rage is smaller than this value.',\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => (player.getRotation().useRend == true || player.getRotation().customRotationOption) && player.getTalentTree() == 1,\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'rendCdThreshold',\n\t\t\tlabel: 'Rend Refresh Time (s)',\n\t\t\tlabelTooltip: 'Refresh Rend when the remaining duration is less than this amount of time (seconds).',\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => player.getRotation().useRend == true || player.getRotation().customRotationOption,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'useHsDuringExecute',\n\t\t\tlabel: 'HS during Execute Phase',\n\t\t\tlabelTooltip: 'Use Heroic Strike during Execute Phase.',\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'useBtDuringExecute',\n\t\t\tlabel: 'BT during Execute Phase',\n\t\t\tlabelTooltip: 'Use Bloodthirst during Execute Phase.',\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => player.getTalentTree() == 1,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'useWwDuringExecute',\n\t\t\tlabel: 'WW during Execute Phase',\n\t\t\tlabelTooltip: 'Use Whirlwind during Execute Phase.',\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => player.getTalentTree() == 1,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'useSlamOverExecute',\n\t\t\tlabel: 'Slam during Execute Phase',\n\t\t\tlabelTooltip: 'Use Slam Over Execute when Bloodsurge Procs in Execute Phase.',\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => player.getTalentTree() == 1,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'executePhaseOverpower',\n\t\t\tlabel: 'Overpower in Execute Phase',\n\t\t\tlabelTooltip: 'Use Overpower instead of Execute whenever it is available.',\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => (player.getRotation().useOverpower == true || player.getRotation().customRotationOption) && player.getTalentTree() == 1,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'spamExecute',\n\t\t\tlabel: 'Spam Execute',\n\t\t\tlabelTooltip: 'Use Execute whenever possible during Execute Phase.',\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => player.getTalentTree() == 0,\n\t\t}),\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecWarrior, SunderArmor>({\n\t\t\tfieldName: 'sunderArmor',\n\t\t\tlabel: 'Sunder Armor',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Never', value: SunderArmor.SunderArmorNone },\n\t\t\t\t{ name: 'Help Stack', value: SunderArmor.SunderArmorHelpStack },\n\t\t\t\t{ name: 'Maintain Debuff', value: SunderArmor.SunderArmorMaintain },\n\t\t\t],\n\t\t}),\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecWarrior, StanceOption>({\n\t\t\tfieldName: 'stanceOption',\n\t\t\tlabel: 'Stance Option',\n\t\t\tlabelTooltip: 'Stance to stay on. The default for Fury (Bloodthirst) is Berserker Stance and Battle Stance for everything else.',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Default', value: StanceOption.DefaultStance },\n\t\t\t\t{ name: 'Battle Stance', value: StanceOption.BattleStance },\n\t\t\t\t{ name: 'Berserker Stance', value: StanceOption.BerserkerStance },\n\t\t\t],\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'maintainDemoShout',\n\t\t\tlabel: 'Maintain Demo Shout',\n\t\t\tlabelTooltip: 'Keep Demo Shout active on the primary target.',\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'maintainThunderClap',\n\t\t\tlabel: 'Maintain Thunder Clap',\n\t\t\tlabelTooltip: 'Keep Thunder Clap active on the primary target.',\n\t\t}),\n\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'customRotationOption',\n\t\t\tlabel: 'Custom Rotation (Advanced)',\n\t\t\tlabelTooltip: 'Create your own rotation action priority list.',\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => player.sim.getShowExperimental(),\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t}),\n\n\t\tInputHelpers.makeCustomRotationInput<Spec.SpecWarrior, SpellOption>({\n\t\t\tfieldName: 'customRotation',\n\t\t\tnumColumns: 3,\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => player.getRotation().customRotationOption && player.sim.getShowExperimental(),\n\t\t\tvalues: [\n\t\t\t\t{ actionId: ActionId.fromSpellId(23881), value: SpellOption.BloodthirstCustom },\n\t\t\t\t{ actionId: ActionId.fromSpellId(1680), value: SpellOption.WhirlwindCustom },\n\t\t\t\t{ actionId: ActionId.fromSpellId(47475), value: SpellOption.SlamCustom },\n\t\t\t\t{ actionId: ActionId.fromSpellId(47475), value: SpellOption.SlamExpiring, text: \"Exp\", showWhen: (player: Player<Spec.SpecWarrior>) => player.getTalentTree() == 1, },\n\t\t\t\t{ actionId: ActionId.fromSpellId(47486), value: SpellOption.MortalStrike },\n\t\t\t\t{ actionId: ActionId.fromSpellId(47465), value: SpellOption.Rend },\n\t\t\t\t{ actionId: ActionId.fromSpellId(7384), value: SpellOption.Overpower },\n\t\t\t\t{ actionId: ActionId.fromSpellId(47471), value: SpellOption.Execute },\n\t\t\t\t{ actionId: ActionId.fromSpellId(47502), value: SpellOption.ThunderClap },\n\t\t\t],\n\t\t}),\n\t],\n};\n","import { RaidBuffs } from '../core/proto/common.js';\nimport { PartyBuffs } from '../core/proto/common.js';\nimport { IndividualBuffs } from '../core/proto/common.js';\nimport { Debuffs } from '../core/proto/common.js';\nimport { Spec } from '../core/proto/common.js';\nimport { Stat, PseudoStat } from '../core/proto/common.js';\nimport { TristateEffect } from '../core/proto/common.js'\nimport { Stats } from '../core/proto_utils/stats.js';\nimport { Player } from '../core/player.js';\nimport { IndividualSimUI } from '../core/individual_sim_ui.js';\nimport { TypedEvent } from '../core/typed_event.js';\nimport { Gear } from '../core/proto_utils/gear.js';\nimport { ItemSlot } from '../core/proto/common.js';\nimport { GemColor } from '../core/proto/common.js';\nimport { Profession } from '../core/proto/common.js';\n\n\nimport * as OtherInputs from '../core/components/other_inputs.js';\nimport * as Mechanics from '../core/constants/mechanics.js';\n\nimport * as WarriorInputs from './inputs.js';\nimport * as Presets from './presets.js';\n\nexport class WarriorSimUI extends IndividualSimUI<Spec.SpecWarrior> {\n\tconstructor(parentElem: HTMLElement, player: Player<Spec.SpecWarrior>) {\n\t\tsuper(parentElem, player, {\n\t\t\tcssClass: 'warrior-sim-ui',\n\t\t\tcssScheme: 'warrior',\n\t\t\t// List any known bugs / issues here and they'll be shown on the site.\n\t\t\tknownIssues: [\n\t\t\t],\n\n\t\t\t// All stats for which EP should be calculated.\n\t\t\tepStats: [\n\t\t\t\tStat.StatStrength,\n\t\t\t\tStat.StatAgility,\n\t\t\t\tStat.StatAttackPower,\n\t\t\t\tStat.StatExpertise,\n\t\t\t\tStat.StatMeleeHit,\n\t\t\t\tStat.StatMeleeCrit,\n\t\t\t\tStat.StatMeleeHaste,\n\t\t\t\tStat.StatArmorPenetration,\n\t\t\t\tStat.StatArmor,\n\t\t\t],\n\t\t\tepPseudoStats: [\n\t\t\t\tPseudoStat.PseudoStatMainHandDps,\n\t\t\t\tPseudoStat.PseudoStatOffHandDps,\n\t\t\t],\n\t\t\t// Reference stat against which to calculate EP. I think all classes use either spell power or attack power.\n\t\t\tepReferenceStat: Stat.StatAttackPower,\n\t\t\t// Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\n\t\t\tdisplayStats: [\n\t\t\t\tStat.StatHealth,\n\t\t\t\tStat.StatStamina,\n\t\t\t\tStat.StatStrength,\n\t\t\t\tStat.StatAgility,\n\t\t\t\tStat.StatAttackPower,\n\t\t\t\tStat.StatExpertise,\n\t\t\t\tStat.StatMeleeHit,\n\t\t\t\tStat.StatMeleeCrit,\n\t\t\t\tStat.StatMeleeHaste,\n\t\t\t\tStat.StatArmorPenetration,\n\t\t\t\tStat.StatArmor,\n\t\t\t],\n\t\t\tmodifyDisplayStats: (player: Player<Spec.SpecWarrior>) => {\n\t\t\t\tlet stats = new Stats();\n\t\t\t\tif (!player.getInFrontOfTarget()) {\n\t\t\t\t\t// When behind target, dodge is the only outcome affected by Expertise.\n\t\t\t\t\tstats = stats.addStat(Stat.StatExpertise, player.getTalents().weaponMastery * 4 * Mechanics.EXPERTISE_PER_QUARTER_PERCENT_REDUCTION);\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\ttalents: stats,\n\t\t\t\t};\n\t\t\t},\n\n\t\t\tdefaults: {\n\t\t\t\t// Default equipped gear.\n\t\t\t\tgear: Presets.P3_FURY_PRESET_ALLIANCE.gear,\n\t\t\t\t// Default EP weights for sorting gear in the gear picker.\n\t\t\t\tepWeights: Stats.fromMap({\n\t\t\t\t\t[Stat.StatStrength]: 2.72,\n\t\t\t\t\t[Stat.StatAgility]: 1.82,\n\t\t\t\t\t[Stat.StatAttackPower]: 1,\n\t\t\t\t\t[Stat.StatExpertise]: 2.55,\n\t\t\t\t\t[Stat.StatMeleeHit]: 0.79,\n\t\t\t\t\t[Stat.StatMeleeCrit]: 2.12,\n\t\t\t\t\t[Stat.StatMeleeHaste]: 1.72,\n\t\t\t\t\t[Stat.StatArmorPenetration]: 2.17,\n\t\t\t\t\t[Stat.StatArmor]: 0.03,\n\t\t\t\t}, {\n\t\t\t\t\t[PseudoStat.PseudoStatMainHandDps]: 6.29,\n\t\t\t\t\t[PseudoStat.PseudoStatOffHandDps]: 3.58,\n\t\t\t\t}),\n\t\t\t\t// Default consumes settings.\n\t\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\t\t// Default rotation settings.\n\t\t\t\trotation: Presets.DefaultRotation,\n\t\t\t\t// Default talents.\n\t\t\t\ttalents: Presets.FuryTalents.data,\n\t\t\t\t// Default spec-specific settings.\n\t\t\t\tspecOptions: Presets.DefaultOptions,\n\t\t\t\t// Default raid/party buffs settings.\n\t\t\t\traidBuffs: RaidBuffs.create({\n\t\t\t\t\tgiftOfTheWild: TristateEffect.TristateEffectImproved,\n\t\t\t\t\tswiftRetribution: true,\n\t\t\t\t\tstrengthOfEarthTotem: TristateEffect.TristateEffectImproved,\n\t\t\t\t\ticyTalons: true,\n\t\t\t\t\tabominationsMight: true,\n\t\t\t\t\tleaderOfThePack: TristateEffect.TristateEffectRegular,\n\t\t\t\t\tsanctifiedRetribution: true,\n\t\t\t\t\tbloodlust: true,\n\t\t\t\t\tdevotionAura: TristateEffect.TristateEffectImproved,\n\t\t\t\t\tstoneskinTotem: TristateEffect.TristateEffectImproved,\n\t\t\t\t}),\n\t\t\t\tpartyBuffs: PartyBuffs.create({\n\t\t\t\t\theroicPresence: false,\n\t\t\t\t}),\n\t\t\t\tindividualBuffs: IndividualBuffs.create({\n\t\t\t\t\tblessingOfKings: true,\n\t\t\t\t\tblessingOfMight: TristateEffect.TristateEffectImproved,\n\t\t\t\t}),\n\t\t\t\tdebuffs: Debuffs.create({\n\t\t\t\t\tbloodFrenzy: true,\n\t\t\t\t\theartOfTheCrusader: true,\n\t\t\t\t\tmangle: true,\n\t\t\t\t\tsunderArmor: true,\n\t\t\t\t\tcurseOfWeakness: TristateEffect.TristateEffectRegular,\n\t\t\t\t\tfaerieFire: TristateEffect.TristateEffectImproved,\n\t\t\t\t}),\n\t\t\t},\n\n\t\t\t// IconInputs to include in the 'Player' section on the settings tab.\n\t\t\tplayerIconInputs: [\n\t\t\t\tWarriorInputs.ShoutPicker,\n\t\t\t\tWarriorInputs.Recklessness,\n\t\t\t\tWarriorInputs.ShatteringThrow,\n\t\t\t],\n\t\t\t// Inputs to include in the 'Rotation' section on the settings tab.\n\t\t\trotationInputs: WarriorInputs.WarriorRotationConfig,\n\t\t\t// Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\n\t\t\tincludeBuffDebuffInputs: [\n\t\t\t],\n\t\t\texcludeBuffDebuffInputs: [\n\t\t\t],\n\t\t\t// Inputs to include in the 'Other' section on the settings tab.\n\t\t\totherInputs: {\n\t\t\t\tinputs: [\n\t\t\t\t\tWarriorInputs.StartingRage,\n\t\t\t\t\tWarriorInputs.StanceSnapshot,\n\t\t\t\t\tWarriorInputs.DisableExpertiseGemming,\n\t\t\t\t\tOtherInputs.TankAssignment,\n\t\t\t\t\tOtherInputs.InFrontOfTarget,\n\t\t\t\t],\n\t\t\t},\n\t\t\tencounterPicker: {\n\t\t\t\t// Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\n\t\t\t\tshowExecuteProportion: true,\n\t\t\t},\n\n\t\t\tpresets: {\n\t\t\t\t// Preset talents that the user can quickly select.\n\t\t\t\ttalents: [\n\t\t\t\t\tPresets.ArmsTalents,\n\t\t\t\t\tPresets.FuryTalents,\n\t\t\t\t],\n\t\t\t\t// Preset rotations that the user can quickly select.\n\t\t\t\trotations: [\n\t\t\t\t\tPresets.ROTATION_FURY,\n\t\t\t\t\tPresets.ROTATION_FURY_SUNDER,\n\t\t\t\t\tPresets.ROTATION_ARMS,\n\t\t\t\t],\n\t\t\t\t// Preset gear configurations that the user can quickly select.\n\t\t\t\tgear: [\n\t\t\t\t\tPresets.PRERAID_FURY_PRESET,\n\t\t\t\t\tPresets.P1_FURY_PRESET,\n\t\t\t\t\tPresets.P2_FURY_PRESET,\n\t\t\t\t\tPresets.P3_FURY_PRESET_ALLIANCE,\n\t\t\t\t\tPresets.P3_FURY_PRESET_HORDE,\n\t\t\t\t\tPresets.PRERAID_ARMS_PRESET,\n\t\t\t\t\tPresets.P1_ARMS_PRESET,\n\t\t\t\t\tPresets.P2_ARMS_PRESET,\n\t\t\t\t\tPresets.P3_ARMS_2P_PRESET_ALLIANCE,\n\t\t\t\t\tPresets.P3_ARMS_4P_PRESET_ALLIANCE,\n\t\t\t\t\tPresets.P3_ARMS_2P_PRESET_HORDE,\n\t\t\t\t\tPresets.P3_ARMS_4P_PRESET_HORDE,\n\t\t\t\t],\n\t\t\t},\n\t\t});\n\t\tthis.addOptimizeGemsAction();\n\t}\n\taddOptimizeGemsAction() {\n\t\tthis.addAction('Suggest Gems', 'optimize-gems-action', async () => {\n\t\t\tthis.optimizeGems();\n\t\t});\n\t}\n\n\tasync optimizeGems() {\n\t\t// First, clear all existing gems\n\t\tlet optimizedGear = this.player.getGear().withoutGems();\n\n\t\t// Next, socket the meta\n\t\toptimizedGear = optimizedGear.withMetaGem(this.sim.db.lookupGem(41398));\n\n\t\t// Next, socket a Nightmare Tear in the best blue socket bonus\n\t\tconst epWeights = this.player.getEpWeights();\n\t\tconst tearSlot = this.findTearSlot(optimizedGear, epWeights);\n\t\toptimizedGear = this.socketTear(optimizedGear, tearSlot);\n\t\tawait this.updateGear(optimizedGear);\n\n\t\t// Next, identify all sockets where red gems will be placed\n\t\tconst redSockets = this.findSocketsByColor(optimizedGear, epWeights, GemColor.GemColorRed, tearSlot);\n\n\t\t// Rank order red gems to use with their associated stat caps\n\t\tconst redGemCaps = new Array<[number, Stats]>();\n\t\tredGemCaps.push([40117, this.calcArpCap(optimizedGear)]);\n\t\t// Should we gem expertise?\n\t\tconst enableExpertiseGemming = !this.player.getSpecOptions().disableExpertiseGemming\n\t\tconst expCap = this.calcExpCap();\n\t\tif(enableExpertiseGemming){\n\t\t\tredGemCaps.push([40118, expCap]);\n\t\t}\n\t\tconst critCap = this.calcCritCap(optimizedGear);\n\t\tredGemCaps.push([40111, new Stats()]);\n\n\t\t// If JC, then socket 34 ArP gems in first three red sockets before proceeding\n\t\tlet startIdx = 0;\n\n\t\tif (this.player.hasProfession(Profession.Jewelcrafting)) {\n\t\t\toptimizedGear = this.optimizeJcGems(optimizedGear, redSockets);\n\t\t\tstartIdx = 3;\n\t\t}\n\n\t\t// Do multiple passes to fill in red gems up their caps\n\t\toptimizedGear = await this.fillGemsToCaps(optimizedGear, redSockets, redGemCaps, 0, startIdx);\n\n\t\t// Now repeat the process for yellow gems\n\t\tconst yellowSockets = this.findSocketsByColor(optimizedGear, epWeights, GemColor.GemColorYellow, tearSlot);\n\t\tconst yellowGemCaps = new Array<[number, Stats]>();\n\t\tconst hitCap = new Stats().withStat(Stat.StatMeleeHit, 8. * 32.79 + 4);\n\t\tyellowGemCaps.push([40125, hitCap]);\n\t\tif(enableExpertiseGemming){\n\t\t\tyellowGemCaps.push([40162, hitCap.add(expCap)]);\n\t\t\tyellowGemCaps.push([40118, expCap]);\n\t\t}\n\t\tyellowGemCaps.push([40143, hitCap]);\n\t\tyellowGemCaps.push([40142, critCap]);\n\t\tawait this.fillGemsToCaps(optimizedGear, yellowSockets, yellowGemCaps, 0, 0);\n\t}\n\n\tcalcExpCap(): Stats {\n\t\tlet expCap = 6.5 * 32.79 + 4;\n\t\tconst weaponMastery = this.player.getTalents().weaponMastery;\n\t\tconst hasWeaponMasteryTalent = !!weaponMastery;\n\t\t\n\t\tif (hasWeaponMasteryTalent) {\n\t\t\texpCap -=\n\t\t\t\tweaponMastery * 4 * Mechanics.EXPERTISE_PER_QUARTER_PERCENT_REDUCTION;\n\t\t}\n\n\t\treturn new Stats().withStat(Stat.StatExpertise, expCap);\n\t}\n\n\tcalcArpCap(gear: Gear): Stats {\n\t\tlet arpCap = 1404;\n\n\t\tif (gear.hasTrinket(45931)) {\n\t\t\tarpCap = 659;\n\t\t} else if (gear.hasTrinket(40256)) {\n\t\t\tarpCap = 798;\n\t\t}\n\n\t\treturn new Stats().withStat(Stat.StatArmorPenetration, arpCap);\n\t}\n\n\tcalcArpTarget(gear: Gear): number {\n\t\tif (gear.hasTrinket(45931)) {\n\t\t\treturn 648;\n\t\t}\n\n\t\tif (gear.hasTrinket(40256)) {\n\t\t\treturn 787;\n\t\t}\n\n\t\treturn 1399;\n\t}\n\n\tcalcCritCap(gear: Gear): Stats {\n\t\tconst baseCritCapPercentage = 77.8; // includes 3% Crit debuff\n\t\tlet agiProcs = 0;\n\n\t\tif (gear.hasRelic(47668)) {\n\t\t\tagiProcs += 200;\n\t\t}\n\n\t\tif (gear.hasRelic(50456)) {\n\t\t\tagiProcs += 44*5;\n\t\t}\n\n\t\tif (gear.hasTrinket(47131) || gear.hasTrinket(47464)) {\n\t\t\tagiProcs += 510;\n\t\t}\n\n\t\tif (gear.hasTrinket(47115) || gear.hasTrinket(47303)) {\n\t\t\tagiProcs += 450;\n\t\t}\n\n\t\tif (gear.hasTrinket(44253) || gear.hasTrinket(42987)) {\n\t\t\tagiProcs += 300;\n\t\t}\n\n\t\treturn new Stats().withStat(Stat.StatMeleeCrit, (baseCritCapPercentage - agiProcs*1.1*1.06*1.02/83.33) * 45.91);\n\t}\n\n\tasync updateGear(gear: Gear): Promise<Stats> {\n\t\tthis.player.setGear(TypedEvent.nextEventID(), gear);\n\t\tawait this.sim.updateCharacterStats(TypedEvent.nextEventID());\n\t\treturn Stats.fromProto(this.player.getCurrentStats().finalStats);\n\t}\n\n\tfindTearSlot(gear: Gear, epWeights: Stats): ItemSlot | null {\n\t\tlet tearSlot: ItemSlot | null = null;\n\t\tlet maxBlueSocketBonusEP: number = 1e-8;\n\n\t\tfor (var slot of gear.getItemSlots()) {\n\t\t\tconst item = gear.getEquippedItem(slot);\n\n\t\t\tif (!item) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (item!.numSocketsOfColor(GemColor.GemColorBlue) != 1) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst socketBonusEP = new Stats(item.item.socketBonus).computeEP(epWeights);\n\n\t\t\tif (socketBonusEP > maxBlueSocketBonusEP) {\n\t\t\t\ttearSlot = slot;\n\t\t\t\tmaxBlueSocketBonusEP = socketBonusEP;\n\t\t\t}\n\t\t}\n\n\t\treturn tearSlot;\n\t}\n\n\tsocketTear(gear: Gear, tearSlot: ItemSlot | null): Gear {\n\t\tif (tearSlot != null) {\n\t\t\tconst tearSlotItem = gear.getEquippedItem(tearSlot);\n\n\t\t\tfor (const [socketIdx, socketColor] of tearSlotItem!.allSocketColors().entries()) {\n\t\t\t\tif (socketColor == GemColor.GemColorBlue) {\n\t\t\t\t\treturn gear.withEquippedItem(tearSlot, tearSlotItem!.withGem(this.sim.db.lookupGem(49110), socketIdx), true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn gear;\n\t}\n\n\tfindSocketsByColor(gear: Gear, epWeights: Stats, color: GemColor, tearSlot: ItemSlot | null): Array<[ItemSlot, number]> {\n\t\tconst socketList = new Array<[ItemSlot, number]>();\n\t\tconst isBlacksmithing = this.player.isBlacksmithing();\n\n\t\tfor (var slot of gear.getItemSlots()) {\n\t\t\tconst item = gear.getEquippedItem(slot);\n\n\t\t\tif (!item) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst ignoreYellowSockets = ((item!.numSocketsOfColor(GemColor.GemColorBlue) > 0) && (slot != tearSlot))\n\n\t\t\tfor (const [socketIdx, socketColor] of item!.curSocketColors(isBlacksmithing).entries()) {\n\t\t\t\tif (item!.hasSocketedGem(socketIdx)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tlet matchYellowSocket = false;\n\n\t\t\t\tif ((socketColor == GemColor.GemColorYellow) && !ignoreYellowSockets) {\n\t\t\t\t\tmatchYellowSocket = new Stats(item.item.socketBonus).computeEP(epWeights) > 1e-8;\n\t\t\t\t}\n\n\t\t\t\tif (((color == GemColor.GemColorYellow) && matchYellowSocket) || ((color == GemColor.GemColorRed) && !matchYellowSocket)) {\n\t\t\t\t\tsocketList.push([slot, socketIdx]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn socketList;\n\t}\n\n\tasync fillGemsToCaps(gear: Gear, socketList: Array<[ItemSlot, number]>, gemCaps: Array<[number, Stats]>, numPasses: number, firstIdx: number): Promise<Gear> {\n\t\tlet updatedGear: Gear = gear;\n\t\tconst currentGem = this.sim.db.lookupGem(gemCaps[numPasses][0]);\n\n\t\t// On the first pass, we simply fill all sockets with the highest priority gem\n\t\tif (numPasses == 0) {\n\t\t\tfor (const [itemSlot, socketIdx] of socketList.slice(firstIdx)) {\n\t\t\t\tupdatedGear = updatedGear.withGem(itemSlot, socketIdx, currentGem);\n\t\t\t}\n\t\t}\n\n\t\t// If we are below the relevant stat cap for the gem we just filled on the last pass, then we are finished.\n\t\tlet newStats = await this.updateGear(updatedGear);\n\t\tconst currentCap = gemCaps[numPasses][1];\n\n\t\tif (newStats.belowCaps(currentCap) || (numPasses == gemCaps.length - 1)) {\n\t\t\treturn updatedGear;\n\t\t}\n\n\t\t// If we exceeded the stat cap, then work backwards through the socket list and replace each gem with the next highest priority option until we are below the cap\n\t\tconst nextGem = this.sim.db.lookupGem(gemCaps[numPasses + 1][0]);\n\t\tconst nextCap = gemCaps[numPasses + 1][1];\n\t\tlet capForReplacement = currentCap;\n\n\t\tif ((numPasses > 0) && !currentCap.equals(nextCap)) {\n\t\t\tcapForReplacement = currentCap.subtract(nextCap);\n\t\t}\n\n\t\tfor (var idx = socketList.length - 1; idx >= firstIdx; idx--) {\n\t\t\tif (newStats.belowCaps(capForReplacement)) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tconst [itemSlot, socketIdx] = socketList[idx];\n\t\t\tupdatedGear = updatedGear.withGem(itemSlot, socketIdx, nextGem);\n\t\t\tnewStats = await this.updateGear(updatedGear);\n\t\t}\n\n\t\t// Now run a new pass to check whether we've exceeded the next stat cap\n\t\tlet nextIdx = idx + 1;\n\n\t\tif (!newStats.belowCaps(currentCap)) {\n\t\t\tnextIdx = firstIdx;\n\t\t}\n\n\t\treturn await this.fillGemsToCaps(updatedGear, socketList, gemCaps, numPasses + 1, nextIdx);\n\t}\n\n\tcalcDistanceToArpTarget(numJcArpGems: number, passiveArp: number, numRedSockets: number, arpCap: number, arpTarget: number): number {\n\t\tconst numNormalArpGems = Math.max(0, Math.min(numRedSockets - 3, Math.floor((arpCap - passiveArp - 34 * numJcArpGems) / 20)));\n\t\tconst projectedArp = passiveArp + 34 * numJcArpGems + 20 * numNormalArpGems;\n\t\treturn Math.abs(projectedArp - arpTarget);\n\t}\n\n\toptimizeJcGems(gear: Gear, redSocketList: Array<[ItemSlot, number]>): Gear {\n\t\tconst passiveStats = Stats.fromProto(this.player.getCurrentStats().finalStats);\n\t\tconst passiveArp = passiveStats.getStat(Stat.StatArmorPenetration);\n\t\tconst numRedSockets = redSocketList.length;\n\t\tconst arpCap = this.calcArpCap(gear).getStat(Stat.StatArmorPenetration);\n\t\tconst arpTarget = this.calcArpTarget(gear);\n\n\t\t// First determine how many of the JC gems should be 34 ArP gems\n\t\tlet optimalJcArpGems = 0;\n\t\tlet minDistanceToArpTarget = this.calcDistanceToArpTarget(0, passiveArp, numRedSockets, arpCap, arpTarget);\n\n\t\tfor (let i = 1; i <= 3; i++) {\n\t\t\tconst distanceToArpTarget = this.calcDistanceToArpTarget(i, passiveArp, numRedSockets, arpCap, arpTarget);\n\n\t\t\tif (distanceToArpTarget < minDistanceToArpTarget) {\n\t\t\t\toptimalJcArpGems = i;\n\t\t\t\tminDistanceToArpTarget = distanceToArpTarget;\n\t\t\t}\n\t\t}\n\n\t\t// Now actually socket the gems\n\t\tlet updatedGear: Gear = gear;\n\n\t\tfor (let i = 0; i < 3; i++) {\n\t\t\tlet gemId = 42142; // Str by default\n\n\t\t\tif (i < optimalJcArpGems) {\n\t\t\t\tgemId = 42153;\n\t\t\t}\n\n\t\t\tupdatedGear = updatedGear.withGem(redSocketList[i][0], redSocketList[i][1], this.sim.db.lookupGem(gemId));\n\t\t}\n\n\t\treturn updatedGear;\n\t}\n}\n"],"names":["PRERAID_ARMS_PRESET","PresetUtils.makePresetGear","talentTree","P1_ARMS_PRESET","P1ArmsGear","P2_ARMS_PRESET","P2ArmsGear","P3_ARMS_2P_PRESET_ALLIANCE","P3Arms2pAllianceGear","faction","Faction","Alliance","P3_ARMS_4P_PRESET_ALLIANCE","P3Arms4pAllianceGear","P3_ARMS_2P_PRESET_HORDE","P3Arms2pHordeGear","Horde","P3_ARMS_4P_PRESET_HORDE","P3Arms4pHordeGear","PRERAID_FURY_PRESET","PreraidFuryGear","talentTrees","P1_FURY_PRESET","P1FuryGear","P2_FURY_PRESET","P2FuryGear","P3_FURY_PRESET_ALLIANCE","P3FuryAllianceGear","P3_FURY_PRESET_HORDE","P3FuryHordeGear","DefaultRotation","WarriorRotation","create","useRend","useCleave","useOverpower","executePhaseOverpower","mainGcd","MainGcd","Bloodthirst","sunderArmor","SunderArmor","SunderArmorMaintain","hsRageThreshold","rendHealthThresholdAbove","rendRageThresholdBelow","slamRageThreshold","rendCdThreshold","useHsDuringExecute","useBtDuringExecute","useWwDuringExecute","useSlamOverExecute","stanceOption","StanceOption","DefaultStance","ArmsRotation","useMs","msRageThreshold","spamExecute","ROTATION_FURY","PresetUtils.makePresetAPLRotation","FuryApl","ROTATION_FURY_SUNDER","FurySunderApl","ROTATION_ARMS","ArmsApl","ArmsTalents","name","data","SavedTalents","talentsString","glyphs","Glyphs","major1","WarriorMajorGlyph","GlyphOfRending","major2","GlyphOfMortalStrike","major3","GlyphOfExecution","minor1","WarriorMinorGlyph","GlyphOfThunderClap","minor2","GlyphOfCommand","minor3","GlyphOfShatteringThrow","FuryTalents","GlyphOfWhirlwind","GlyphOfHeroicStrike","GlyphOfCharge","DefaultOptions","WarriorOptions","startingRage","useRecklessness","useShatteringThrow","disableExpertiseGemming","shout","WarriorShout","WarriorShoutCommanding","DefaultConsumes","Consumes","flask","Flask","FlaskOfEndlessRage","food","Food","FoodSpicedWormBurger","defaultPotion","Potions","IndestructiblePotion","prepopPotion","PotionOfSpeed","Recklessness","InputHelpers.makeSpecOptionsBooleanIconInput","fieldName","id","ActionId","fromSpellId","ShatteringThrow","StartingRage","InputHelpers.makeSpecOptionsNumberInput","label","labelTooltip","StanceSnapshot","InputHelpers.makeSpecOptionsBooleanInput","DisableExpertiseGemming","ShoutPicker","InputHelpers.makeSpecOptionsEnumIconInput","values","color","value","WarriorShoutNone","actionId","WarriorShoutBattle","WarriorRotationConfig","inputs","InputHelpers.makeRotationBooleanInput","changeEmitter","player","TypedEvent","onAny","rotationChangeEmitter","talentsChangeEmitter","showWhen","getTalentTree","getRotation","customRotationOption","InputHelpers.makeRotationEnumInput","Slam","Whirlwind","InputHelpers.makeRotationNumberInput","SunderArmorNone","SunderArmorHelpStack","BattleStance","BerserkerStance","sim","getShowExperimental","InputHelpers.makeCustomRotationInput","numColumns","SpellOption","BloodthirstCustom","WhirlwindCustom","SlamCustom","SlamExpiring","text","MortalStrike","Rend","Overpower","Execute","ThunderClap","WarriorSimUI","IndividualSimUI","constructor","parentElem","super","cssClass","cssScheme","knownIssues","epStats","Stat","StatStrength","StatAgility","StatAttackPower","StatExpertise","StatMeleeHit","StatMeleeCrit","StatMeleeHaste","StatArmorPenetration","StatArmor","epPseudoStats","PseudoStat","PseudoStatMainHandDps","PseudoStatOffHandDps","epReferenceStat","displayStats","StatHealth","StatStamina","modifyDisplayStats","stats","Stats","getInFrontOfTarget","addStat","getTalents","weaponMastery","Mechanics.EXPERTISE_PER_QUARTER_PERCENT_REDUCTION","talents","defaults","gear","Presets.P3_FURY_PRESET_ALLIANCE","epWeights","fromMap","consumes","Presets.DefaultConsumes","rotation","Presets.DefaultRotation","Presets.FuryTalents","specOptions","Presets.DefaultOptions","raidBuffs","RaidBuffs","giftOfTheWild","TristateEffect","TristateEffectImproved","swiftRetribution","strengthOfEarthTotem","icyTalons","abominationsMight","leaderOfThePack","TristateEffectRegular","sanctifiedRetribution","bloodlust","devotionAura","stoneskinTotem","partyBuffs","PartyBuffs","heroicPresence","individualBuffs","IndividualBuffs","blessingOfKings","blessingOfMight","debuffs","Debuffs","bloodFrenzy","heartOfTheCrusader","mangle","curseOfWeakness","faerieFire","playerIconInputs","WarriorInputs.ShoutPicker","WarriorInputs.Recklessness","WarriorInputs.ShatteringThrow","rotationInputs","WarriorInputs.WarriorRotationConfig","includeBuffDebuffInputs","excludeBuffDebuffInputs","otherInputs","WarriorInputs.StartingRage","WarriorInputs.StanceSnapshot","WarriorInputs.DisableExpertiseGemming","OtherInputs.TankAssignment","OtherInputs.InFrontOfTarget","encounterPicker","showExecuteProportion","presets","Presets.ArmsTalents","rotations","Presets.ROTATION_FURY","Presets.ROTATION_FURY_SUNDER","Presets.ROTATION_ARMS","Presets.PRERAID_FURY_PRESET","Presets.P1_FURY_PRESET","Presets.P2_FURY_PRESET","Presets.P3_FURY_PRESET_HORDE","Presets.PRERAID_ARMS_PRESET","Presets.P1_ARMS_PRESET","Presets.P2_ARMS_PRESET","Presets.P3_ARMS_2P_PRESET_ALLIANCE","Presets.P3_ARMS_4P_PRESET_ALLIANCE","Presets.P3_ARMS_2P_PRESET_HORDE","Presets.P3_ARMS_4P_PRESET_HORDE","this","addOptimizeGemsAction","addAction","async","optimizeGems","optimizedGear","getGear","withoutGems","withMetaGem","db","lookupGem","getEpWeights","tearSlot","findTearSlot","socketTear","updateGear","redSockets","findSocketsByColor","GemColor","GemColorRed","redGemCaps","Array","push","calcArpCap","enableExpertiseGemming","getSpecOptions","expCap","calcExpCap","critCap","calcCritCap","startIdx","hasProfession","Profession","Jewelcrafting","optimizeJcGems","fillGemsToCaps","yellowSockets","GemColorYellow","yellowGemCaps","hitCap","withStat","add","arpCap","hasTrinket","calcArpTarget","agiProcs","hasRelic","setGear","nextEventID","updateCharacterStats","fromProto","getCurrentStats","finalStats","maxBlueSocketBonusEP","slot","getItemSlots","item","getEquippedItem","numSocketsOfColor","GemColorBlue","socketBonusEP","socketBonus","computeEP","tearSlotItem","socketIdx","socketColor","allSocketColors","entries","withEquippedItem","withGem","socketList","isBlacksmithing","ignoreYellowSockets","curSocketColors","hasSocketedGem","matchYellowSocket","gemCaps","numPasses","firstIdx","updatedGear","currentGem","itemSlot","slice","newStats","currentCap","belowCaps","length","nextGem","nextCap","capForReplacement","equals","subtract","idx","nextIdx","calcDistanceToArpTarget","numJcArpGems","passiveArp","numRedSockets","arpTarget","projectedArp","Math","max","min","floor","abs","redSocketList","getStat","optimalJcArpGems","minDistanceToArpTarget","i","distanceToArpTarget","gemId"],"mappings":"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"}