{"version":3,"file":"sim-4a655621.chunk.js","sources":["../../../ui/hunter/inputs.ts","../../../ui/hunter/presets.ts","../../../ui/hunter/sim.ts"],"sourcesContent":["import { Spec } from '../core/proto/common.js';\nimport { ActionId } from '../core/proto_utils/action_id.js';\nimport { Player } from '../core/player.js';\nimport { EventID, TypedEvent } from '../core/typed_event.js';\nimport { makePetTypeInputConfig } from '../core/talents/hunter_pet.js';\n\nimport * as InputHelpers from '../core/components/input_helpers.js';\n\nimport {\n\tHunter,\n\tHunter_Rotation as HunterRotation,\n\tHunter_Rotation_RotationType as RotationType,\n\tHunter_Rotation_StingType as StingType,\n\tHunter_Rotation_SpellOption as SpellOption,\n\tHunter_Options as HunterOptions,\n\tHunter_Options_Ammo as Ammo,\n\tHunter_Options_PetType as PetType,\n} from '../core/proto/hunter.js';\n\n// Configuration for spec-specific UI elements on the settings tab.\n// These don't need to be in a separate file but it keeps things cleaner.\n\nexport const WeaponAmmo = InputHelpers.makeSpecOptionsEnumIconInput<Spec.SpecHunter, Ammo>({\n\tfieldName: 'ammo',\n\tnumColumns: 2,\n\tvalues: [\n\t\t{ value: Ammo.AmmoNone, tooltip: 'No Ammo' },\n\t\t{ actionId: ActionId.fromItemId(52021), value: Ammo.IcebladeArrow },\n\t\t{ actionId: ActionId.fromItemId(41165), value: Ammo.SaroniteRazorheads },\n\t\t{ actionId: ActionId.fromItemId(41586), value: Ammo.TerrorshaftArrow },\n\t\t{ actionId: ActionId.fromItemId(31737), value: Ammo.TimelessArrow },\n\t\t{ actionId: ActionId.fromItemId(34581), value: Ammo.MysteriousArrow },\n\t\t{ actionId: ActionId.fromItemId(33803), value: Ammo.AdamantiteStinger },\n\t\t{ actionId: ActionId.fromItemId(28056), value: Ammo.BlackflightArrow },\n\t],\n});\n\nexport const PetTypeInput = makePetTypeInputConfig(true);\n\nexport const PetUptime = InputHelpers.makeSpecOptionsNumberInput<Spec.SpecHunter>({\n\tfieldName: 'petUptime',\n\tlabel: 'Pet Uptime (%)',\n\tlabelTooltip: 'Percent of the fight duration for which your pet will be alive.',\n\tpercent: true,\n});\n\nexport const UseHuntersMark = InputHelpers.makeSpecOptionsBooleanIconInput<Spec.SpecHunter>({\n\tfieldName: 'useHuntersMark',\n\tid: ActionId.fromSpellId(53338),\n});\n\nexport const SniperTrainingUptime = InputHelpers.makeSpecOptionsNumberInput<Spec.SpecHunter>({\n\tfieldName: 'sniperTrainingUptime',\n\tlabel: 'ST Uptime (%)',\n\tlabelTooltip: 'Uptime for the Sniper Training talent, as a percent of the fight duration.',\n\tpercent: true,\n\tshowWhen: (player: Player<Spec.SpecHunter>) => player.getTalents().sniperTraining > 0,\n\tchangeEmitter: (player: Player<Spec.SpecHunter>) => TypedEvent.onAny([player.specOptionsChangeEmitter, player.talentsChangeEmitter]),\n});\n\nexport const TimeToTrapWeaveMs = InputHelpers.makeSpecOptionsNumberInput<Spec.SpecHunter>({\n\tfieldName: 'timeToTrapWeaveMs',\n\tlabel: 'Weave Time',\n\tlabelTooltip: 'Amount of time for Explosive Trap, in milliseconds, between when you start moving towards the boss and when you re-engage your ranged autos.',\n});\n\nexport const HunterRotationConfig = {\n\tinputs: [\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecHunter, RotationType>({\n\t\t\tfieldName: 'type',\n\t\t\tlabel: 'Type',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Single Target', value: RotationType.SingleTarget },\n\t\t\t\t{ name: 'AOE', value: RotationType.Aoe },\n\t\t\t],\n\t\t}),\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecHunter, StingType>({\n\t\t\tfieldName: 'sting',\n\t\t\tlabel: 'Sting',\n\t\t\tlabelTooltip: 'Maintains the selected Sting on the primary target.',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'None', value: StingType.NoSting },\n\t\t\t\t{ name: 'Scorpid Sting', value: StingType.ScorpidSting },\n\t\t\t\t{ name: 'Serpent Sting', value: StingType.SerpentSting },\n\t\t\t],\n\t\t\tshowWhen: (player: Player<Spec.SpecHunter>) => player.getRotation().type == RotationType.SingleTarget,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecHunter>({\n\t\t\tfieldName: 'trapWeave',\n\t\t\tlabel: 'Trap Weave',\n\t\t\tlabelTooltip: 'Uses Explosive Trap at appropriate times. Note that selecting this will disable Black Arrow because they share a CD.',\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecHunter>({\n\t\t\tfieldName: 'allowExplosiveShotDownrank',\n\t\t\tlabel: 'Allow ES Downrank',\n\t\t\tlabelTooltip: 'Weaves Explosive Shot Rank 3 during LNL procs. This works because the rank 3 and rank 4 dots can stack.',\n\t\t\tshowWhen: (player: Player<Spec.SpecHunter>) => player.getRotation().type != RotationType.Custom && player.getTalents().explosiveShot && player.getTalents().lockAndLoad > 0,\n\t\t\tchangeEmitter: (player: Player<Spec.SpecHunter>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecHunter>({\n\t\t\tfieldName: 'multiDotSerpentSting',\n\t\t\tlabel: 'Multi-Dot Serpent Sting',\n\t\t\tlabelTooltip: 'Casts Serpent Sting on multiple targets',\n\t\t\tchangeEmitter: (player: Player<Spec.SpecHunter>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecHunter>({\n\t\t\tfieldName: 'viperStartManaPercent',\n\t\t\tlabel: 'Viper Start Mana %',\n\t\t\tlabelTooltip: 'Switch to Aspect of the Viper when mana goes below this amount.',\n\t\t\tpercent: true,\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecHunter>({\n\t\t\tfieldName: 'viperStopManaPercent',\n\t\t\tlabel: 'Viper Stop Mana %',\n\t\t\tlabelTooltip: 'Switch back to Aspect of the Hawk when mana goes above this amount.',\n\t\t\tpercent: true,\n\t\t}),\n\t],\n};\n","import {\n\tConsumes,\n\tFlask,\n\tFood,\n\tGlyphs,\n\tPetFood,\n\tPotions,\n\tSpec,\n} from '../core/proto/common.js';\nimport { SavedTalents } from '../core/proto/ui.js';\nimport { ferocityDefault, ferocityBMDefault } from '../core/talents/hunter_pet.js';\n\nimport {\n\tHunter_Rotation as HunterRotation,\n\tHunter_Rotation_RotationType as RotationType,\n\tHunter_Rotation_StingType as StingType,\n\tHunter_Options as HunterOptions,\n\tHunter_Options_Ammo as Ammo,\n\tHunter_Options_PetType as PetType,\n\tHunterMajorGlyph as MajorGlyph,\n\tHunterMinorGlyph as MinorGlyph,\n} from '../core/proto/hunter.js';\n\nimport * as PresetUtils from '../core/preset_utils.js';\n\nimport PreraidMMGear from './gear_sets/preraid_mm.gear.json';\nimport P1MMGear from './gear_sets/p1_mm.gear.json';\nimport P2MMGear from './gear_sets/p2_mm.gear.json';\nimport P3MMGear from './gear_sets/p3_mm.gear.json';\nimport P4MMGear from './gear_sets/p4_mm.gear.json';\nimport P5MMGear from './gear_sets/p5_mm.gear.json';\nimport PreraidSVGear from './gear_sets/preraid_sv.gear.json';\nimport P1SVGear from './gear_sets/p1_sv.gear.json';\nimport P2SVGear from './gear_sets/p2_sv.gear.json';\nimport P3SVGear from './gear_sets/p3_sv.gear.json';\nimport P4SVGear from './gear_sets/p4_sv.gear.json';\nimport P5SVGear from './gear_sets/p5_sv.gear.json';\n\nimport BmApl from './apls/bm.apl.json';\nimport MmApl from './apls/mm.apl.json';\nimport MmAdvApl from './apls/mm_advanced.apl.json';\nimport SvApl from './apls/sv.apl.json';\nimport SvAdvApl from './apls/sv_advanced.apl.json';\nimport AoeApl from './apls/aoe.apl.json';\n\n// Preset options for this spec.\n// Eventually we will import these values for the raid sim too, so its good to\n// keep them in a separate file.\n\nexport const MM_PRERAID_PRESET = PresetUtils.makePresetGear('MM PreRaid Preset', PreraidMMGear, { talentTrees: [0, 1] });\nexport const MM_P1_PRESET = PresetUtils.makePresetGear('MM P1 Preset', P1MMGear, { talentTrees: [0, 1] });\nexport const MM_P2_PRESET = PresetUtils.makePresetGear('MM P2 Preset', P2MMGear, { talentTrees: [0, 1] });\nexport const MM_P3_PRESET = PresetUtils.makePresetGear('MM P3 Preset', P3MMGear, { talentTrees: [0, 1] });\nexport const MM_P4_PRESET = PresetUtils.makePresetGear('MM P4 Preset', P4MMGear, { talentTrees: [0, 1] });\nexport const MM_P5_PRESET = PresetUtils.makePresetGear('MM P5 Preset', P5MMGear, { talentTrees: [0, 1] });\nexport const SV_PRERAID_PRESET = PresetUtils.makePresetGear('SV PreRaid Preset', PreraidSVGear, { talentTree: 2 });\nexport const SV_P1_PRESET = PresetUtils.makePresetGear('SV P1 Preset', P1SVGear, { talentTree: 2 });\nexport const SV_P2_PRESET = PresetUtils.makePresetGear('SV P2 Preset', P2SVGear, { talentTree: 2 });\nexport const SV_P3_PRESET = PresetUtils.makePresetGear('SV P3 Preset', P3SVGear, { talentTree: 2 });\nexport const SV_P4_PRESET = PresetUtils.makePresetGear('SV P4 Preset', P4SVGear, { talentTree: 2 });\nexport const SV_P5_PRESET = PresetUtils.makePresetGear('SV P5 Preset', P5SVGear, { talentTree: 2 });\n\nexport const DefaultRotation = HunterRotation.create({\n\ttype: RotationType.SingleTarget,\n\tsting: StingType.SerpentSting,\n\ttrapWeave: true,\n\tviperStartManaPercent: 0.1,\n\tviperStopManaPercent: 0.3,\n\tmultiDotSerpentSting: true,\n\tallowExplosiveShotDownrank: true,\n});\n\nexport const ROTATION_PRESET_SIMPLE_DEFAULT = PresetUtils.makePresetSimpleRotation('Simple Default', Spec.SpecHunter, DefaultRotation);\nexport const ROTATION_PRESET_BM = PresetUtils.makePresetAPLRotation('BM', BmApl, { talentTree: 0 });\nexport const ROTATION_PRESET_MM = PresetUtils.makePresetAPLRotation('MM', MmApl, { talentTree: 1 });\nexport const ROTATION_PRESET_MM_ADVANCED = PresetUtils.makePresetAPLRotation('MM (Advanced)', MmAdvApl, { talentTree: 1 });\nexport const ROTATION_PRESET_SV = PresetUtils.makePresetAPLRotation('SV', SvApl, { talentTree: 2 });\nexport const ROTATION_PRESET_SV_ADVANCED = PresetUtils.makePresetAPLRotation('SV (Advanced)', SvAdvApl, { talentTree: 2 });\nexport const ROTATION_PRESET_AOE = PresetUtils.makePresetAPLRotation('AOE', AoeApl);\n\n// Default talents. Uses the wowhead calculator format, make the talents on\n// https://wowhead.com/wotlk/talent-calc and copy the numbers in the url.\nexport const BeastMasteryTalents = {\n\tname: 'Beast Mastery',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '51200201505112243120531251-025305101',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: MajorGlyph.GlyphOfBestialWrath,\n\t\t\tmajor2: MajorGlyph.GlyphOfSteadyShot,\n\t\t\tmajor3: MajorGlyph.GlyphOfSerpentSting,\n\t\t\tminor1: MinorGlyph.GlyphOfFeignDeath,\n\t\t\tminor2: MinorGlyph.GlyphOfRevivePet,\n\t\t\tminor3: MinorGlyph.GlyphOfMendPet,\n\t\t}),\n\t}),\n};\n\nexport const MarksmanTalents = {\n\tname: 'Marksman',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '502-035335131030013233035031051-5000002',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: MajorGlyph.GlyphOfSerpentSting,\n\t\t\tmajor2: MajorGlyph.GlyphOfSteadyShot,\n\t\t\tmajor3: MajorGlyph.GlyphOfChimeraShot,\n\t\t\tminor1: MinorGlyph.GlyphOfFeignDeath,\n\t\t\tminor2: MinorGlyph.GlyphOfRevivePet,\n\t\t\tminor3: MinorGlyph.GlyphOfMendPet,\n\t\t}),\n\t}),\n};\n\nexport const SurvivalTalents = {\n\tname: 'Survival',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '-015305101-5000032500033330532135301311',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: MajorGlyph.GlyphOfSerpentSting,\n\t\t\tmajor2: MajorGlyph.GlyphOfExplosiveShot,\n\t\t\tmajor3: MajorGlyph.GlyphOfKillShot,\n\t\t\tminor1: MinorGlyph.GlyphOfFeignDeath,\n\t\t\tminor2: MinorGlyph.GlyphOfRevivePet,\n\t\t\tminor3: MinorGlyph.GlyphOfMendPet,\n\t\t}),\n\t}),\n};\n\nexport const DefaultOptions = HunterOptions.create({\n\tammo: Ammo.SaroniteRazorheads,\n\tuseHuntersMark: true,\n\tpetType: PetType.Wolf,\n\tpetTalents: ferocityDefault,\n\tpetUptime: 1,\n\tsniperTrainingUptime: 0.9,\n\ttimeToTrapWeaveMs: 2000,\n});\n\nexport const BMDefaultOptions = HunterOptions.create({\n\tammo: Ammo.SaroniteRazorheads,\n\tuseHuntersMark: true,\n\tpetType: PetType.Wolf,\n\tpetTalents: ferocityBMDefault,\n\tpetUptime: 1,\n\tsniperTrainingUptime: 0.9,\n\ttimeToTrapWeaveMs: 2000,\n});\n\nexport const DefaultConsumes = Consumes.create({\n\tdefaultPotion: Potions.PotionOfSpeed,\n\tflask: Flask.FlaskOfEndlessRage,\n\tfood: Food.FoodFishFeast,\n\tpetFood: PetFood.PetFoodSpicedMammothTreats,\n});\n","import {\n\tCooldowns,\n\tDebuffs,\n\tIndividualBuffs,\n\tItemSlot,\n\tPartyBuffs,\n\tRace,\n\tRaidBuffs,\n\tRangedWeaponType,\n\tSpec,\n\tStat, PseudoStat,\n\tTristateEffect,\n} from '../core/proto/common.js';\nimport {\n\tAPLAction,\n\tAPLListItem,\n\tAPLRotation,\n} from '../core/proto/apl.js';\nimport { Player } from '../core/player.js';\nimport { Stats } from '../core/proto_utils/stats.js';\nimport { getTalentPoints } from '../core/proto_utils/utils.js';\nimport { IndividualSimUI } from '../core/individual_sim_ui.js';\nimport { EventID, TypedEvent } from '../core/typed_event.js';\nimport { getPetTalentsConfig } from '../core/talents/hunter_pet.js';\nimport { protoToTalentString } from '../core/talents/factory.js';\n\nimport {\n\tHunter,\n\tHunter_Rotation as HunterRotation,\n\tHunter_Rotation_StingType as StingType,\n\tHunter_Options as HunterOptions,\n\tHunter_Options_PetType as PetType,\n\tHunterPetTalents,\n\tHunter_Rotation_RotationType,\n} from '../core/proto/hunter.js';\n\nimport * as IconInputs from '../core/components/icon_inputs.js';\nimport * as OtherInputs from '../core/components/other_inputs.js';\nimport * as Mechanics from '../core/constants/mechanics.js';\nimport * as Tooltips from '../core/constants/tooltips.js';\nimport * as AplUtils from '../core/proto_utils/apl_utils.js';\n\nimport * as HunterInputs from './inputs.js';\nimport * as Presets from './presets.js';\n\nexport class HunterSimUI extends IndividualSimUI<Spec.SpecHunter> {\n\tconstructor(parentElem: HTMLElement, player: Player<Spec.SpecHunter>) {\n\t\tsuper(parentElem, player, {\n\t\t\tcssClass: 'hunter-sim-ui',\n\t\t\tcssScheme: 'hunter',\n\t\t\t// List any known bugs / issues here and they'll be shown on the site.\n\t\t\tknownIssues: [\n\t\t\t],\n\t\t\twarnings: [\n\t\t\t\t// Warning when using exotic pet without BM talented.\n\t\t\t\t(simUI: IndividualSimUI<Spec.SpecHunter>) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tupdateOn: TypedEvent.onAny([simUI.player.talentsChangeEmitter, simUI.player.specOptionsChangeEmitter]),\n\t\t\t\t\t\tgetContent: () => {\n\t\t\t\t\t\t\tconst petIsExotic = [\n\t\t\t\t\t\t\t\tPetType.Chimaera,\n\t\t\t\t\t\t\t\tPetType.CoreHound,\n\t\t\t\t\t\t\t\tPetType.Devilsaur,\n\t\t\t\t\t\t\t\tPetType.Silithid,\n\t\t\t\t\t\t\t\tPetType.SpiritBeast,\n\t\t\t\t\t\t\t\tPetType.Worm,\n\t\t\t\t\t\t\t].includes(simUI.player.getSpecOptions().petType);\n\n\t\t\t\t\t\t\tconst isBM = simUI.player.getTalents().beastMastery;\n\n\t\t\t\t\t\t\tif (petIsExotic && !isBM) {\n\t\t\t\t\t\t\t\treturn 'Cannot use exotic pets without the Beast Mastery talent.';\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn '';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t\t// Warning when too many Pet talent points are used without BM talented.\n\t\t\t\t(simUI: IndividualSimUI<Spec.SpecHunter>) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tupdateOn: TypedEvent.onAny([simUI.player.talentsChangeEmitter, simUI.player.specOptionsChangeEmitter]),\n\t\t\t\t\t\tgetContent: () => {\n\t\t\t\t\t\t\tconst specOptions = simUI.player.getSpecOptions();\n\t\t\t\t\t\t\tconst petTalents = specOptions.petTalents || HunterPetTalents.create();\n\t\t\t\t\t\t\tconst petTalentString = protoToTalentString(petTalents, getPetTalentsConfig(specOptions.petType));\n\t\t\t\t\t\t\tconst talentPoints = getTalentPoints(petTalentString);\n\n\t\t\t\t\t\t\tconst isBM = simUI.player.getTalents().beastMastery;\n\t\t\t\t\t\t\tconst maxPoints = isBM ? 20 : 16;\n\n\t\t\t\t\t\t\tif (talentPoints == 0) {\n\t\t\t\t\t\t\t\t// Just return here, so we don't show a warning during page load.\n\t\t\t\t\t\t\t\treturn '';\n\t\t\t\t\t\t\t} else if (talentPoints < maxPoints) {\n\t\t\t\t\t\t\t\treturn 'Unspent pet talent points.';\n\t\t\t\t\t\t\t} else if (talentPoints > maxPoints) {\n\t\t\t\t\t\t\t\treturn 'More than 16 points spent in pet talents, but Beast Mastery is not talented.';\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn '';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t],\n\n\t\t\t// All stats for which EP should be calculated.\n\t\t\tepStats: [\n\t\t\t\tStat.StatStamina,\n\t\t\t\tStat.StatIntellect,\n\t\t\t\tStat.StatAgility,\n\t\t\t\tStat.StatRangedAttackPower,\n\t\t\t\tStat.StatMeleeHit,\n\t\t\t\tStat.StatMeleeCrit,\n\t\t\t\tStat.StatMeleeHaste,\n\t\t\t\tStat.StatArmorPenetration,\n\t\t\t\tStat.StatMP5,\n\t\t\t],\n\t\t\tepPseudoStats: [\n\t\t\t\tPseudoStat.PseudoStatRangedDps,\n\t\t\t],\n\t\t\t// Reference stat against which to calculate EP.\n\t\t\tepReferenceStat: Stat.StatRangedAttackPower,\n\t\t\t// Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\n\t\t\tdisplayStats: [\n\t\t\t\tStat.StatHealth,\n\t\t\t\tStat.StatStamina,\n\t\t\t\tStat.StatAgility,\n\t\t\t\tStat.StatIntellect,\n\t\t\t\tStat.StatRangedAttackPower,\n\t\t\t\tStat.StatMeleeHit,\n\t\t\t\tStat.StatMeleeCrit,\n\t\t\t\tStat.StatMeleeHaste,\n\t\t\t\tStat.StatArmorPenetration,\n\t\t\t\tStat.StatMP5,\n\t\t\t],\n\t\t\tmodifyDisplayStats: (player: Player<Spec.SpecHunter>) => {\n\t\t\t\tlet stats = new Stats();\n\t\t\t\tstats = stats.addStat(Stat.StatMeleeCrit, player.getTalents().lethalShots * 1 * Mechanics.MELEE_CRIT_RATING_PER_CRIT_CHANCE);\n\n\t\t\t\tconst rangedWeapon = player.getEquippedItem(ItemSlot.ItemSlotRanged);\n\t\t\t\tif (rangedWeapon?.enchant?.effectId == 3608) {\n\t\t\t\t\tstats = stats.addStat(Stat.StatMeleeCrit, 40);\n\t\t\t\t}\n\t\t\t\tif (player.getRace() == Race.RaceDwarf && rangedWeapon?.item.rangedWeaponType == RangedWeaponType.RangedWeaponTypeGun) {\n\t\t\t\t\tstats = stats.addStat(Stat.StatMeleeCrit, 1 * Mechanics.MELEE_CRIT_RATING_PER_CRIT_CHANCE);\n\t\t\t\t}\n\t\t\t\tif (player.getRace() == Race.RaceTroll && rangedWeapon?.item.rangedWeaponType == RangedWeaponType.RangedWeaponTypeBow) {\n\t\t\t\t\tstats = stats.addStat(Stat.StatMeleeCrit, 1 * Mechanics.MELEE_CRIT_RATING_PER_CRIT_CHANCE);\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\ttalents: stats,\n\t\t\t\t};\n\t\t\t},\n\n\t\t\tdefaults: {\n\t\t\t\t// Default equipped gear.\n\t\t\t\tgear: Presets.SV_P1_PRESET.gear,\n\t\t\t\t// Default EP weights for sorting gear in the gear picker.\n\t\t\t\tepWeights: Stats.fromMap({\n\t\t\t\t\t[Stat.StatStamina]: 0.5,\n\t\t\t\t\t[Stat.StatAgility]: 2.65,\n\t\t\t\t\t[Stat.StatIntellect]: 1.1,\n\t\t\t\t\t[Stat.StatRangedAttackPower]: 1.0,\n\t\t\t\t\t[Stat.StatMeleeHit]: 2,\n\t\t\t\t\t[Stat.StatMeleeCrit]: 1.5,\n\t\t\t\t\t[Stat.StatMeleeHaste]: 1.39,\n\t\t\t\t\t[Stat.StatArmorPenetration]: 1.32,\n\t\t\t\t}, {\n\t\t\t\t\t[PseudoStat.PseudoStatRangedDps]: 6.32,\n\t\t\t\t}),\n\t\t\t\t// Default consumes settings.\n\t\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\t\t// Default rotation settings.\n\t\t\t\trotation: Presets.DefaultRotation,\n\t\t\t\t// Default talents.\n\t\t\t\ttalents: Presets.SurvivalTalents.data,\n\t\t\t\t// Default spec-specific settings.\n\t\t\t\tspecOptions: Presets.DefaultOptions,\n\t\t\t\t// Default raid/party buffs settings.\n\t\t\t\traidBuffs: RaidBuffs.create({\n\t\t\t\t\tarcaneBrilliance: true,\n\t\t\t\t\tpowerWordFortitude: TristateEffect.TristateEffectImproved,\n\t\t\t\t\tgiftOfTheWild: TristateEffect.TristateEffectImproved,\n\t\t\t\t\tbloodlust: true,\n\t\t\t\t\tstrengthOfEarthTotem: TristateEffect.TristateEffectImproved,\n\t\t\t\t\twindfuryTotem: TristateEffect.TristateEffectImproved,\n\t\t\t\t\tbattleShout: TristateEffect.TristateEffectImproved,\n\t\t\t\t\tleaderOfThePack: TristateEffect.TristateEffectImproved,\n\t\t\t\t\tsanctifiedRetribution: true,\n\t\t\t\t\tunleashedRage: true,\n\t\t\t\t\tmoonkinAura: TristateEffect.TristateEffectImproved,\n\t\t\t\t}),\n\t\t\t\tpartyBuffs: PartyBuffs.create({\n\t\t\t\t}),\n\t\t\t\tindividualBuffs: IndividualBuffs.create({\n\t\t\t\t\tblessingOfKings: true,\n\t\t\t\t\tblessingOfWisdom: 2,\n\t\t\t\t\tblessingOfMight: 2,\n\t\t\t\t\tvampiricTouch: true,\n\t\t\t\t}),\n\t\t\t\tdebuffs: Debuffs.create({\n\t\t\t\t\tsunderArmor: true,\n\t\t\t\t\tfaerieFire: TristateEffect.TristateEffectImproved,\n\t\t\t\t\tjudgementOfWisdom: true,\n\t\t\t\t\tcurseOfElements: true,\n\t\t\t\t\theartOfTheCrusader: true,\n\t\t\t\t\tsavageCombat: true,\n\t\t\t\t}),\n\t\t\t},\n\n\t\t\t// IconInputs to include in the 'Player' section on the settings tab.\n\t\t\tplayerIconInputs: [\n\t\t\t\tHunterInputs.PetTypeInput,\n\t\t\t\tHunterInputs.WeaponAmmo,\n\t\t\t\tHunterInputs.UseHuntersMark,\n\t\t\t],\n\t\t\t// Inputs to include in the 'Rotation' section on the settings tab.\n\t\t\trotationInputs: HunterInputs.HunterRotationConfig,\n\t\t\tpetConsumeInputs: [\n\t\t\t\tIconInputs.SpicedMammothTreats,\n\t\t\t],\n\t\t\t// Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\n\t\t\tincludeBuffDebuffInputs: [\n\t\t\t\tIconInputs.StaminaBuff,\n\t\t\t\tIconInputs.SpellDamageDebuff,\n\t\t\t],\n\t\t\texcludeBuffDebuffInputs: [\n\t\t\t],\n\t\t\t// Inputs to include in the 'Other' section on the settings tab.\n\t\t\totherInputs: {\n\t\t\t\tinputs: [\n\t\t\t\t\tHunterInputs.PetUptime,\n\t\t\t\t\tHunterInputs.TimeToTrapWeaveMs,\n\t\t\t\t\tHunterInputs.SniperTrainingUptime,\n\t\t\t\t\tOtherInputs.TankAssignment,\n\t\t\t\t\tOtherInputs.InFrontOfTarget,\n\t\t\t\t],\n\t\t\t},\n\t\t\tencounterPicker: {\n\t\t\t\t// Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\n\t\t\t\tshowExecuteProportion: false,\n\t\t\t},\n\n\t\t\tpresets: {\n\t\t\t\t// Preset talents that the user can quickly select.\n\t\t\t\ttalents: [\n\t\t\t\t\tPresets.BeastMasteryTalents,\n\t\t\t\t\tPresets.MarksmanTalents,\n\t\t\t\t\tPresets.SurvivalTalents,\n\t\t\t\t],\n\t\t\t\t// Preset rotations that the user can quickly select.\n\t\t\t\trotations: [\n\t\t\t\t\tPresets.ROTATION_PRESET_SIMPLE_DEFAULT,\n\t\t\t\t\tPresets.ROTATION_PRESET_BM,\n\t\t\t\t\tPresets.ROTATION_PRESET_MM,\n\t\t\t\t\tPresets.ROTATION_PRESET_MM_ADVANCED,\n\t\t\t\t\tPresets.ROTATION_PRESET_SV,\n\t\t\t\t\tPresets.ROTATION_PRESET_SV_ADVANCED,\n\t\t\t\t\tPresets.ROTATION_PRESET_AOE,\n\t\t\t\t],\n\t\t\t\t// Preset gear configurations that the user can quickly select.\n\t\t\t\tgear: [\n\t\t\t\t\tPresets.MM_PRERAID_PRESET,\n\t\t\t\t\tPresets.MM_P1_PRESET,\n\t\t\t\t\tPresets.MM_P2_PRESET,\n\t\t\t\t\tPresets.MM_P3_PRESET,\n\t\t\t\t\tPresets.MM_P4_PRESET,\n\t\t\t\t\tPresets.MM_P5_PRESET,\n\t\t\t\t\tPresets.SV_PRERAID_PRESET,\n\t\t\t\t\tPresets.SV_P1_PRESET,\n\t\t\t\t\tPresets.SV_P2_PRESET,\n\t\t\t\t\tPresets.SV_P3_PRESET,\n\t\t\t\t\tPresets.SV_P4_PRESET,\n\t\t\t\t\tPresets.SV_P5_PRESET,\n\t\t\t\t],\n\t\t\t},\n\n\t\t\tautoRotation: (player: Player<Spec.SpecHunter>): APLRotation => {\n\t\t\t\tconst talentTree = player.getTalentTree();\n\t\t\t\tconst numTargets = player.sim.encounter.targets.length;\n\t\t\t\tif (numTargets >= 4) {\n\t\t\t\t\treturn Presets.ROTATION_PRESET_AOE.rotation.rotation!;\n\t\t\t\t} else if (talentTree == 0) {\n\t\t\t\t\treturn Presets.ROTATION_PRESET_BM.rotation.rotation!;\n\t\t\t\t} else if (talentTree == 1) {\n\t\t\t\t\treturn Presets.ROTATION_PRESET_MM.rotation.rotation!;\n\t\t\t\t} else {\n\t\t\t\t\treturn Presets.ROTATION_PRESET_SV.rotation.rotation!;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tsimpleRotation: (player: Player<Spec.SpecHunter>, simple: HunterRotation, cooldowns: Cooldowns): APLRotation => {\n\t\t\t\tlet [prepullActions, actions] = AplUtils.standardCooldownDefaults(cooldowns);\n\n\t\t\t\tconst serpentSting = APLAction.fromJsonString(`{\"condition\":{\"cmp\":{\"op\":\"OpGt\",\"lhs\":{\"remainingTime\":{}},\"rhs\":{\"const\":{\"val\":\"6s\"}}}},\"multidot\":{\"spellId\":{\"spellId\":49001},\"maxDots\":${simple.multiDotSerpentSting ? 3 : 1},\"maxOverlap\":{\"const\":{\"val\":\"0ms\"}}}}`);\n\t\t\t\tconst scorpidSting = APLAction.fromJsonString(`{\"condition\":{\"auraShouldRefresh\":{\"auraId\":{\"spellId\":3043},\"maxOverlap\":{\"const\":{\"val\":\"0ms\"}}}},\"castSpell\":{\"spellId\":{\"spellId\":3043}}}`);\n\t\t\t\tconst trapWeave = APLAction.fromJsonString(`{\"condition\":{\"not\":{\"val\":{\"dotIsActive\":{\"spellId\":{\"spellId\":49067}}}}},\"castSpell\":{\"spellId\":{\"tag\":1,\"spellId\":49067}}}`);\n\t\t\t\tconst volley = APLAction.fromJsonString(`{\"castSpell\":{\"spellId\":{\"spellId\":58434}}}`);\n\t\t\t\tconst killShot = APLAction.fromJsonString(`{\"castSpell\":{\"spellId\":{\"spellId\":61006}}}`);\n\t\t\t\tconst aimedShot = APLAction.fromJsonString(`{\"castSpell\":{\"spellId\":{\"spellId\":49050}}}`);\n\t\t\t\tconst multiShot = APLAction.fromJsonString(`{\"castSpell\":{\"spellId\":{\"spellId\":49048}}}`);\n\t\t\t\tconst steadyShot = APLAction.fromJsonString(`{\"castSpell\":{\"spellId\":{\"spellId\":49052}}}`);\n\t\t\t\tconst silencingShot = APLAction.fromJsonString(`{\"castSpell\":{\"spellId\":{\"spellId\":34490}}}`);\n\t\t\t\tconst chimeraShot = APLAction.fromJsonString(`{\"castSpell\":{\"spellId\":{\"spellId\":53209}}}`);\n\t\t\t\tconst blackArrow = APLAction.fromJsonString(`{\"castSpell\":{\"spellId\":{\"spellId\":63672}}}`);\n\t\t\t\tconst explosiveShot4 = APLAction.fromJsonString(`{\"condition\":{\"not\":{\"val\":{\"dotIsActive\":{\"spellId\":{\"spellId\":60053}}}}},\"castSpell\":{\"spellId\":{\"spellId\":60053}}}`);\n\t\t\t\tconst explosiveShot3 = APLAction.fromJsonString(`{\"condition\":{\"dotIsActive\":{\"spellId\":{\"spellId\":60053}}},\"castSpell\":{\"spellId\":{\"spellId\":60052}}}`);\n\t\t\t\t//const arcaneShot = APLAction.fromJsonString(`{\"castSpell\":{\"spellId\":{\"spellId\":49045}}}`);\n\n\t\t\t\tif (simple.viperStartManaPercent != 0) {\n\t\t\t\t\tactions.push(APLAction.fromJsonString(`{\"condition\":{\"and\":{\"vals\":[{\"not\":{\"val\":{\"auraIsActive\":{\"auraId\":{\"spellId\":34074}}}}},{\"cmp\":{\"op\":\"OpLt\",\"lhs\":{\"currentManaPercent\":{}},\"rhs\":{\"const\":{\"val\":\"${(simple.viperStartManaPercent * 100).toFixed(0)}%\"}}}}]}},\"castSpell\":{\"spellId\":{\"spellId\":34074}}}`));\n\t\t\t\t}\n\t\t\t\tif (simple.viperStopManaPercent != 0) {\n\t\t\t\t\tactions.push(APLAction.fromJsonString(`{\"condition\":{\"and\":{\"vals\":[{\"not\":{\"val\":{\"auraIsActive\":{\"auraId\":{\"spellId\":61847}}}}},{\"cmp\":{\"op\":\"OpGt\",\"lhs\":{\"currentManaPercent\":{}},\"rhs\":{\"const\":{\"val\":\"${(simple.viperStopManaPercent * 100).toFixed(0)}%\"}}}}]}},\"castSpell\":{\"spellId\":{\"spellId\":61847}}}`));\n\t\t\t\t}\n\n\t\t\t\tconst talentTree = player.getTalentTree();\n\t\t\t\tif (simple.type == Hunter_Rotation_RotationType.Aoe) {\n\t\t\t\t\tactions.push(...[\n\t\t\t\t\t\tsimple.sting == StingType.ScorpidSting ? scorpidSting : null,\n\t\t\t\t\t\tsimple.sting == StingType.SerpentSting ? serpentSting : null,\n\t\t\t\t\t\tsimple.trapWeave ? trapWeave : null,\n\t\t\t\t\t\tvolley,\n\t\t\t\t\t].filter(a => a) as Array<APLAction>)\n\t\t\t\t} else if (talentTree == 0) { // BM\n\t\t\t\t\tactions.push(...[\n\t\t\t\t\t\tkillShot,\n\t\t\t\t\t\tsimple.trapWeave ? trapWeave : null,\n\t\t\t\t\t\tsimple.sting == StingType.ScorpidSting ? scorpidSting : null,\n\t\t\t\t\t\tsimple.sting == StingType.SerpentSting ? serpentSting : null,\n\t\t\t\t\t\taimedShot,\n\t\t\t\t\t\tmultiShot,\n\t\t\t\t\t\tsteadyShot,\n\t\t\t\t\t].filter(a => a) as Array<APLAction>)\n\t\t\t\t} else if (talentTree == 1) { // MM\n\t\t\t\t\tactions.push(...[\n\t\t\t\t\t\tsilencingShot,\n\t\t\t\t\t\tkillShot,\n\t\t\t\t\t\tsimple.sting == StingType.ScorpidSting ? scorpidSting : null,\n\t\t\t\t\t\tsimple.sting == StingType.SerpentSting ? serpentSting : null,\n\t\t\t\t\t\tsimple.trapWeave ? trapWeave : null,\n\t\t\t\t\t\tchimeraShot,\n\t\t\t\t\t\taimedShot,\n\t\t\t\t\t\tmultiShot,\n\t\t\t\t\t\tsteadyShot,\n\t\t\t\t\t].filter(a => a) as Array<APLAction>)\n\t\t\t\t} else if (talentTree == 2) { // SV\n\t\t\t\t\tactions.push(...[\n\t\t\t\t\t\tkillShot,\n\t\t\t\t\t\texplosiveShot4,\n\t\t\t\t\t\tsimple.allowExplosiveShotDownrank ? explosiveShot3 : null,\n\t\t\t\t\t\tsimple.trapWeave ? trapWeave : null,\n\t\t\t\t\t\tsimple.sting == StingType.ScorpidSting ? scorpidSting : null,\n\t\t\t\t\t\tsimple.sting == StingType.SerpentSting ? serpentSting : null,\n\t\t\t\t\t\tblackArrow,\n\t\t\t\t\t\taimedShot,\n\t\t\t\t\t\tmultiShot,\n\t\t\t\t\t\tsteadyShot,\n\t\t\t\t\t].filter(a => a) as Array<APLAction>)\n\t\t\t\t}\n\n\t\t\t\treturn APLRotation.create({\n\t\t\t\t\tprepullActions: prepullActions,\n\t\t\t\t\tpriorityList: actions.map(action => APLListItem.create({\n\t\t\t\t\t\taction: action,\n\t\t\t\t\t}))\n\t\t\t\t});\n\t\t\t},\n\t\t});\n\t}\n}\n"],"names":["WeaponAmmo","InputHelpers.makeSpecOptionsEnumIconInput","fieldName","numColumns","values","value","Ammo","AmmoNone","tooltip","actionId","ActionId","fromItemId","IcebladeArrow","SaroniteRazorheads","TerrorshaftArrow","TimelessArrow","MysteriousArrow","AdamantiteStinger","BlackflightArrow","PetTypeInput","makePetTypeInputConfig","PetUptime","InputHelpers.makeSpecOptionsNumberInput","label","labelTooltip","percent","UseHuntersMark","InputHelpers.makeSpecOptionsBooleanIconInput","id","fromSpellId","SniperTrainingUptime","showWhen","player","getTalents","sniperTraining","changeEmitter","TypedEvent","onAny","specOptionsChangeEmitter","talentsChangeEmitter","TimeToTrapWeaveMs","HunterRotationConfig","inputs","InputHelpers.makeRotationEnumInput","name","RotationType","SingleTarget","Aoe","StingType","NoSting","ScorpidSting","SerpentSting","getRotation","type","InputHelpers.makeRotationBooleanInput","Custom","explosiveShot","lockAndLoad","rotationChangeEmitter","InputHelpers.makeRotationNumberInput","MM_PRERAID_PRESET","PresetUtils.makePresetGear","talentTrees","MM_P1_PRESET","P1MMGear","MM_P2_PRESET","P2MMGear","MM_P3_PRESET","P3MMGear","MM_P4_PRESET","P4MMGear","MM_P5_PRESET","P5MMGear","SV_PRERAID_PRESET","PreraidSVGear","talentTree","SV_P1_PRESET","P1SVGear","SV_P2_PRESET","P2SVGear","SV_P3_PRESET","P3SVGear","SV_P4_PRESET","P4SVGear","SV_P5_PRESET","P5SVGear","DefaultRotation","HunterRotation","create","sting","trapWeave","viperStartManaPercent","viperStopManaPercent","multiDotSerpentSting","allowExplosiveShotDownrank","ROTATION_PRESET_SIMPLE_DEFAULT","PresetUtils.makePresetSimpleRotation","Spec","SpecHunter","ROTATION_PRESET_BM","PresetUtils.makePresetAPLRotation","BmApl","ROTATION_PRESET_MM","MmApl","ROTATION_PRESET_MM_ADVANCED","MmAdvApl","ROTATION_PRESET_SV","SvApl","ROTATION_PRESET_SV_ADVANCED","SvAdvApl","ROTATION_PRESET_AOE","AoeApl","BeastMasteryTalents","data","SavedTalents","talentsString","glyphs","Glyphs","major1","MajorGlyph","GlyphOfBestialWrath","major2","GlyphOfSteadyShot","major3","GlyphOfSerpentSting","minor1","MinorGlyph","GlyphOfFeignDeath","minor2","GlyphOfRevivePet","minor3","GlyphOfMendPet","MarksmanTalents","GlyphOfChimeraShot","SurvivalTalents","GlyphOfExplosiveShot","GlyphOfKillShot","DefaultOptions","HunterOptions","ammo","useHuntersMark","petType","PetType","Wolf","petTalents","ferocityDefault","petUptime","sniperTrainingUptime","timeToTrapWeaveMs","BMDefaultOptions","ferocityBMDefault","DefaultConsumes","Consumes","defaultPotion","Potions","PotionOfSpeed","flask","Flask","FlaskOfEndlessRage","food","Food","FoodFishFeast","petFood","PetFood","PetFoodSpicedMammothTreats","HunterSimUI","IndividualSimUI","constructor","parentElem","super","cssClass","cssScheme","knownIssues","warnings","simUI","updateOn","getContent","petIsExotic","Chimaera","CoreHound","Devilsaur","Silithid","SpiritBeast","Worm","includes","getSpecOptions","isBM","beastMastery","specOptions","HunterPetTalents","petTalentString","protoToTalentString","getPetTalentsConfig","talentPoints","getTalentPoints","maxPoints","epStats","Stat","StatStamina","StatIntellect","StatAgility","StatRangedAttackPower","StatMeleeHit","StatMeleeCrit","StatMeleeHaste","StatArmorPenetration","StatMP5","epPseudoStats","PseudoStat","PseudoStatRangedDps","epReferenceStat","displayStats","StatHealth","modifyDisplayStats","stats","Stats","addStat","lethalShots","Mechanics.MELEE_CRIT_RATING_PER_CRIT_CHANCE","rangedWeapon","getEquippedItem","ItemSlot","ItemSlotRanged","enchant","effectId","getRace","Race","RaceDwarf","item","rangedWeaponType","RangedWeaponType","RangedWeaponTypeGun","RaceTroll","RangedWeaponTypeBow","talents","defaults","gear","Presets.SV_P1_PRESET","epWeights","fromMap","consumes","Presets.DefaultConsumes","rotation","Presets.DefaultRotation","Presets.SurvivalTalents","Presets.DefaultOptions","raidBuffs","RaidBuffs","arcaneBrilliance","powerWordFortitude","TristateEffect","TristateEffectImproved","giftOfTheWild","bloodlust","strengthOfEarthTotem","windfuryTotem","battleShout","leaderOfThePack","sanctifiedRetribution","unleashedRage","moonkinAura","partyBuffs","PartyBuffs","individualBuffs","IndividualBuffs","blessingOfKings","blessingOfWisdom","blessingOfMight","vampiricTouch","debuffs","Debuffs","sunderArmor","faerieFire","judgementOfWisdom","curseOfElements","heartOfTheCrusader","savageCombat","playerIconInputs","HunterInputs.PetTypeInput","HunterInputs.WeaponAmmo","HunterInputs.UseHuntersMark","rotationInputs","HunterInputs.HunterRotationConfig","petConsumeInputs","IconInputs.SpicedMammothTreats","includeBuffDebuffInputs","IconInputs.StaminaBuff","IconInputs.SpellDamageDebuff","excludeBuffDebuffInputs","otherInputs","HunterInputs.PetUptime","HunterInputs.TimeToTrapWeaveMs","HunterInputs.SniperTrainingUptime","OtherInputs.TankAssignment","OtherInputs.InFrontOfTarget","encounterPicker","showExecuteProportion","presets","Presets.BeastMasteryTalents","Presets.MarksmanTalents","rotations","Presets.ROTATION_PRESET_SIMPLE_DEFAULT","Presets.ROTATION_PRESET_BM","Presets.ROTATION_PRESET_MM","Presets.ROTATION_PRESET_MM_ADVANCED","Presets.ROTATION_PRESET_SV","Presets.ROTATION_PRESET_SV_ADVANCED","Presets.ROTATION_PRESET_AOE","Presets.MM_PRERAID_PRESET","Presets.MM_P1_PRESET","Presets.MM_P2_PRESET","Presets.MM_P3_PRESET","Presets.MM_P4_PRESET","Presets.MM_P5_PRESET","Presets.SV_PRERAID_PRESET","Presets.SV_P2_PRESET","Presets.SV_P3_PRESET","Presets.SV_P4_PRESET","Presets.SV_P5_PRESET","autoRotation","getTalentTree","sim","encounter","targets","length","simpleRotation","simple","cooldowns","prepullActions","actions","AplUtils.standardCooldownDefaults","serpentSting","APLAction","fromJsonString","scorpidSting","volley","killShot","aimedShot","multiShot","steadyShot","silencingShot","chimeraShot","blackArrow","explosiveShot4","explosiveShot3","push","toFixed","Hunter_Rotation_RotationType","filter","a","APLRotation","priorityList","map","action","APLListItem"],"mappings":"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"}