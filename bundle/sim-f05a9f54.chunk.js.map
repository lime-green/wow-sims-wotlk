{"version":3,"file":"sim-f05a9f54.chunk.js","sources":["../../../ui/feral_druid/inputs.ts","../../../ui/feral_druid/presets.ts","../../../ui/feral_druid/sim.ts"],"sourcesContent":["import { UnitReference, UnitReference_Type as UnitType } from '../core/proto/common.js';\nimport { Spec } from '../core/proto/common.js';\nimport { ActionId } from '../core/proto_utils/action_id.js';\nimport { Player } from '../core/player.js';\nimport { EventID, TypedEvent } from '../core/typed_event.js';\n\nimport * as InputHelpers from '../core/components/input_helpers.js';\n\nimport {\n\tFeralDruid,\n\tFeralDruid_Rotation as DruidRotation,\n\tFeralDruid_Rotation_AplType as AplType,\n\tFeralDruid_Rotation_BearweaveType as BearweaveType,\n\tFeralDruid_Rotation_BiteModeType as BiteModeType,\n\tFeralDruid_Options as DruidOptions,\n\tFeralDruid_Rotation_BiteModeType\n} from '../core/proto/druid.js';\n\n// Configuration for spec-specific UI elements on the settings tab.\n// These don't need to be in a separate file but it keeps things cleaner.\n\nexport const SelfInnervate = InputHelpers.makeSpecOptionsBooleanIconInput<Spec.SpecFeralDruid>({\n\tfieldName: 'innervateTarget',\n\tid: ActionId.fromSpellId(29166),\n\textraCssClasses: [\n\t\t'within-raid-sim-hide',\n\t],\n\tgetValue: (player: Player<Spec.SpecFeralDruid>) => player.getSpecOptions().innervateTarget?.type == UnitType.Player,\n\tsetValue: (eventID: EventID, player: Player<Spec.SpecFeralDruid>, newValue: boolean) => {\n\t\tconst newOptions = player.getSpecOptions();\n\t\tnewOptions.innervateTarget = UnitReference.create({\n\t\t\ttype: newValue ? UnitType.Player : UnitType.Unknown,\n\t\t\tindex: 0,\n\t\t});\n\t\tplayer.setSpecOptions(eventID, newOptions);\n\t},\n});\n\nexport const LatencyMs = InputHelpers.makeSpecOptionsNumberInput<Spec.SpecFeralDruid>({\n\tfieldName: 'latencyMs',\n\tlabel: 'Latency',\n\tlabelTooltip: 'Player latency, in milliseconds. Adds a delay to actions that cannot be spell queued.',\n});\n\nexport const AssumeBleedActive = InputHelpers.makeSpecOptionsBooleanInput<Spec.SpecFeralDruid>({\n\tfieldName: 'assumeBleedActive',\n\tlabel: 'Assume Bleed Always Active',\n\tlabelTooltip: 'Assume bleed always exists for \\'Rend and Tear\\' calculations. Otherwise will only calculate based on own rip/rake/lacerate.',\n\textraCssClasses: ['within-raid-sim-hide'],\n})\n\nfunction ShouldShowAdvParamST(player: Player<Spec.SpecFeralDruid>): boolean {\n\tlet rot = player.getRotation();\n\treturn rot.manualParams && rot.rotationType == AplType.SingleTarget;\n}\n\nfunction ShouldShowAdvParamAoe(player: Player<Spec.SpecFeralDruid>): boolean {\n\tlet rot = player.getRotation();\n\treturn rot.manualParams && rot.rotationType == AplType.Aoe;\n}\n\nexport const FeralDruidRotationConfig = {\n\tinputs: [\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecFeralDruid, AplType>({\n\t\t\tfieldName: 'rotationType',\n\t\t\tlabel: 'Type',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Single Target', value: AplType.SingleTarget },\n\t\t\t\t{ name: 'AOE', value: AplType.Aoe },\n\t\t\t],\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecFeralDruid>({\n\t\t\tfieldName: 'prePopOoc',\n\t\t\tlabel: 'Pre-pop Clearcasting',\n\t\t\tlabelTooltip: 'Start fight with clearcasting',\n\t\t\tshowWhen: (player: Player<Spec.SpecFeralDruid>) => player.getTalents().omenOfClarity,\n\t\t\tchangeEmitter: (player: Player<Spec.SpecFeralDruid>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecFeralDruid>({\n\t\t\tfieldName: 'prePopBerserk',\n\t\t\tlabel: 'Pre-pop Berserk',\n\t\t\tlabelTooltip: 'Pre pop berserk 1 sec before fight',\n\t\t\tshowWhen: (player: Player<Spec.SpecFeralDruid>) => player.getTalents().berserk,\n\t\t\tchangeEmitter: (player: Player<Spec.SpecFeralDruid>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecFeralDruid>({\n\t\t\tfieldName: 'manualParams',\n\t\t\tlabel: 'Manual Advanced Parameters',\n\t\t\tlabelTooltip: 'Manually specify advanced parameters, otherwise will use preset defaults',\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecFeralDruid>({\n\t\t\tfieldName: 'maxFfDelay',\n\t\t\tlabel: 'Max FF Delay',\n\t\t\tlabelTooltip: 'Max allowed delay to wait for ff to come off CD in seconds',\n\t\t\tfloat: true,\n\t\t\tpositive: true,\n\t\t\tshowWhen: (player: Player<Spec.SpecFeralDruid>) => player.getRotation().manualParams,\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecFeralDruid>({\n\t\t\tfieldName: 'minRoarOffset',\n\t\t\tlabel: 'Roar Offset',\n\t\t\tlabelTooltip: 'Targeted offset in Rip/Roar timings',\n\t\t\tshowWhen: ShouldShowAdvParamST,\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecFeralDruid>({\n\t\t\tfieldName: 'ripLeeway',\n\t\t\tlabel: 'Rip Leeway',\n\t\t\tlabelTooltip: 'Rip leeway when determining roar clips',\n\t\t\tshowWhen: ShouldShowAdvParamST,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecFeralDruid>({\n\t\t\tfieldName: 'useRake',\n\t\t\tlabel: 'Use Rake',\n\t\t\tlabelTooltip: 'Use rake during rotation',\n\t\t\tshowWhen: ShouldShowAdvParamST,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecFeralDruid>({\n\t\t\tfieldName: 'useBite',\n\t\t\tlabel: 'Bite during rotation',\n\t\t\tlabelTooltip: 'Use bite during rotation rather than just at end',\n\t\t\tshowWhen: ShouldShowAdvParamST,\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecFeralDruid>({\n\t\t\tfieldName: 'biteTime',\n\t\t\tlabel: 'Bite Time',\n\t\t\tlabelTooltip: 'Min seconds on Rip/Roar to bite',\n\t\t\tshowWhen: (player: Player<Spec.SpecFeralDruid>) =>\n\t\t\t\tShouldShowAdvParamST(player) && player.getRotation().useBite == true && player.getRotation().biteModeType == BiteModeType.Emperical,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecFeralDruid>({\n\t\t\tfieldName: 'flowerWeave',\n\t\t\tlabel: 'Flower Weave',\n\t\t\tlabelTooltip: 'Fish for clearcasting during rotation with gotw',\n\t\t\tshowWhen: ShouldShowAdvParamAoe,\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecFeralDruid>({\n\t\t\textraCssClasses: ['used-in-apl'],\n\t\t\tfieldName: 'raidTargets',\n\t\t\tlabel: 'GotW Raid Targets',\n\t\t\tlabelTooltip: 'Raid size to assume for clearcast proc chance (can include pets as well, so 25 man raid potentically can be ~30)',\n\t\t\tshowWhen: (player: Player<Spec.SpecFeralDruid>) => player.aplRotation.enabled || (ShouldShowAdvParamAoe(player) && player.getRotation().flowerWeave == true),\n\t\t}),\n\t\t// Can be uncommented if/when analytical bite mode is added\n\t\t//InputHelpers.makeRotationEnumInput<Spec.SpecFeralDruid, BiteModeType>({\n\t\t//\tfieldName: 'biteModeType',\n\t\t//\tlabel: 'Bite Mode',\n\t\t//\tlabelTooltip: 'Underlying \"Bite logic\" to use',\n\t\t//\tvalues: [\n\t\t//\t\t{ name: 'Emperical', value: BiteModeType.Emperical },\n\t\t//\t],\n\t\t//\tshowWhen: (player: Player<Spec.SpecFeralDruid>) => player.getRotation().useBite == true\n\t\t//}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecFeralDruid>({\n\t\t\tfieldName: 'hotUptime',\n\t\t\tlabel: 'Revitalize Hot Uptime',\n\t\t\tlabelTooltip: 'Hot uptime percentage to assume when theorizing energy gains',\n\t\t\tpercent: true,\n\t\t\tshowWhen: (player: Player<Spec.SpecFeralDruid>) => player.getRotation().useBite == true && player.getRotation().biteModeType == BiteModeType.Analytical,\n\t\t}),\n\t],\n};\n","import {\n\tConsumes,\n\tFood,\n\tPotions,\n\tFlask,\n\tGlyphs,\n\tSpec,\n} from '../core/proto/common.js';\nimport { SavedTalents } from '../core/proto/ui.js';\n\nimport {\n\tFeralDruid_Rotation as FeralDruidRotation,\n\tFeralDruid_Options as FeralDruidOptions,\n\tDruidMajorGlyph,\n\tDruidMinorGlyph,\n\tFeralDruid_Rotation_BearweaveType,\n\tFeralDruid_Rotation_BiteModeType,\n\tFeralDruid_Rotation_AplType,\n} from '../core/proto/druid.js';\n\nimport * as PresetUtils from '../core/preset_utils.js';\n\nimport PreraidGear from './gear_sets/preraid.gear.json';\nimport P1Gear from './gear_sets/p1.gear.json';\nimport P2Gear from './gear_sets/p2.gear.json';\nimport P3Gear from './gear_sets/p3.gear.json';\nimport P4Gear from './gear_sets/p4.gear.json';\n\n// Preset options for this spec.\n// Eventually we will import these values for the raid sim too, so its good to\n// keep them in a separate file.\n\nexport const PRERAID_PRESET = PresetUtils.makePresetGear('Preraid Preset', PreraidGear);\nexport const P1_PRESET = PresetUtils.makePresetGear('P1 Preset', P1Gear);\nexport const P2_PRESET = PresetUtils.makePresetGear('P2 Preset', P2Gear);\nexport const P3_PRESET = PresetUtils.makePresetGear('P3 Preset', P3Gear);\nexport const P4_PRESET = PresetUtils.makePresetGear('P4 Preset', P4Gear);\n\nexport const DefaultRotation = FeralDruidRotation.create({\n\trotationType: FeralDruid_Rotation_AplType.SingleTarget,\n\n\tbearWeaveType: FeralDruid_Rotation_BearweaveType.None,\n\tminCombosForRip: 5,\n\tminCombosForBite: 5,\n\n\tuseRake: true,\n\tuseBite: true,\n\tmangleSpam: false,\n\tbiteModeType: FeralDruid_Rotation_BiteModeType.Emperical,\n\tbiteTime: 4.0,\n\tberserkBiteThresh: 25.0,\n\tberserkFfThresh: 15.0,\n\tpowerbear: false,\n\tminRoarOffset: 12.0,\n\tripLeeway: 3.0,\n\tmaintainFaerieFire: true,\n\thotUptime: 0.0,\n\tsnekWeave: false,\n\tflowerWeave: false,\n\traidTargets: 30,\n\tmaxFfDelay: 0.1,\n\tprePopOoc: true,\n});\n\nexport const ROTATION_PRESET_LEGACY_DEFAULT = PresetUtils.makePresetSimpleRotation('Legacy Default', Spec.SpecFeralDruid, DefaultRotation);\n\n// Default talents. Uses the wowhead calculator format, make the talents on\n// https://wowhead.com/wotlk/talent-calc and copy the numbers in the url.\nexport const StandardTalents = {\n\tname: 'Standard',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '-543202132322010053120030310511-203503012',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: DruidMajorGlyph.GlyphOfOmenOfClarity,\n\t\t\tmajor2: DruidMajorGlyph.GlyphOfSavageRoar,\n\t\t\tmajor3: DruidMajorGlyph.GlyphOfShred,\n\t\t\tminor1: DruidMinorGlyph.GlyphOfDash,\n\t\t\tminor2: DruidMinorGlyph.GlyphOfTheWild,\n\t\t\tminor3: DruidMinorGlyph.GlyphOfUnburdenedRebirth,\n\t\t}),\n\t}),\n};\n\nexport const DefaultOptions = FeralDruidOptions.create({\n\tlatencyMs: 100,\n\tassumeBleedActive: true,\n});\n\nexport const DefaultConsumes = Consumes.create({\n\tflask: Flask.FlaskOfEndlessRage,\n\tfood: Food.FoodDragonfinFilet,\n\tdefaultPotion: Potions.PotionOfSpeed,\n});\n","import { RaidBuffs } from '../core/proto/common.js';\nimport { PartyBuffs } from '../core/proto/common.js';\nimport { IndividualBuffs } from '../core/proto/common.js';\nimport { Debuffs } from '../core/proto/common.js';\nimport { Spec } from '../core/proto/common.js';\nimport { Stat, PseudoStat } from '../core/proto/common.js';\nimport { TristateEffect } from '../core/proto/common.js'\nimport { Stats } from '../core/proto_utils/stats.js';\nimport { Player } from '../core/player.js';\nimport { IndividualSimUI } from '../core/individual_sim_ui.js';\nimport { EventID, TypedEvent } from '../core/typed_event.js';\nimport { Gear } from '../core/proto_utils/gear.js';\nimport { ItemSlot } from '../core/proto/common.js';\nimport { GemColor } from '../core/proto/common.js';\nimport { Profession } from '../core/proto/common.js';\n\nimport * as IconInputs from '../core/components/icon_inputs.js';\nimport * as OtherInputs from '../core/components/other_inputs.js';\nimport * as Tooltips from '../core/constants/tooltips.js';\n\nimport * as DruidInputs from './inputs.js';\nimport * as Presets from './presets.js';\n\nexport class FeralDruidSimUI extends IndividualSimUI<Spec.SpecFeralDruid> {\n\tconstructor(parentElem: HTMLElement, player: Player<Spec.SpecFeralDruid>) {\n\t\tsuper(parentElem, player, {\n\t\t\tcssClass: 'feral-druid-sim-ui',\n\t\t\tcssScheme: 'druid',\n\t\t\t// List any known bugs / issues here and they'll be shown on the site.\n\t\t\tknownIssues: [\n\t\t\t],\n\t\t\twarnings: [\n\t\t\t],\n\n\t\t\t// All stats for which EP should be calculated.\n\t\t\tepStats: [\n\t\t\t\tStat.StatStrength,\n\t\t\t\tStat.StatAgility,\n\t\t\t\tStat.StatAttackPower,\n\t\t\t\tStat.StatMeleeHit,\n\t\t\t\tStat.StatMeleeCrit,\n\t\t\t\tStat.StatMeleeHaste,\n\t\t\t\tStat.StatArmorPenetration,\n\t\t\t\tStat.StatExpertise,\n\t\t\t],\n\t\t\tepPseudoStats: [\n\t\t\t\tPseudoStat.PseudoStatMainHandDps,\n\t\t\t],\n\t\t\t// Reference stat against which to calculate EP. I think all classes use either spell power or attack power.\n\t\t\tepReferenceStat: Stat.StatAttackPower,\n\t\t\t// Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\n\t\t\tdisplayStats: [\n\t\t\t\tStat.StatHealth,\n\t\t\t\tStat.StatStrength,\n\t\t\t\tStat.StatAgility,\n\t\t\t\tStat.StatAttackPower,\n\t\t\t\tStat.StatMeleeHit,\n\t\t\t\tStat.StatMeleeCrit,\n\t\t\t\tStat.StatMeleeHaste,\n\t\t\t\tStat.StatArmorPenetration,\n\t\t\t\tStat.StatExpertise,\n\t\t\t\tStat.StatMana,\n\t\t\t],\n\n\t\t\tdefaults: {\n\t\t\t\t// Default equipped gear.\n\t\t\t\tgear: Presets.P4_PRESET.gear,\n\t\t\t\t// Default EP weights for sorting gear in the gear picker.\n\t\t\t\tepWeights: Stats.fromMap({\n\t\t\t\t\t[Stat.StatStrength]: 2.40,\n\t\t\t\t\t[Stat.StatAgility]: 2.39,\n\t\t\t\t\t[Stat.StatAttackPower]: 1,\n\t\t\t\t\t[Stat.StatMeleeHit]: 2.51,\n\t\t\t\t\t[Stat.StatMeleeCrit]: 2.23,\n\t\t\t\t\t[Stat.StatMeleeHaste]: 1.83,\n\t\t\t\t\t[Stat.StatArmorPenetration]: 2.08,\n\t\t\t\t\t[Stat.StatExpertise]: 2.44,\n\t\t\t\t}, {\n\t\t\t\t\t[PseudoStat.PseudoStatMainHandDps]: 16.5,\n\t\t\t\t}),\n\t\t\t\t// Default consumes settings.\n\t\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\t\t// Default rotation settings.\n\t\t\t\trotation: Presets.DefaultRotation,\n\t\t\t\t// Default talents.\n\t\t\t\ttalents: Presets.StandardTalents.data,\n\t\t\t\t// Default spec-specific settings.\n\t\t\t\tspecOptions: Presets.DefaultOptions,\n\t\t\t\t// Default raid/party buffs settings.\n\t\t\t\traidBuffs: RaidBuffs.create({\n\t\t\t\t\tarcaneBrilliance: true,\n\t\t\t\t\tgiftOfTheWild: TristateEffect.TristateEffectImproved,\n\t\t\t\t\tbloodlust: true,\n\t\t\t\t\tmanaSpringTotem: TristateEffect.TristateEffectRegular,\n\t\t\t\t\tstrengthOfEarthTotem: TristateEffect.TristateEffectImproved,\n\t\t\t\t\tbattleShout: TristateEffect.TristateEffectImproved,\n\t\t\t\t\tunleashedRage: true,\n\t\t\t\t\ticyTalons: true,\n\t\t\t\t\tswiftRetribution: true,\n\t\t\t\t\tsanctifiedRetribution: true,\n\t\t\t\t}),\n\t\t\t\tpartyBuffs: PartyBuffs.create({\n\t\t\t\t\theroicPresence: true,\n\t\t\t\t}),\n\t\t\t\tindividualBuffs: IndividualBuffs.create({\n\t\t\t\t\tblessingOfKings: true,\n\t\t\t\t\tblessingOfMight: TristateEffect.TristateEffectImproved,\n\t\t\t\t}),\n\t\t\t\tdebuffs: Debuffs.create({\n\t\t\t\t\tjudgementOfWisdom: true,\n\t\t\t\t\tbloodFrenzy: true,\n\t\t\t\t\tgiftOfArthas: true,\n\t\t\t\t\texposeArmor: true,\n\t\t\t\t\tfaerieFire: TristateEffect.TristateEffectImproved,\n\t\t\t\t\tsunderArmor: true,\n\t\t\t\t\tcurseOfWeakness: TristateEffect.TristateEffectRegular,\n\t\t\t\t\theartOfTheCrusader: true,\n\t\t\t\t}),\n\t\t\t},\n\n\t\t\t// IconInputs to include in the 'Player' section on the settings tab.\n\t\t\tplayerIconInputs: [\n\t\t\t],\n\t\t\t// Inputs to include in the 'Rotation' section on the settings tab.\n\t\t\trotationInputs: DruidInputs.FeralDruidRotationConfig,\n\t\t\t// Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\n\t\t\tincludeBuffDebuffInputs: [\n\t\t\t\tIconInputs.IntellectBuff,\n\t\t\t\tIconInputs.MP5Buff,\n\t\t\t\tIconInputs.JudgementOfWisdom,\n\t\t\t],\n\t\t\texcludeBuffDebuffInputs: [\n\t\t\t],\n\t\t\t// Inputs to include in the 'Other' section on the settings tab.\n\t\t\totherInputs: {\n\t\t\t\tinputs: [\n\t\t\t\t\tDruidInputs.LatencyMs,\n\t\t\t\t\tDruidInputs.AssumeBleedActive,\n\t\t\t\t\tOtherInputs.TankAssignment,\n\t\t\t\t\tOtherInputs.InFrontOfTarget,\n\t\t\t\t],\n\t\t\t},\n\t\t\tencounterPicker: {\n\t\t\t\t// Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\n\t\t\t\tshowExecuteProportion: false,\n\t\t\t},\n\n\t\t\tpresets: {\n\t\t\t\t// Preset talents that the user can quickly select.\n\t\t\t\ttalents: [\n\t\t\t\t\tPresets.StandardTalents,\n\t\t\t\t],\n\t\t\t\trotations: [\n\t\t\t\t\tPresets.ROTATION_PRESET_LEGACY_DEFAULT,\n\t\t\t\t],\n\t\t\t\t// Preset gear configurations that the user can quickly select.\n\t\t\t\tgear: [\n\t\t\t\t\tPresets.PRERAID_PRESET,\n\t\t\t\t\tPresets.P1_PRESET,\n\t\t\t\t\tPresets.P2_PRESET,\n\t\t\t\t\tPresets.P3_PRESET,\n\t\t\t\t\tPresets.P4_PRESET,\n\t\t\t\t],\n\t\t\t},\n\t\t});\n\n\t\tthis.addOptimizeGemsAction();\n\t}\n\n\taddOptimizeGemsAction() {\n\t\tthis.addAction('Suggest Gems', 'optimize-gems-action', async () => {\n\t\t\tthis.optimizeGems();\n\t\t});\n\t}\n\n\tasync optimizeGems() {\n\t\t// First, clear all existing gems\n\t\tlet optimizedGear = this.player.getGear().withoutGems();\n\n\t\t// Next, socket the meta\n\t\toptimizedGear = optimizedGear.withMetaGem(this.sim.db.lookupGem(41398));\n\n\t\t// Next, socket a Nightmare Tear in the best blue socket bonus\n\t\tconst epWeights = this.player.getEpWeights();\n\t\tlet tearColor = GemColor.GemColorBlue;\n\t\tlet tearSlot = this.findBlueTearSlot(optimizedGear, epWeights);\n\n\t\tif (tearSlot == null) {\n\t\t\ttearColor = GemColor.GemColorYellow;\n\t\t\ttearSlot = this.findYellowTearSlot(optimizedGear, epWeights);\n\t\t}\n\n\t\toptimizedGear = this.socketTear(optimizedGear, tearSlot, tearColor);\n\t\tawait this.updateGear(optimizedGear);\n\n\t\t// Next, identify all sockets where red gems will be placed\n\t\tconst redSockets = this.findSocketsByColor(optimizedGear, epWeights, GemColor.GemColorRed, tearSlot);\n\n\t\t// Rank order red gems to use with their associated stat caps\n\t\tconst redGemCaps = new Array<[number, Stats]>();\n\t\tconst arpTarget = this.calcArpTarget(optimizedGear);\n\t\tconst arpCap = new Stats().withStat(Stat.StatArmorPenetration, arpTarget + 11);\n\t\tredGemCaps.push([40117, arpCap]);\n\t\tconst expCap = new Stats().withStat(Stat.StatExpertise, 6.5 * 32.79 + 4);\n\t\tredGemCaps.push([40118, expCap]);\n\t\tconst critCap = this.calcCritCap(optimizedGear);\n\t\tredGemCaps.push([40112, critCap]);\n\t\tredGemCaps.push([40111, new Stats()]);\n\n\t\t// If JC, then socket 34 ArP gems in first three red sockets before proceeding\n\t\tlet startIdx = 0;\n\n\t\tif (this.player.hasProfession(Profession.Jewelcrafting)) {\n\t\t\toptimizedGear = this.optimizeJcGems(optimizedGear, redSockets, arpTarget, arpCap, critCap);\n\t\t\tstartIdx = 3;\n\t\t}\n\n\t\t// Do multiple passes to fill in red gems up their caps\n\t\toptimizedGear = await this.fillGemsToCaps(optimizedGear, redSockets, redGemCaps, 0, startIdx);\n\n\t\t// Now repeat the process for yellow gems\n\t\tconst yellowSockets = this.findSocketsByColor(optimizedGear, epWeights, GemColor.GemColorYellow, tearSlot);\n\t\tconst yellowGemCaps = new Array<[number, Stats]>();\n\t\tconst hitCap = new Stats().withStat(Stat.StatMeleeHit, 8. * 32.79 + 4);\n\t\tyellowGemCaps.push([40125, hitCap]);\n\t\tyellowGemCaps.push([40162, hitCap.add(expCap)]);\n\n\t\t// If a hard ArP stack configuration is detected, then allow for socketing ArP gems in weaker yellow sockets after capping Hit and Expertise\n\t\tif (this.detectArpStackConfiguration(arpTarget)) {\n\t\t\tthis.sortYellowSockets(optimizedGear, yellowSockets, epWeights, tearSlot);\n\t\t\tyellowGemCaps.reverse();\n\t\t\tyellowGemCaps.push([40117, arpCap]);\n\t\t}\n\n\t\t// Continue with the rest of the yellow gems otherwise\n\t\tyellowGemCaps.push([40148, hitCap.add(critCap)]);\n\t\tyellowGemCaps.push([40143, hitCap]);\n\t\tyellowGemCaps.push([40147, critCap]);\n\t\tyellowGemCaps.push([40142, critCap]);\n\t\tyellowGemCaps.push([40146, new Stats()]);\n\t\tawait this.fillGemsToCaps(optimizedGear, yellowSockets, yellowGemCaps, 0, 0);\n\t}\n\n\tcalcArpTarget(gear: Gear): number {\n\t\tlet arpTarget = 1399;\n\n\t\t// First handle ArP proc trinkets\n\t\tif (gear.hasTrinket(45931)) {\n\t\t\tarpTarget -= 751;\n\t\t} else if (gear.hasTrinket(40256)) {\n\t\t\tarpTarget -= 612;\n\t\t}\n\n\t\t// Then check for Executioner enchant\n\t\tconst weapon = gear.getEquippedItem(ItemSlot.ItemSlotMainHand);\n\n\t\tif ((weapon != null) && (weapon!.enchant != null) && (weapon!.enchant!.effectId == 3225)) {\n\t\t\tarpTarget -= 120;\n\t\t}\n\n\t\treturn arpTarget;\n\t}\n\n\tcalcCritCap(gear: Gear): Stats {\n\t\tconst baseCritCapPercentage = 77.8; // includes 3% Crit debuff\n\t\tlet agiProcs = 0;\n\n\t\tif (gear.hasRelic(47668)) {\n\t\t\tagiProcs += 200;\n\t\t}\n\n\t\tif (gear.hasRelic(50456)) {\n\t\t\tagiProcs += 44*5;\n\t\t}\n\n\t\tif (gear.hasTrinket(47131) || gear.hasTrinket(47464)) {\n\t\t\tagiProcs += 510;\n\t\t}\n\n\t\tif (gear.hasTrinket(47115) || gear.hasTrinket(47303)) {\n\t\t\tagiProcs += 450;\n\t\t}\n\n\t\tif (gear.hasTrinket(44253) || gear.hasTrinket(42987)) {\n\t\t\tagiProcs += 300;\n\t\t}\n\n\t\treturn new Stats().withStat(Stat.StatMeleeCrit, (baseCritCapPercentage - agiProcs*1.1*1.06*1.02/83.33) * 45.91);\n\t}\n\n\tasync updateGear(gear: Gear): Promise<Stats> {\n\t\tthis.player.setGear(TypedEvent.nextEventID(), gear);\n\t\tawait this.sim.updateCharacterStats(TypedEvent.nextEventID());\n\t\treturn Stats.fromProto(this.player.getCurrentStats().finalStats);\n\t}\n\n\tfindBlueTearSlot(gear: Gear, epWeights: Stats): ItemSlot | null {\n\t\tlet tearSlot: ItemSlot | null = null;\n\t\tlet maxBlueSocketBonusEP: number = 1e-8;\n\n\t\tfor (var slot of gear.getItemSlots()) {\n\t\t\tconst item = gear.getEquippedItem(slot);\n\n\t\t\tif (!item) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (item!.numSocketsOfColor(GemColor.GemColorBlue) != 1) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst socketBonusEP = new Stats(item.item.socketBonus).computeEP(epWeights);\n\n\t\t\tif (socketBonusEP > maxBlueSocketBonusEP) {\n\t\t\t\ttearSlot = slot;\n\t\t\t\tmaxBlueSocketBonusEP = socketBonusEP;\n\t\t\t}\n\t\t}\n\n\t\treturn tearSlot;\n\t}\n\n\tfindYellowTearSlot(gear: Gear, epWeights: Stats): ItemSlot | null {\n\t\tlet tearSlot: ItemSlot | null = null;\n\t\tlet maxYellowSocketBonusEP: number = 1e-8;\n\n\t\tfor (var slot of gear.getItemSlots()) {\n\t\t\tconst item = gear.getEquippedItem(slot);\n\n\t\t\tif (!item) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (item!.numSocketsOfColor(GemColor.GemColorBlue) != 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst numYellowSockets = item!.numSocketsOfColor(GemColor.GemColorYellow);\n\n\t\t\tif (numYellowSockets == 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst socketBonusEP = new Stats(item.item.socketBonus).computeEP(epWeights);\n\t\t\tconst normalizedEP = socketBonusEP / numYellowSockets;\n\n\t\t\tif (normalizedEP > maxYellowSocketBonusEP) {\n\t\t\t\ttearSlot = slot;\n\t\t\t\tmaxYellowSocketBonusEP = normalizedEP;\n\t\t\t}\n\t\t}\n\n\t\treturn tearSlot;\n\t}\n\n\tsocketTear(gear: Gear, tearSlot: ItemSlot | null, tearColor: GemColor): Gear {\n\t\tif (tearSlot != null) {\n\t\t\tconst tearSlotItem = gear.getEquippedItem(tearSlot);\n\n\t\t\tfor (const [socketIdx, socketColor] of tearSlotItem!.allSocketColors().entries()) {\n\t\t\t\tif (socketColor == tearColor) {\n\t\t\t\t\treturn gear.withEquippedItem(tearSlot, tearSlotItem!.withGem(this.sim.db.lookupGem(49110), socketIdx), true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn gear;\n\t}\n\n\tfindSocketsByColor(gear: Gear, epWeights: Stats, color: GemColor, tearSlot: ItemSlot | null): Array<[ItemSlot, number]> {\n\t\tconst socketList = new Array<[ItemSlot, number]>();\n\t\tconst isBlacksmithing = this.player.isBlacksmithing();\n\n\t\tfor (var slot of gear.getItemSlots()) {\n\t\t\tconst item = gear.getEquippedItem(slot);\n\n\t\t\tif (!item) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst ignoreYellowSockets = ((item!.numSocketsOfColor(GemColor.GemColorBlue) > 0) && (slot != tearSlot))\n\n\t\t\tfor (const [socketIdx, socketColor] of item!.curSocketColors(isBlacksmithing).entries()) {\n\t\t\t\tif (item!.hasSocketedGem(socketIdx)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tlet matchYellowSocket = false;\n\n\t\t\t\tif ((socketColor == GemColor.GemColorYellow) && !ignoreYellowSockets) {\n\t\t\t\t\tmatchYellowSocket = new Stats(item.item.socketBonus).computeEP(epWeights) > 1e-8;\n\t\t\t\t}\n\n\t\t\t\tif (((color == GemColor.GemColorYellow) && matchYellowSocket) || ((color == GemColor.GemColorRed) && !matchYellowSocket)) {\n\t\t\t\t\tsocketList.push([slot, socketIdx]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn socketList;\n\t}\n\n\tsortYellowSockets(gear: Gear, yellowSocketList: Array<[ItemSlot, number]>, epWeights: Stats, tearSlot: ItemSlot | null) {\n\t\tyellowSocketList.sort((a,b) => {\n\t\t\t// If both yellow sockets belong to the same item, then treat them equally.\n\t\t\tconst slot1 = a[0];\n\t\t\tconst slot2 = b[0];\n\n\t\t\tif (slot1 == slot2) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\t// If an item already has a Nightmare Tear socketed, then bump up any yellow sockets in it to highest priority.\n\t\t\tif (slot1 == tearSlot) {\n\t\t\t\treturn -1;\n\t\t\t}\n\n\t\t\tif (slot2 == tearSlot) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\t// For all other cases, sort by the ratio of the socket bonus value divided by the number of yellow sockets required to activate it.\n\t\t\tconst item1 = gear.getEquippedItem(slot1);\n\t\t\tconst bonus1 = new Stats(item1!.item.socketBonus).computeEP(epWeights);\n\t\t\tconst item2 = gear.getEquippedItem(slot2);\n\t\t\tconst bonus2 = new Stats(item2!.item.socketBonus).computeEP(epWeights);\n\t\t\treturn bonus2 / item2!.numSocketsOfColor(GemColor.GemColorYellow) - bonus1 / item1!.numSocketsOfColor(GemColor.GemColorYellow);\n\t\t});\n\t}\n\n\tasync fillGemsToCaps(gear: Gear, socketList: Array<[ItemSlot, number]>, gemCaps: Array<[number, Stats]>, numPasses: number, firstIdx: number): Promise<Gear> {\n\t\tlet updatedGear: Gear = gear;\n\t\tconst currentGem = this.sim.db.lookupGem(gemCaps[numPasses][0]);\n\n\t\t// On the first pass, we simply fill all sockets with the highest priority gem\n\t\tif (numPasses == 0) {\n\t\t\tfor (const [itemSlot, socketIdx] of socketList.slice(firstIdx)) {\n\t\t\t\tupdatedGear = updatedGear.withGem(itemSlot, socketIdx, currentGem);\n\t\t\t}\n\t\t}\n\n\t\t// If we are below the relevant stat cap for the gem we just filled on the last pass, then we are finished.\n\t\tlet newStats = await this.updateGear(updatedGear);\n\t\tconst currentCap = gemCaps[numPasses][1];\n\n\t\tif (newStats.belowCaps(currentCap) || (numPasses == gemCaps.length - 1)) {\n\t\t\treturn updatedGear;\n\t\t}\n\n\t\t// If we exceeded the stat cap, then work backwards through the socket list and replace each gem with the next highest priority option until we are below the cap\n\t\tconst nextGem = this.sim.db.lookupGem(gemCaps[numPasses + 1][0]);\n\t\tconst nextCap = gemCaps[numPasses + 1][1];\n\t\tlet capForReplacement = currentCap.subtract(nextCap);\n\n\t\tif (currentCap.computeEP(capForReplacement) <= 0) {\n\t\t\tcapForReplacement = currentCap;\n\t\t}\n\n\t\tfor (var idx = socketList.length - 1; idx >= firstIdx; idx--) {\n\t\t\tif (newStats.belowCaps(capForReplacement)) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tconst [itemSlot, socketIdx] = socketList[idx];\n\t\t\tupdatedGear = updatedGear.withGem(itemSlot, socketIdx, nextGem);\n\t\t\tnewStats = await this.updateGear(updatedGear);\n\t\t}\n\n\t\t// Now run a new pass to check whether we've exceeded the next stat cap\n\t\tlet nextIdx = idx + 1;\n\n\t\tif (!newStats.belowCaps(currentCap)) {\n\t\t\tnextIdx = firstIdx;\n\t\t}\n\n\t\treturn await this.fillGemsToCaps(updatedGear, socketList, gemCaps, numPasses + 1, nextIdx);\n\t}\n\n\tcalcDistanceToArpTarget(numJcArpGems: number, passiveArp: number, numRedSockets: number, arpCap: number, arpTarget: number): number {\n\t\tconst numNormalArpGems = Math.max(0, Math.min(numRedSockets - 3, Math.floor((arpCap - passiveArp - 34 * numJcArpGems) / 20)));\n\t\tconst projectedArp = passiveArp + 34 * numJcArpGems + 20 * numNormalArpGems;\n\t\treturn Math.abs(projectedArp - arpTarget);\n\t}\n\n\toptimizeJcGems(gear: Gear, redSocketList: Array<[ItemSlot, number]>, arpTarget: number, arpCap: Stats, critCap: Stats): Gear {\n\t\tconst passiveStats = Stats.fromProto(this.player.getCurrentStats().finalStats);\n\t\tconst passiveArp = passiveStats.getStat(Stat.StatArmorPenetration);\n\t\tconst numRedSockets = redSocketList.length;\n\t\tconst arpCapValue = arpCap.getStat(Stat.StatArmorPenetration);\n\n\t\t// First determine how many of the JC gems should be 34 ArP gems\n\t\tconst optimalJcArpGems = [0,1,2,3].reduce((m,x)=> this.calcDistanceToArpTarget(m, passiveArp, numRedSockets, arpCapValue, arpTarget)<this.calcDistanceToArpTarget(x, passiveArp, numRedSockets, arpCapValue, arpTarget) ? m:x);\n\n\t\t// Now actually socket the gems\n\t\tconst belowCritCap = passiveStats.belowCaps(critCap);\n\t\tlet updatedGear: Gear = gear;\n\n\t\tfor (let i = 0; i < 3; i++) {\n\t\t\tlet gemId = 42142; // Str by default\n\n\t\t\tif (i < optimalJcArpGems) {\n\t\t\t\tgemId = 42153;\n\t\t\t} else if (belowCritCap) {\n\t\t\t\tgemId = 42143;\n\t\t\t}\n\n\t\t\tupdatedGear = updatedGear.withGem(redSocketList[i][0], redSocketList[i][1], this.sim.db.lookupGem(gemId));\n\t\t}\n\n\t\treturn updatedGear;\n\t}\n\n\tdetectArpStackConfiguration(arpTarget: number): boolean {\n\t\tconst currentArp = Stats.fromProto(this.player.getCurrentStats().finalStats).getStat(Stat.StatArmorPenetration);\n\t\treturn (arpTarget > 1000) && (currentArp > 648) && (currentArp + 20 < arpTarget + 11);\n\t}\n}\n"],"names":["InputHelpers.makeSpecOptionsBooleanIconInput","fieldName","id","ActionId","fromSpellId","extraCssClasses","getValue","player","getSpecOptions","innervateTarget","type","UnitType","Player","setValue","eventID","newValue","newOptions","UnitReference","create","Unknown","index","setSpecOptions","LatencyMs","InputHelpers.makeSpecOptionsNumberInput","label","labelTooltip","AssumeBleedActive","InputHelpers.makeSpecOptionsBooleanInput","ShouldShowAdvParamST","rot","getRotation","manualParams","rotationType","AplType","SingleTarget","ShouldShowAdvParamAoe","Aoe","FeralDruidRotationConfig","inputs","InputHelpers.makeRotationEnumInput","values","name","value","InputHelpers.makeRotationBooleanInput","showWhen","getTalents","omenOfClarity","changeEmitter","TypedEvent","onAny","rotationChangeEmitter","talentsChangeEmitter","berserk","InputHelpers.makeRotationNumberInput","float","positive","useBite","biteModeType","BiteModeType","Emperical","aplRotation","enabled","flowerWeave","percent","Analytical","PRERAID_PRESET","PresetUtils.makePresetGear","P1_PRESET","P1Gear","P2_PRESET","P2Gear","P3_PRESET","P3Gear","P4_PRESET","P4Gear","DefaultRotation","FeralDruidRotation","FeralDruid_Rotation_AplType","bearWeaveType","FeralDruid_Rotation_BearweaveType","None","minCombosForRip","minCombosForBite","useRake","mangleSpam","FeralDruid_Rotation_BiteModeType","biteTime","berserkBiteThresh","berserkFfThresh","powerbear","minRoarOffset","ripLeeway","maintainFaerieFire","hotUptime","snekWeave","raidTargets","maxFfDelay","prePopOoc","ROTATION_PRESET_LEGACY_DEFAULT","PresetUtils.makePresetSimpleRotation","Spec","SpecFeralDruid","StandardTalents","data","SavedTalents","talentsString","glyphs","Glyphs","major1","DruidMajorGlyph","GlyphOfOmenOfClarity","major2","GlyphOfSavageRoar","major3","GlyphOfShred","minor1","DruidMinorGlyph","GlyphOfDash","minor2","GlyphOfTheWild","minor3","GlyphOfUnburdenedRebirth","DefaultOptions","FeralDruidOptions","latencyMs","assumeBleedActive","DefaultConsumes","Consumes","flask","Flask","FlaskOfEndlessRage","food","Food","FoodDragonfinFilet","defaultPotion","Potions","PotionOfSpeed","FeralDruidSimUI","IndividualSimUI","constructor","parentElem","super","cssClass","cssScheme","knownIssues","warnings","epStats","Stat","StatStrength","StatAgility","StatAttackPower","StatMeleeHit","StatMeleeCrit","StatMeleeHaste","StatArmorPenetration","StatExpertise","epPseudoStats","PseudoStat","PseudoStatMainHandDps","epReferenceStat","displayStats","StatHealth","StatMana","defaults","gear","Presets.P4_PRESET","epWeights","Stats","fromMap","consumes","Presets.DefaultConsumes","rotation","Presets.DefaultRotation","talents","Presets.StandardTalents","specOptions","Presets.DefaultOptions","raidBuffs","RaidBuffs","arcaneBrilliance","giftOfTheWild","TristateEffect","TristateEffectImproved","bloodlust","manaSpringTotem","TristateEffectRegular","strengthOfEarthTotem","battleShout","unleashedRage","icyTalons","swiftRetribution","sanctifiedRetribution","partyBuffs","PartyBuffs","heroicPresence","individualBuffs","IndividualBuffs","blessingOfKings","blessingOfMight","debuffs","Debuffs","judgementOfWisdom","bloodFrenzy","giftOfArthas","exposeArmor","faerieFire","sunderArmor","curseOfWeakness","heartOfTheCrusader","playerIconInputs","rotationInputs","DruidInputs.FeralDruidRotationConfig","includeBuffDebuffInputs","IconInputs.IntellectBuff","IconInputs.MP5Buff","IconInputs.JudgementOfWisdom","excludeBuffDebuffInputs","otherInputs","DruidInputs.LatencyMs","DruidInputs.AssumeBleedActive","OtherInputs.TankAssignment","OtherInputs.InFrontOfTarget","encounterPicker","showExecuteProportion","presets","rotations","Presets.ROTATION_PRESET_LEGACY_DEFAULT","Presets.PRERAID_PRESET","Presets.P1_PRESET","Presets.P2_PRESET","Presets.P3_PRESET","this","addOptimizeGemsAction","addAction","async","optimizeGems","optimizedGear","getGear","withoutGems","withMetaGem","sim","db","lookupGem","getEpWeights","tearColor","GemColor","GemColorBlue","tearSlot","findBlueTearSlot","GemColorYellow","findYellowTearSlot","socketTear","updateGear","redSockets","findSocketsByColor","GemColorRed","redGemCaps","Array","arpTarget","calcArpTarget","arpCap","withStat","push","expCap","critCap","calcCritCap","startIdx","hasProfession","Profession","Jewelcrafting","optimizeJcGems","fillGemsToCaps","yellowSockets","yellowGemCaps","hitCap","add","detectArpStackConfiguration","sortYellowSockets","reverse","hasTrinket","weapon","getEquippedItem","ItemSlot","ItemSlotMainHand","enchant","effectId","agiProcs","hasRelic","setGear","nextEventID","updateCharacterStats","fromProto","getCurrentStats","finalStats","maxBlueSocketBonusEP","slot","getItemSlots","item","numSocketsOfColor","socketBonusEP","socketBonus","computeEP","maxYellowSocketBonusEP","numYellowSockets","normalizedEP","tearSlotItem","socketIdx","socketColor","allSocketColors","entries","withEquippedItem","withGem","color","socketList","isBlacksmithing","ignoreYellowSockets","curSocketColors","hasSocketedGem","matchYellowSocket","yellowSocketList","sort","a","b","slot1","slot2","item1","bonus1","item2","gemCaps","numPasses","firstIdx","updatedGear","currentGem","itemSlot","slice","newStats","currentCap","belowCaps","length","nextGem","nextCap","capForReplacement","subtract","idx","nextIdx","calcDistanceToArpTarget","numJcArpGems","passiveArp","numRedSockets","projectedArp","Math","max","min","floor","abs","redSocketList","passiveStats","getStat","arpCapValue","optimalJcArpGems","reduce","m","x","belowCritCap","i","gemId","currentArp"],"mappings":"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"}