{"version":3,"file":"sim-df3fa02e.chunk.js","sources":["../../../ui/restoration_shaman/presets.ts","../../../ui/restoration_shaman/inputs.ts","../../../ui/restoration_shaman/sim.ts"],"sourcesContent":["import {\n\tConsumes,\n\tFlask,\n\tFood,\n\tGlyphs,\n\tPotions,\n} from '../core/proto/common.js';\nimport { SavedTalents } from '../core/proto/ui.js';\n\nimport {\n\tRestorationShaman_Rotation as RestorationShamanRotation,\n\tRestorationShaman_Options as RestorationShamanOptions,\n\tShamanShield,\n\tShamanMajorGlyph,\n\tShamanMinorGlyph,\n} from '../core/proto/shaman.js';\n\nimport {\n\tAirTotem,\n\tEarthTotem,\n\tFireTotem,\n\tWaterTotem,\n\tShamanTotems,\n} from '../core/proto/shaman.js';\n\nimport * as PresetUtils from '../core/preset_utils.js';\n\nimport PreraidGear from './gear_sets/preraid.gear.json';\nimport P1Gear from './gear_sets/p1.gear.json';\nimport P2Gear from './gear_sets/p2.gear.json';\n\n// Preset options for this spec.\n// Eventually we will import these values for the raid sim too, so its good to\n// keep them in a separate file.\n\nexport const PRERAID_PRESET = PresetUtils.makePresetGear('PreRaid', PreraidGear);\nexport const P1_PRESET = PresetUtils.makePresetGear('P1 Preset', P1Gear);\nexport const P2_PRESET = PresetUtils.makePresetGear('P2 Preset', P2Gear);\n\nexport const DefaultRotation = RestorationShamanRotation.create({\n\ttotems: ShamanTotems.create({\n\t\tearth: EarthTotem.StrengthOfEarthTotem,\n\t\tair: AirTotem.WrathOfAirTotem,\n\t\tfire: FireTotem.FlametongueTotem,\n\t\twater: WaterTotem.HealingStreamTotem,\n\t}),\n\tuseEarthShield: true,\n\tuseRiptide: true,\n});\n\n// Default talents. Uses the wowhead calculator format, make the talents on\n// https://wowhead.com/wotlk/talent-calc and copy the numbers in the url.\nexport const TankHealingTalents = {\n\tname: 'Tank Healing',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '-30205033-05005331335010501122331251',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: ShamanMajorGlyph.GlyphOfEarthlivingWeapon,\n\t\t\tmajor2: ShamanMajorGlyph.GlyphOfEarthShield,\n\t\t\tmajor3: ShamanMajorGlyph.GlyphOfLesserHealingWave,\n\t\t\tminor2: ShamanMinorGlyph.GlyphOfWaterShield,\n\t\t\tminor1: ShamanMinorGlyph.GlyphOfRenewedLife,\n\t\t\tminor3: ShamanMinorGlyph.GlyphOfGhostWolf,\n\t\t}),\n\t}),\n};\nexport const RaidHealingTalents = {\n\tname: 'Raid Healing',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '-3020503-50005331335310501122331251',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: ShamanMajorGlyph.GlyphOfChainHeal,\n\t\t\tmajor2: ShamanMajorGlyph.GlyphOfEarthShield,\n\t\t\tmajor3: ShamanMajorGlyph.GlyphOfEarthlivingWeapon,\n\t\t\tminor2: ShamanMinorGlyph.GlyphOfWaterShield,\n\t\t\tminor1: ShamanMinorGlyph.GlyphOfRenewedLife,\n\t\t\tminor3: ShamanMinorGlyph.GlyphOfGhostWolf,\n\t\t}),\n\t}),\n};\n\nexport const DefaultOptions = RestorationShamanOptions.create({\n\tshield: ShamanShield.WaterShield,\n\tbloodlust: true,\n\tearthShieldPPM: 0,\n});\n\nexport const DefaultConsumes = Consumes.create({\n\tdefaultPotion: Potions.RunicManaInjector,\n\tflask: Flask.FlaskOfTheFrostWyrm,\n\tfood: Food.FoodFishFeast,\n});\n","import { Spec } from '../core/proto/common.js';\nimport { Player } from '../core/player.js';\nimport { ActionId } from '../core/proto_utils/action_id.js';\nimport { EventID, TypedEvent } from '../core/typed_event.js';\n\nimport {\n\tAirTotem,\n\tRestorationShaman_Options as ShamanOptions,\n\tShamanHealSpell,\n\tShamanShield,\n\tRestorationShaman_Rotation_BloodlustUse,\n} from '../core/proto/shaman.js';\n\nimport * as InputHelpers from '../core/components/input_helpers.js';\n\n// Configuration for spec-specific UI elements on the settings tab.\n// These don't need to be in a separate file but it keeps things cleaner.\n\nexport const ShamanShieldInput = InputHelpers.makeSpecOptionsEnumIconInput<Spec.SpecRestorationShaman, ShamanShield>({\n\tfieldName: 'shield',\n\tvalues: [\n\t\t{ value: ShamanShield.NoShield, tooltip: 'No Shield' },\n\t\t{ actionId: ActionId.fromSpellId(57960), value: ShamanShield.WaterShield },\n\t\t{ actionId: ActionId.fromSpellId(49281), value: ShamanShield.LightningShield },\n\t],\n});\n\n\nexport const PrimaryHealInput = InputHelpers.makeRotationEnumInput<Spec.SpecRestorationShaman, ShamanHealSpell>({\n\tfieldName: 'primaryHeal',\n\tlabel: 'Primary Heal',\n\tlabelTooltip: 'Set to \\'AutoHeal\\', to automatically swap based on best heal.',\n\tvalues: [\n\t\t{\n\t\t\tname: \"Auto Heal\",\n\t\t\tvalue: ShamanHealSpell.AutoHeal\n\t\t},\n\t\t{\n\t\t\tname: \"Lesser Healing Wave\",\n\t\t\tvalue: ShamanHealSpell.LesserHealingWave // actionId: ActionId.fromSpellId(49276),\n\t\t},\n\t\t{\n\t\t\tname: \"Healing Wave\",\n\t\t\tvalue: ShamanHealSpell.HealingWave // actionId: ActionId.fromSpellId(49273),\n\t\t},\n\t\t{\n\t\t\tname: \"Chain Heal\",\n\t\t\tvalue: ShamanHealSpell.ChainHeal // actionId: ActionId.fromSpellId(55459),\n\t\t},\n\t]\n});\n\n\nexport const UseRiptide = InputHelpers.makeRotationBooleanInput<Spec.SpecRestorationShaman>({\n\tfieldName: 'useRiptide',\n\tlabel: 'Use Riptide',\n\tlabelTooltip: 'Causes riptide to be cast on primary target when CD is available and not already on.',\n\tshowWhen: (player: Player<Spec.SpecRestorationShaman>) => player.getTalents().riptide,\n\tchangeEmitter: (player: Player<Spec.SpecRestorationShaman>) => TypedEvent.onAny([player.specOptionsChangeEmitter, player.rotationChangeEmitter, player.talentsChangeEmitter]),\n});\n\nexport const UseEarthShield = InputHelpers.makeRotationBooleanInput<Spec.SpecRestorationShaman>({\n\tfieldName: 'useEarthShield',\n\tlabel: 'Use Earth Shield',\n\tlabelTooltip: 'Causes earth shield to be cast on healing target.',\n\tshowWhen: (player: Player<Spec.SpecRestorationShaman>) => player.getTalents().earthShield,\n\tchangeEmitter: (player: Player<Spec.SpecRestorationShaman>) => TypedEvent.onAny([player.specOptionsChangeEmitter, player.rotationChangeEmitter, player.talentsChangeEmitter]),\n});\n\nexport const TriggerEarthShield = InputHelpers.makeSpecOptionsNumberInput<Spec.SpecRestorationShaman>({\n\tfieldName: 'earthShieldPPM',\n\tlabel: 'Earth Shield PPM',\n\tlabelTooltip: 'How many times Earth Shield should be triggered per minute.',\n\tshowWhen: (player: Player<Spec.SpecRestorationShaman>) => player.getTalents().earthShield && player.getRotation().useEarthShield,\n\tchangeEmitter: (player: Player<Spec.SpecRestorationShaman>) => TypedEvent.onAny([player.specOptionsChangeEmitter, player.rotationChangeEmitter, player.talentsChangeEmitter]),\n});\n\nexport const RestorationShamanRotationConfig = {\n\tinputs: [\n\t\tPrimaryHealInput,\n\t\tUseRiptide,\n\t\tUseEarthShield,\n\t\tTriggerEarthShield,\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecRestorationShaman>({\n\t\t\tfieldName: 'bloodlust',\n\t\t\tlabel: 'Use Bloodlust',\n\t\t\tlabelTooltip: 'Player will cast bloodlust',\n\t\t\tgetValue: (player: Player<Spec.SpecRestorationShaman>) => player.getRotation().bloodlust == RestorationShaman_Rotation_BloodlustUse.UseBloodlust,\n\t\t\tsetValue: (eventID: EventID, player: Player<Spec.SpecRestorationShaman>, newValue: boolean) => {\n\t\t\t\tconst newRotation = player.getRotation();\n\t\t\t\tif (newValue) {\n\t\t\t\t\tnewRotation.bloodlust = RestorationShaman_Rotation_BloodlustUse.UseBloodlust;\n\t\t\t\t} else {\n\t\t\t\t\tnewRotation.bloodlust = RestorationShaman_Rotation_BloodlustUse.NoBloodlust;\n\t\t\t\t}\n\t\t\t\tplayer.setRotation(eventID, newRotation);\n\t\t\t},\n\t\t}),\n\t],\n};\n\n","import { RaidBuffs } from '../core/proto/common.js';\nimport { PartyBuffs } from '../core/proto/common.js';\nimport { IndividualBuffs } from '../core/proto/common.js';\nimport { Debuffs } from '../core/proto/common.js';\nimport { Spec } from '../core/proto/common.js';\nimport { Stat } from '../core/proto/common.js';\nimport { TristateEffect } from '../core/proto/common.js'\nimport {\n\tAPLRotation,\n} from '../core/proto/apl.js';\nimport { Player } from '../core/player.js';\nimport { Stats } from '../core/proto_utils/stats.js';\nimport { IndividualSimUI } from '../core/individual_sim_ui.js';\nimport { TotemsSection } from '../core/components/totem_inputs.js';\n\nimport * as OtherInputs from '../core/components/other_inputs.js';\nimport * as Mechanics from '../core/constants/mechanics.js';\n\nimport * as ShamanInputs from './inputs.js';\nimport * as Presets from './presets.js';\n\nexport class RestorationShamanSimUI extends IndividualSimUI<Spec.SpecRestorationShaman> {\n\tconstructor(parentElem: HTMLElement, player: Player<Spec.SpecRestorationShaman>) {\n\t\tsuper(parentElem, player, {\n\t\t\tcssClass: 'restoration-shaman-sim-ui',\n\t\t\tcssScheme: 'shaman',\n\t\t\t// List any known bugs / issues here and they'll be shown on the site.\n\t\t\tknownIssues: [\n\t\t\t],\n\t\t\twarnings: [\n\t\t\t],\n\n\t\t\t// All stats for which EP should be calculated.\n\t\t\tepStats: [\n\t\t\t\tStat.StatIntellect,\n\t\t\t\tStat.StatSpirit,\n\t\t\t\tStat.StatSpellPower,\n\t\t\t\tStat.StatSpellCrit,\n\t\t\t\tStat.StatSpellHaste,\n\t\t\t\tStat.StatMP5,\n\t\t\t],\n\t\t\t// Reference stat against which to calculate EP. I think all classes use either spell power or attack power.\n\t\t\tepReferenceStat: Stat.StatSpellPower,\n\t\t\t// Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\n\t\t\tdisplayStats: [\n\t\t\t\tStat.StatHealth,\n\t\t\t\tStat.StatMana,\n\t\t\t\tStat.StatStamina,\n\t\t\t\tStat.StatIntellect,\n\t\t\t\tStat.StatSpirit,\n\t\t\t\tStat.StatSpellPower,\n\t\t\t\tStat.StatSpellCrit,\n\t\t\t\tStat.StatSpellHaste,\n\t\t\t\tStat.StatMP5,\n\t\t\t],\n\t\t\tmodifyDisplayStats: (player: Player<Spec.SpecRestorationShaman>) => {\n\t\t\t\tlet stats = new Stats();\n\t\t\t\tstats = stats.addStat(Stat.StatSpellCrit, player.getTalents().tidalMastery * 1 * Mechanics.SPELL_CRIT_RATING_PER_CRIT_CHANCE);\n\t\t\t\treturn {\n\t\t\t\t\ttalents: stats,\n\t\t\t\t};\n\t\t\t},\n\n\t\t\tdefaults: {\n\t\t\t\t// Default equipped gear.\n\t\t\t\tgear: Presets.P1_PRESET.gear,\n\t\t\t\t// Default EP weights for sorting gear in the gear picker.\n\t\t\t\tepWeights: Stats.fromMap({\n\t\t\t\t\t[Stat.StatIntellect]: 0.22,\n\t\t\t\t\t[Stat.StatSpirit]: 0.05,\n\t\t\t\t\t[Stat.StatSpellPower]: 1,\n\t\t\t\t\t[Stat.StatSpellCrit]: 0.67,\n\t\t\t\t\t[Stat.StatSpellHaste]: 1.29,\n\t\t\t\t\t[Stat.StatMP5]: 0.08,\n\t\t\t\t}),\n\t\t\t\t// Default consumes settings.\n\t\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\t\t// Default rotation settings.\n\t\t\t\trotation: Presets.DefaultRotation,\n\t\t\t\t// Default talents.\n\t\t\t\ttalents: Presets.RaidHealingTalents.data,\n\t\t\t\t// Default spec-specific settings.\n\t\t\t\tspecOptions: Presets.DefaultOptions,\n\t\t\t\t// Default raid/party buffs settings.\n\t\t\t\traidBuffs: RaidBuffs.create({\n\t\t\t\t\tarcaneBrilliance: true,\n\t\t\t\t\tdivineSpirit: true,\n\t\t\t\t\tgiftOfTheWild: TristateEffect.TristateEffectImproved,\n\t\t\t\t\tmoonkinAura: TristateEffect.TristateEffectImproved,\n\t\t\t\t\tsanctifiedRetribution: true,\n\t\t\t\t}),\n\t\t\t\tpartyBuffs: PartyBuffs.create({\n\t\t\t\t}),\n\t\t\t\tindividualBuffs: IndividualBuffs.create({\n\t\t\t\t\tblessingOfKings: true,\n\t\t\t\t\tblessingOfWisdom: 2,\n\t\t\t\t\tvampiricTouch: true,\n\t\t\t\t}),\n\t\t\t\tdebuffs: Debuffs.create({\n\t\t\t\t\tfaerieFire: TristateEffect.TristateEffectImproved,\n\t\t\t\t\tjudgementOfWisdom: true,\n\t\t\t\t\tmisery: true,\n\t\t\t\t\tcurseOfElements: true,\n\t\t\t\t\tshadowMastery: true,\n\t\t\t\t}),\n\t\t\t},\n\t\t\t// IconInputs to include in the 'Player' section on the settings tab.\n\t\t\tplayerIconInputs: [\n\t\t\t\tShamanInputs.ShamanShieldInput,\n\t\t\t],\n\t\t\t// Inputs to include in the 'Rotation' section on the settings tab.\n\t\t\trotationInputs: ShamanInputs.RestorationShamanRotationConfig,\n\t\t\t// Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\n\t\t\tincludeBuffDebuffInputs: [\n\t\t\t],\n\t\t\texcludeBuffDebuffInputs: [\n\t\t\t],\n\t\t\t// Inputs to include in the 'Other' section on the settings tab.\n\t\t\totherInputs: {\n\t\t\t\tinputs: [\n\t\t\t\t\tOtherInputs.TankAssignment\n\t\t\t\t],\n\t\t\t},\n\t\t\tcustomSections: [\n\t\t\t\tTotemsSection,\n\t\t\t],\n\t\t\tencounterPicker: {\n\t\t\t\t// Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\n\t\t\t\tshowExecuteProportion: false,\n\t\t\t},\n\n\t\t\tpresets: {\n\t\t\t\t// Preset talents that the user can quickly select.\n\t\t\t\ttalents: [\n\t\t\t\t\tPresets.RaidHealingTalents,\n\t\t\t\t\tPresets.TankHealingTalents,\n\t\t\t\t],\n\t\t\t\t// Preset gear configurations that the user can quickly select.\n\t\t\t\tgear: [\n\t\t\t\t\tPresets.PRERAID_PRESET,\n\t\t\t\t\tPresets.P1_PRESET,\n\t\t\t\t\tPresets.P2_PRESET,\n\t\t\t\t],\n\t\t\t},\n\n\t\t\tautoRotation: (_player: Player<Spec.SpecRestorationShaman>): APLRotation => {\n\t\t\t\treturn APLRotation.create();\n\t\t\t},\n\t\t});\n\t}\n}\n"],"names":["PRERAID_PRESET","PresetUtils.makePresetGear","P1_PRESET","P1Gear","P2_PRESET","P2Gear","DefaultRotation","RestorationShamanRotation","create","totems","ShamanTotems","earth","EarthTotem","StrengthOfEarthTotem","air","AirTotem","WrathOfAirTotem","fire","FireTotem","FlametongueTotem","water","WaterTotem","HealingStreamTotem","useEarthShield","useRiptide","TankHealingTalents","name","data","SavedTalents","talentsString","glyphs","Glyphs","major1","ShamanMajorGlyph","GlyphOfEarthlivingWeapon","major2","GlyphOfEarthShield","major3","GlyphOfLesserHealingWave","minor2","ShamanMinorGlyph","GlyphOfWaterShield","minor1","GlyphOfRenewedLife","minor3","GlyphOfGhostWolf","RaidHealingTalents","GlyphOfChainHeal","DefaultOptions","RestorationShamanOptions","shield","ShamanShield","WaterShield","bloodlust","earthShieldPPM","DefaultConsumes","Consumes","defaultPotion","Potions","RunicManaInjector","flask","Flask","FlaskOfTheFrostWyrm","food","Food","FoodFishFeast","ShamanShieldInput","InputHelpers.makeSpecOptionsEnumIconInput","fieldName","values","value","NoShield","tooltip","actionId","ActionId","fromSpellId","LightningShield","RestorationShamanRotationConfig","inputs","InputHelpers.makeRotationEnumInput","label","labelTooltip","ShamanHealSpell","AutoHeal","LesserHealingWave","HealingWave","ChainHeal","InputHelpers.makeRotationBooleanInput","showWhen","player","getTalents","riptide","changeEmitter","TypedEvent","onAny","specOptionsChangeEmitter","rotationChangeEmitter","talentsChangeEmitter","earthShield","InputHelpers.makeSpecOptionsNumberInput","getRotation","getValue","RestorationShaman_Rotation_BloodlustUse","UseBloodlust","setValue","eventID","newValue","newRotation","NoBloodlust","setRotation","RestorationShamanSimUI","IndividualSimUI","constructor","parentElem","super","cssClass","cssScheme","knownIssues","warnings","epStats","Stat","StatIntellect","StatSpirit","StatSpellPower","StatSpellCrit","StatSpellHaste","StatMP5","epReferenceStat","displayStats","StatHealth","StatMana","StatStamina","modifyDisplayStats","stats","Stats","addStat","tidalMastery","Mechanics.SPELL_CRIT_RATING_PER_CRIT_CHANCE","talents","defaults","gear","Presets.P1_PRESET","epWeights","fromMap","consumes","Presets.DefaultConsumes","rotation","Presets.DefaultRotation","Presets.RaidHealingTalents","specOptions","Presets.DefaultOptions","raidBuffs","RaidBuffs","arcaneBrilliance","divineSpirit","giftOfTheWild","TristateEffect","TristateEffectImproved","moonkinAura","sanctifiedRetribution","partyBuffs","PartyBuffs","individualBuffs","IndividualBuffs","blessingOfKings","blessingOfWisdom","vampiricTouch","debuffs","Debuffs","faerieFire","judgementOfWisdom","misery","curseOfElements","shadowMastery","playerIconInputs","ShamanInputs.ShamanShieldInput","rotationInputs","ShamanInputs.RestorationShamanRotationConfig","includeBuffDebuffInputs","excludeBuffDebuffInputs","otherInputs","OtherInputs.TankAssignment","customSections","TotemsSection","encounterPicker","showExecuteProportion","presets","Presets.TankHealingTalents","Presets.PRERAID_PRESET","Presets.P2_PRESET","autoRotation","_player","APLRotation"],"mappings":"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"}